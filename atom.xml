<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UniSharp blog</title>
  
  <subtitle>網站建置與管理經營的大平台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.unisharp.com/"/>
  <updated>2017-12-28T09:16:57.092Z</updated>
  <id>http://blog.unisharp.com/</id>
  
  <author>
    <name>Mr.UniSharp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>設計專欄：都市上班族養狗攻略，專屬宅毛孩散步 APP 概念圖</title>
    <link href="http://blog.unisharp.com/2018/01/08/%E8%A8%AD%E8%A8%88%E5%B0%88%E6%AC%84%EF%BC%9A%E9%83%BD%E5%B8%82%E4%B8%8A%E7%8F%AD%E6%97%8F%E9%A4%8A%E7%8B%97%E6%94%BB%E7%95%A5%EF%BC%8C%E5%B0%88%E5%B1%AC%E5%AE%85%E6%AF%9B%E5%AD%A9%E6%95%A3%E6%AD%A5%20APP%20%E6%A6%82%E5%BF%B5%E5%9C%96/"/>
    <id>http://blog.unisharp.com/2018/01/08/設計專欄：都市上班族養狗攻略，專屬宅毛孩散步 APP 概念圖/</id>
    <published>2018-01-07T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:57.092Z</updated>
    
    <content type="html"><![CDATA[<p>這次的設計主題是關於都市中的毛孩(寵物)因飼主工作繁忙、生活節奏快速而忽略照顧散步，所以創作了幾個概念性的介面，解決宅毛孩運動不足、憂鬱等問題。</p><a id="more"></a><h3 id="設計靈感來源："><a href="#設計靈感來源：" class="headerlink" title="設計靈感來源："></a>設計靈感來源：</h3><p>根據日本寵物食品協會預估，現在寵物的數量竟然比 14 歲以下孩童多出 400 萬，反映寵物逐漸被當成家人的現象。</p><p>但在台灣養寵物大部分都是上班族，經常工作繁忙，除了用自動餵食器滿足生理需求之外，毛孩的心理需求、渴望的關懷如何兼顧？想到毛孩在空蕩的房子等待，不經會感到悲從中來的孤寂感。</p><p>你，忍心讓毛孩獨自一人獨守空閨嗎？ＸＤ</p><p>如果有一種遛寵物的 app，搜尋附近有空閒能遛寵物的人，稱之「遛寵人 ( Pet Walker )」，在指定的公園遛，飼主除了能看到即時散步路線圖，還能透過視訊，觀察毛孩與 Pet Walker 的一舉一動，app 也提供了公園的即時天氣概況及壅擠程度，選擇最適合的散步路線，不僅能讓毛孩身心健康也能抵抗憂鬱。</p><h3 id="介面成果圖："><a href="#介面成果圖：" class="headerlink" title="介面成果圖："></a>介面成果圖：</h3><p><img src="http://i.imgur.com/EE7Gwwg.png" alt="毛孩散步 APP"></p><h3 id="設計理念："><a href="#設計理念：" class="headerlink" title="設計理念："></a>設計理念：</h3><p>採用暖色調為基底，搭配不規則的曲線，詮釋出愛毛孩的柔軟及溫柔</p><h3 id="設計過程："><a href="#設計過程：" class="headerlink" title="設計過程："></a>設計過程：</h3><p>原先採用電繪方式呈現主人與毛孩的互動，但效果並沒有讓人感受到 “真實”的情感，如果整個風格使用電繪，雖然可愛，但就像是回到以前養番薯寶寶的時代，玩久了，會膩。</p><p><img src="http://i.imgur.com/WPab5hd.png =300x" alt="毛孩散步 APP"></p><p>幾番思考後，挑選了幾張足以傳達情緒和情感的照片，以真實人與毛孩相處的圖片取代，也提升了整體介面的真實一致性。</p><h3 id="介面設計圖"><a href="#介面設計圖" class="headerlink" title="介面設計圖"></a>介面設計圖</h3><h4 id="搜尋介面"><a href="#搜尋介面" class="headerlink" title="搜尋介面"></a>搜尋介面</h4><p><img src="http://i.imgur.com/nOtfptX.jpg =300x" alt="毛孩散步 APP 搜尋"></p><p><img style="float: right;" src="whatever.jpg"></p><p>介面一開始輸入毛孩當前地址，找尋附近是否有 Pet Walker。上方的 range input 區間線，是可選擇預期的價格區間，顏色從淺色到深色代表價格由低到高。移標採用狗腳掌為亮點。</p><p>點擊地圖中價格可即時預覽 Pet Walker 介紹，Pet Walker 以真實影像取代電繪更具真實感。且用狗骨頭呈現評價，取代常見的星星，符合整體寵物設計概念。</p><h4 id="搜尋遛狗地點即時概況"><a href="#搜尋遛狗地點即時概況" class="headerlink" title="搜尋遛狗地點即時概況"></a>搜尋遛狗地點即時概況</h4><p><img src="http://i.imgur.com/xFxz3az.jpg =300x" alt="毛孩散步 APP 搜尋公園"></p><p>除了搜尋 Pet Walker 之外，也可搜尋遛狗地點，並且顯示即時天氣動態、結合 Google Map 的擁擠程度預測，以及當下多少隻貓狗在該地區活動，不管是活潑或是孤僻的毛孩，都可以透過該資訊，選對毛孩最好的地點。</p><h4 id="查看-Pet-Walker-詳細資訊"><a href="#查看-Pet-Walker-詳細資訊" class="headerlink" title="查看 Pet Walker 詳細資訊"></a>查看 Pet Walker 詳細資訊</h4><p><img src="http://i.imgur.com/VcwCjOz.png =300x" alt="毛孩散步 APP walker 詳細資訊"></p><p>查看 Pet Walker 詳細資訊，上方地圖為提供的遛狗路線，所花費時間，以及提供娛樂設備（球、飛盤）等。</p><h4 id="查看毛孩散步即時動態"><a href="#查看毛孩散步即時動態" class="headerlink" title="查看毛孩散步即時動態"></a>查看毛孩散步即時動態</h4><p><img src="http://i.imgur.com/1eWDoxS.png =300x" alt="毛孩散步 APP 散步即時動態"></p><p>當 Pet Walker 開始遛毛孩，畫面就會開始顯示毛孩當前位置，下方顯示所經過詳細路徑，也可透過視訊即時通話，及時給予毛孩互動。</p><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>以上是本月設計專欄的遛寵物的 App 介面概念圖。寵物需求一多，商機就會出現，一個一個創意想法都漸漸付諸實行在日常生活之中。在國外已經有類似概念的產品出現，或許台灣也可以做，但需配合當地規範產生一整個系統的配套措施，如果你有任何其他的想法或是更棒的解決方案，歡迎在下方留言喔 ^.&lt;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次的設計主題是關於都市中的毛孩(寵物)因飼主工作繁忙、生活節奏快速而忽略照顧散步，所以創作了幾個概念性的介面，解決宅毛孩運動不足、憂鬱等問題。&lt;/p&gt;
    
    </summary>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="設計專欄" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88%E5%B0%88%E6%AC%84/"/>
    
  </entry>
  
  <entry>
    <title>如何由「及格」的PM，進步到「優異」的PM</title>
    <link href="http://blog.unisharp.com/2017/12/28/%E5%A6%82%E4%BD%95%E7%94%B1%E3%80%8C%E5%8F%8A%E6%A0%BC%E3%80%8D%E7%9A%84PM%EF%BC%8C%E9%80%B2%E6%AD%A5%E5%88%B0%E3%80%8C%E5%84%AA%E7%95%B0%E3%80%8D%E7%9A%84PM/"/>
    <id>http://blog.unisharp.com/2017/12/28/如何由「及格」的PM，進步到「優異」的PM/</id>
    <published>2017-12-27T16:00:00.000Z</published>
    <updated>2017-12-28T10:01:08.515Z</updated>
    
    <content type="html"><![CDATA[<p>最近重看了「異數 超凡與平凡的界線在哪裡」，這本書對自己工作的內容有了些新的方向與看法。</p><p>我歸納出想成為優秀 PM 或提升 PM 績效，本身要具備：<br><a id="more"></a></p><ol><li>足夠的專案管理專業知識</li><li>熟稔的專案管理實務工作技巧</li><li>相關的專案管理專業證照</li></ol><p>此外，還需要：</p><ol><li>培養晉身優質 PM 的人格特質</li></ol><p>因為 PM 的行為，能具體影響專案的績效；而一個人的行為特徵，又與其人格特質有關、受其人格特質的影響不少。　　</p><p>一位能管理專案、達成專案目標之優質 PM 所需要的人格特質是什麼呢？</p><p>我們能從暸解專案任務特徵的本質，進而辨識出所需要的優質 PM 人格特質。</p><p>再更清楚地來說，當我對任務的本質有愈深刻的認知，就愈能掌握該任務的特性；<br>若能讓自身人格特質與行為愈符合該任務特性的需要，也就愈能勝任該任務、愈能達成任務績效。<br>　　<br>下面列了我覺得最重要的兩項人格特質：</p><h3 id="積極的人格特質"><a href="#積極的人格特質" class="headerlink" title="積極的人格特質"></a>積極的人格特質</h3><p>　　<br>PM 要負責的是一種獨特工作內容的任務（「專案」的本質特徵之一），這意謂著 PM 所面對的是一個過去沒有做過的事（可能還是組織裡的第一人），沒有範本可抄、沒有 SOP 可以照著做即能成功。所以，PM 得具有一種非常「積極」的人格特質。會想挑戰一個過去沒做過的、很陌生的工作內容，他會想方法讓任務成功，積極地面對，並解決專案問題，他有非常強烈的欲望、非常地想完成這個他過去沒做過的事情，他會堅持到底！　</p><blockquote><p>面對沒做過的事</p></blockquote><h3 id="超強的行動力"><a href="#超強的行動力" class="headerlink" title="超強的行動力"></a>超強的行動力</h3><p>　　<br>PM 要面對的是一種具有時程限制的任務（「專案」的本質特徵之二），這意謂著 PM 要處理的是一個具有極大時程壓力的任務目標，它不容許拖延、一旦延遲會帶來極大的損失（可能被罰款、可能失去商業價值）。所以，PM 得具有一種非常強烈的「行動力」的人格特質。他總是「今日事、今日畢」、能今日啟動就絕不拖到明日，因為這是一個有限制的任務，專案的時間有限、預算有限、人力資源有限…等，你只能極為珍視專案擁有的各項有限資源，並以最有效率的方式來指導與配置。</p><blockquote><p>能化解極大的期限壓力</p></blockquote><p>總結一下，一個人的人格特質是天生的、是上天給的「禮物」。擁有的「禮物」恰與 PM 任務特性相吻合時，會感到較易勝任 PM 職務；<br>倘若尚未擁有這樣的「禮物」時，也不要傷心或放棄，透過探索工作中的樂趣（工作中哪一件事是讓你最有成就感的），去鍛鍊具備優質 PM 應有的觀念與人格特質，同時回顧上面兩項人格特質，希望能提供一個正向的引導，加油吧！怒力讓想法與行為更符合一位優秀 PM 應有的，進而能具體影響專案績效。</p><p>預告，下一篇，將會舉例如何在工作中尋找樂趣，將此樂趣擴展到職業生涯。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重看了「異數 超凡與平凡的界線在哪裡」，這本書對自己工作的內容有了些新的方向與看法。&lt;/p&gt;
&lt;p&gt;我歸納出想成為優秀 PM 或提升 PM 績效，本身要具備：&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>手把手製作資訊圖表( Infographic ) 五大步驟</title>
    <link href="http://blog.unisharp.com/2017/12/07/%E6%89%8B%E6%8A%8A%E6%89%8B%E8%A3%BD%E4%BD%9C%E8%B3%87%E8%A8%8A%E5%9C%96%E8%A1%A8(%20Infographic%20)%20%E4%BA%94%E5%A4%A7%E6%AD%A5%E9%A9%9F/"/>
    <id>http://blog.unisharp.com/2017/12/07/手把手製作資訊圖表( Infographic ) 五大步驟/</id>
    <published>2017-12-06T16:00:00.000Z</published>
    <updated>2017-12-28T10:01:06.973Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、選定主題"><a href="#一、選定主題" class="headerlink" title="一、選定主題"></a>一、選定主題</h3><p>製作資訊圖表是一個將數據、資訊視覺化的呈現方式，所以首要的工作，即是選定一個能夠被分析與彙整的範疇，並且抱持著一個想法，要帶領他人暸解自己想表達的內容，來進行圖表的製作。</p><a id="more"></a><h3 id="二、蒐集客觀數據"><a href="#二、蒐集客觀數據" class="headerlink" title="二、蒐集客觀數據"></a>二、蒐集客觀數據</h3><p>數據的來源最直接影響圖表的可信程度，越少偏頗或不公正的因素，例如：想得知今天該店家有幾位客人，很刻苦的方式即是站在店門口數，不過更客觀地方是，可調閱監視器或是收營機結帳數據。以下列舉一些可參考的數據來源：</p><p><a href="https://www.stat.gov.tw/mp.asp?mp=4" target="_blank" rel="external">中華民國統計資訊網</a>可針對想要的主題可以取得生育率、就業率和物價等指數</p><p><a href="https://www.fda.gov.tw/TC/index.aspx" target="_blank" rel="external">衛生福利部食品藥物管理署</a></p><p><a href="http://www.taitraesource.com/" target="_blank" rel="external">貿協全球資訊網</a></p><p>特定主題，例如食物、貿易都可在相關網站上得到數據</p><h3 id="三、整理資料"><a href="#三、整理資料" class="headerlink" title="三、整理資料"></a>三、整理資料</h3><p>以空氣清淨機為例，整理出各個家具所排放出的有毒物質，以及肺癌發病機率為例，整理出以下表格</p><p><img src="https://i.imgur.com/fDWBFyh.png" alt="Alt text"></p><h3 id="四、選定色彩"><a href="#四、選定色彩" class="headerlink" title="四、選定色彩"></a>四、選定色彩</h3><p>有了一份有系統、有邏輯的數據之後，影響在他人腦中的印象，色彩會是一個重點，推薦幾個好用的配色資源：</p><ul><li><p><a href="https://color.adobe.com/zh/explore/?filter=most-popular&amp;time=month" target="_blank" rel="external">Adobe Color CC</a><br>adobe 配色盤，可依據不同主題尋找適合的顏色組合</p></li><li><p><a href="http://colorhunt.co/" target="_blank" rel="external">color hunt</a></p></li><li><a href="http://nipponcolors.com/" target="_blank" rel="external">Nippon color</a><br>提供日本傳統色系，不像一般配色網用色碼呈現，反而是用食物、顏色的中日文去呈現，另外也有簡體版本的，有87%相似</li></ul><p>本次主題與環境相關的配色就選擇大自然森林色系，樹木的咖啡和綠</p><p><img src="https://i.imgur.com/wffgvNH.png" alt="Alt text"></p><h3 id="五、資料圖像化"><a href="#五、資料圖像化" class="headerlink" title="五、資料圖像化"></a>五、資料圖像化</h3><p>最後，圖像化能夠化繁為簡，有助於理解數據、資訊</p><p>例如：<a href="https://www.flaticon.com/" target="_blank" rel="external">flat icon</a> 對於 icon 的自由度很大，可以調顏色、大小，輸出成PNG、SVG、EPS、PSD檔</p><p>利用簡單的圖像就可以呈現複雜的資訊</p><p><img src="https://i.imgur.com/dDfMJ4J.png" alt="Alt text"></p><p>其他關於資訊圖表的製作，也可以進入 <a href="http://www.dailyinfographic.com/" target="_blank" rel="external">Daily Infographic</a> 找尋靈感喔！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、選定主題&quot;&gt;&lt;a href=&quot;#一、選定主題&quot; class=&quot;headerlink&quot; title=&quot;一、選定主題&quot;&gt;&lt;/a&gt;一、選定主題&lt;/h3&gt;&lt;p&gt;製作資訊圖表是一個將數據、資訊視覺化的呈現方式，所以首要的工作，即是選定一個能夠被分析與彙整的範疇，並且抱持著一個想法，要帶領他人暸解自己想表達的內容，來進行圖表的製作。&lt;/p&gt;
    
    </summary>
    
      <category term="美學設計" scheme="http://blog.unisharp.com/categories/%E7%BE%8E%E5%AD%B8%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="設計專欄" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88%E5%B0%88%E6%AC%84/"/>
    
  </entry>
  
  <entry>
    <title>關於 iPhone X 你需要知道的 UI 設計規範 &amp; CSS 屬性</title>
    <link href="http://blog.unisharp.com/2017/11/09/%E9%97%9C%E6%96%BC%20iPhone%20X%20%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%20UI%20%E8%A8%AD%E8%A8%88%E8%A6%8F%E7%AF%84%20&amp;%20CSS%20%E5%B1%AC%E6%80%A7/"/>
    <id>http://blog.unisharp.com/2017/11/09/關於 iPhone X 你需要知道的 UI 設計規範 &amp; CSS 屬性/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2017-12-28T09:19:26.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="For-UI-設計師"><a href="#For-UI-設計師" class="headerlink" title="For UI 設計師"></a>For UI 設計師</h1><p>Apple 官方設計規範標示出，比起 4.7 吋的 iphone，iphone x 高多了 145 pt<br><a id="more"></a></p><p><img src="https://i.imgur.com/jcwgIrR.png" alt="Alt text"><br>source: <a href="https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/" target="_blank" rel="external">https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/</a></p><p>畫面尺寸為 375 x 812<br>Status Bar 高度由 20pt 增長為 44pt</p><p><img src="https://i.imgur.com/TPEHwuh.jpg" alt="Alt text"><br>source: <a href="https://designcode.io/ios11-iphone-x" target="_blank" rel="external">https://designcode.io/ios11-iphone-x</a></p><p>扣除掉上方劉海 ( 高 44 pt )，以及下方的 home indicator ( 高 34 pt )，安全區域( Safe Area )就是 375 x 734<br>包含 Home Indicator，Tab Bar 高度由 49pt 增長為 83pt<br>鍵盤高度由 216pt 增長為 291pt</p><p><img src="https://i.imgur.com/EXh7RPf.png" alt="Alt text"></p><p>當橫向擺放時，Home indicator 高會變成 21 pt，左右各有 44 pt 的留白空間，安全空間會變成 724 x 354</p><h2 id="Layout-Margin"><a href="#Layout-Margin" class="headerlink" title="Layout Margin"></a>Layout Margin</h2><p>不管是直橫向，除了上面提到安全區域外，通常文字&amp;按鈕等重要元件需要向內縮 15 pt 稱為 Layout Margin。</p><p><img src="https://i.imgur.com/lInfRPf.png" alt="Alt text"></p><h2 id="別想改-Home-indicator-顏色"><a href="#別想改-Home-indicator-顏色" class="headerlink" title="別想改 Home indicator 顏色"></a>別想改 Home indicator 顏色</h2><p>Home indicator 會依據周圍背景，決定自身要變黑或白，在撥放影片時，會將自身隱身，在設計時注意不要加進去了。</p><p>做UI設計時要避免以下狀況：</p><ol><li>操作不要與安全區交疊</li><li>滿版圖片要拉到位</li></ol><p><img src="https://i.imgur.com/8CKjmgg.png" alt="Alt text"></p><ol><li>操作不要與 Home indicator交疊</li><li>底部 tab bars 背景延伸到底</li></ol><p><img src="https://i.imgur.com/3h2yNmn.png" alt="Alt text"></p><h1 id="For-前端工程師"><a href="#For-前端工程師" class="headerlink" title="For 前端工程師"></a>For 前端工程師</h1><h2 id="Viewport-fit-cover"><a href="#Viewport-fit-cover" class="headerlink" title="Viewport-fit=cover"></a>Viewport-fit=cover</h2><p>要使用iPhone X的全螢幕顯示網頁內容的話，就將viewport設定為：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name="viewport" content="viewport-fit=cover"&gt;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/zFaEzft.png" alt="Alt text"><br>就會使用到所有螢幕空間</p><p><img src="https://i.imgur.com/9Ic2Jaa.png" alt="Alt text"></p><p>source: <a href="http://stephenradford.me/removing-the-white-bars-in-safari-on-iphone-x/" target="_blank" rel="external">http://stephenradford.me/removing-the-white-bars-in-safari-on-iphone-x/</a></p><p>但這時，因為這日系劉海( Notch ) 擋住畫面內容，不得不再多加上 safe-area-inset-*<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">constant(safe-area-inset-top)</div><div class="line">constant(safe-area-inset-right)</div><div class="line">constant(safe-area-inset-bottom)</div><div class="line">constant(safe-area-inset-left)</div></pre></td></tr></table></figure></p><p>此屬性能夠讓 iphone x 自動判定在直、橫放都可以保留一定的空間。</p><p><img src="https://i.imgur.com/QnK6m1c.png" alt="Alt text"></p><p>Source: <a href="https://medium.com/%40onopko/iphone-x-%E3%81%AE-safari-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B-web-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E8%A1%A8%E7%A4%BA-58da5f503d0b" target="_blank" rel="external">https://medium.com/%40onopko/iphone-x-%E3%81%AE-safari-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B-web-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%81%AE%E8%A1%A8%E7%A4%BA-58da5f503d0b</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;For-UI-設計師&quot;&gt;&lt;a href=&quot;#For-UI-設計師&quot; class=&quot;headerlink&quot; title=&quot;For UI 設計師&quot;&gt;&lt;/a&gt;For UI 設計師&lt;/h1&gt;&lt;p&gt;Apple 官方設計規範標示出，比起 4.7 吋的 iphone，iphone x 高多了 145 pt&lt;br&gt;
    
    </summary>
    
      <category term="美學設計" scheme="http://blog.unisharp.com/categories/%E7%BE%8E%E5%AD%B8%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="css" scheme="http://blog.unisharp.com/tags/css/"/>
    
      <category term="UI" scheme="http://blog.unisharp.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 好用工具，幫你快速生成 MySQL schema 文件</title>
    <link href="http://blog.unisharp.com/2017/10/31/Laravel%20%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%B9%AB%E4%BD%A0%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90%20MySQL%20schema%20%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.unisharp.com/2017/10/31/Laravel 好用工具，幫你快速生成 MySQL schema 文件/</id>
    <published>2017-10-30T16:00:00.000Z</published>
    <updated>2017-12-28T09:19:26.268Z</updated>
    
    <content type="html"><![CDATA[<p>對工程師來說，coding 不完全是我們工作的全部，有的時候我們花了更多時間在會議討論、溝通、交付文件。雖然溫憨慢共話，不過文件會說話，生出好文件，做事好方便<br><a id="more"></a></p><h3 id="Doc-Us"><a href="#Doc-Us" class="headerlink" title="Doc Us"></a><a href="https://github.com/UniSharp/doc-us" target="_blank" rel="external">Doc Us</a></h3><p>於是我們做了這套 Laravel 的 MySQL database schema 文件生成工具，跟著下面的「三三三」，支援三種輸出、安裝三步驟、演示三種結果，帶你來了解這套工具</p><h1 id="支援三種輸出"><a href="#支援三種輸出" class="headerlink" title="支援三種輸出"></a>支援三種輸出</h1><p>滿足郎客的不同需求，像是 PM 想在瀏覽器閱讀 schema 文件、開發者喜歡看 Markdown 格式，還有可供程式串接的 JSON 格式，這一切都在彈指之間。</p><p>supported-format：</p><ul><li>html</li><li>markdown</li><li>json</li></ul><p>依照下方步驟安裝完畢，即可簡單使用 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 安裝三步驟</div><div class="line"></div><div class="line">1. composer 一道指令安裝</div></pre></td></tr></table></figure></p><p>composer require unisharp/doc-us<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 把 ServiceProvider 加進 config/app.php</div></pre></td></tr></table></figure></p><p>‘providers’ =&gt; [<br>    /<em> … </em>/</p><pre><code>UniSharp\DocUs\DocUsServiceProvider::class,/* ... */</code></pre><p>];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 到 .env 把功能打開，預設關閉是避免資料庫結構自動曝露</div></pre></td></tr></table></figure></p><p>DOC_US_ENABLE=true<br>```</p><h1 id="三種結果演示"><a href="#三種結果演示" class="headerlink" title="三種結果演示"></a>三種結果演示</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p><img src="https://imgur.com/QI9M5Si.png" alt="Alt text"></p><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p><img src="https://imgur.com/2zyCijS.png" alt="Alt text"></p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p><img src="https://imgur.com/2ItgJl7.png" alt="Alt text"></p><h3 id="如果你也有相同的需求，不妨試試看，Github-Repo-請看這裡，希望有幫助到你"><a href="#如果你也有相同的需求，不妨試試看，Github-Repo-請看這裡，希望有幫助到你" class="headerlink" title="如果你也有相同的需求，不妨試試看，Github Repo 請看這裡，希望有幫助到你"></a>如果你也有相同的需求，不妨試試看，<a href="https://github.com/UniSharp/doc-us" target="_blank" rel="external">Github Repo 請看這裡</a>，希望有幫助到你</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;對工程師來說，coding 不完全是我們工作的全部，有的時候我們花了更多時間在會議討論、溝通、交付文件。雖然溫憨慢共話，不過文件會說話，生出好文件，做事好方便&lt;br&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Laravel" scheme="http://blog.unisharp.com/tags/Laravel/"/>
    
      <category term="Database" scheme="http://blog.unisharp.com/tags/Database/"/>
    
      <category term="工具小教室" scheme="http://blog.unisharp.com/tags/%E5%B7%A5%E5%85%B7%E5%B0%8F%E6%95%99%E5%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>設計師的十點 Startup 心得（下）</title>
    <link href="http://blog.unisharp.com/2017/10/23/%E8%A8%AD%E8%A8%88%E5%B8%AB%E7%9A%84%E5%8D%81%E9%BB%9E%20Startup%C2%A0%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://blog.unisharp.com/2017/10/23/設計師的十點 Startup 心得（下）/</id>
    <published>2017-10-22T16:00:00.000Z</published>
    <updated>2017-12-28T09:19:26.272Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇跟大家分享了幾個思維，和設計師要具備的新創心態後，這一篇將延續上集的內容，繼續分享我的江湖走跳心得(!?)</p><a id="more"></a><h1 id="六、執行力比點子重要"><a href="#六、執行力比點子重要" class="headerlink" title="六、執行力比點子重要"></a>六、執行力比點子重要</h1><h3 id="Gomaji"><a href="#Gomaji" class="headerlink" title="Gomaji"></a>Gomaji</h3><p>Gomaji 直接複製了 Groupon 的模式在台灣推出團購業務，在團購正夯的當時，光是全台灣在做團購網站的公司就有一、二十家之多，但 Gomaji 有很強的業務推廣能力，且迅速跟 yahoo 展開合作，拉開了與其他同質公司的差距，甚至打敗了 Groupon 成為台灣團購網站的龍頭。</p><h3 id="創業家兄弟"><a href="#創業家兄弟" class="headerlink" title="創業家兄弟"></a>創業家兄弟</h3><p>郭氏兄弟 2007 年創立地圖日記，而後被 Groupon 收購，雖然 Groupon 最後撤退收場，但他們憑藉累積的電商經驗和 knowhow，成立了新公司迅速推出多個分眾的垂直電商網站(生活市集、好魚網)等等，並成功 IPO，還達成了台灣的網路公司最快掛牌紀錄。</p><p>市面上有很多成功的產品，並不是因為一個新奇的 IDEA 而一炮而紅。而是透過優異的執行力快速驗證市場，發展商業模式獲利，拉開與競爭對手的差距，進而在市場上取得一席之地。</p><p>如果你的產品並不新穎，紮實的執行力能為你創造更多機會。如果你有一個很棒的想法，更需要有動力十足的執行力去將這個想法實踐！</p><h1 id="八、抓住站上風口的機會"><a href="#八、抓住站上風口的機會" class="headerlink" title="八、抓住站上風口的機會"></a>八、抓住站上風口的機會</h1><p>小米的創辦人雷軍說過：</p><blockquote><p>「站在風口上，豬都會飛」</p></blockquote><p>雖然這是雷軍常常被拿來調侃的一句話，但我的確曾經在流行偷菜的那些年，於雜誌訪談中，聽過開心農場的開發商老闆說過，開心農場的成功有很大一部分的原因是是，剛好在 facebook 潮起的浪頭上。</p><p>所以，與其叫它風口，我更覺得可以稱呼它為「市場機會」。</p><p>「市場機會」除了不斷的關注產業，鍛鍊自己的敏銳度外，也可以透過結合時事題材的方式，把握黃金時間思考自家的產品能夠如何與時事結合，就算效果不彰、不見得能因搭上產業浪潮順風車而變得巨大，但是成功的時事題材，也能在短期內為產品帶來豐厚的關注度與社群效益！</p><h1 id="九、照顧好產品核心的品質"><a href="#九、照顧好產品核心的品質" class="headerlink" title="九、照顧好產品核心的品質"></a>九、照顧好產品核心的品質</h1><h3 id="Pinterest"><a href="#Pinterest" class="headerlink" title="Pinterest"></a>Pinterest</h3><p>Pinterest 是超過一億位活躍用戶、85% 女性使用者的圖文分享網站。創辦人Ben 在產品早期，為了讓 Pinterest 的圖文保有一定的品質和風格，Ben 透過Email 邀請使用者們參加用戶大會，並給予與會者最多 5 名的邀請人數，希望他們能再邀請與自己有著相同品味、興趣的朋友加入，讓 Pinterest 有了如手工藝品、烹飪等不同類型的社交主題內容。</p><p>Ben 也與攝影師展開合作計畫，讓攝影師們將自己的攝影作品放上 pinterst ，營造網站上的圖片都是高品質的產品形象。</p><h3 id="Airbnb"><a href="#Airbnb" class="headerlink" title="Airbnb"></a>Airbnb</h3><p>在 AirBnb 的創業旅程中，一路走來也不是這麼順遂。是一直到他們從使用者的回饋中發現了關鍵因素：房間的照片不好看，沒人想住。於是他們找了專業攝影師挨家挨戶拍照，將每一個 Airbnb 上面的房間照片提升到專業攝影等級，在 2011 年底，AirBnb 聘請 20 位專業攝影師後，網站的成交率節節上升，僅花 1 年就提升了10 倍。</p><p>在產品通過市場的需求驗證後，接下來設計師最重要的工作，就是要照顧好產品核心的品質了，在這個階段，設計師會面臨到各式各樣的設計需求，例如：附加功能的開發、原有功能的優化、流程的改善，甚至是營運所需的活動視覺和行銷的廣告素材等等。但是相對來說，這些設計工作的重要度並沒有產品核心來得高，唯有先提升核心品質，讓使用者能獲得良好的使用經驗後，才能讓其他計畫達到事半功倍的效果。</p><h1 id="十、從-UX-到-CX"><a href="#十、從-UX-到-CX" class="headerlink" title="十、從 UX 到 CX"></a>十、從 UX 到 CX</h1><p>最後，讓自己的思考角度從 User Experience 提升到 Customer Experience 的層次吧！</p><p>從使用者體驗，到更全面的顧客體驗。</p><p>除了關注轉換率、活躍度、瀏覽量…等，這些使用者在 Web 或 APP 產品上的線上使用情況之外，也要盡可能地去思考使用者在接觸產品的所有環節中，是否都有良好的顧客體驗。</p><blockquote><p>Airbnb 的使用者在下訂房型後，與房東的溝通是否順暢？住宿的感受是否符合期待？</p><p>Uber 的使用者在乘車後，是否有對於司機的素質造成困擾？ 或是對車內整潔不滿意？</p><p>電商的消費者在下單完收到包裹後，是否有對包裝不滿意？物流的送貨時間是否符合預期的時段？</p></blockquote><p>這些線下體驗雖然已經脫離產品易用性的範圍，卻實實在在地是使用者在使用產品的感受之一。所以我們除了要顧及產品的線上體驗外，也得留意從使用者剛接觸產品開始，到完成這個產品所提供的服務，這一整串流程中的每個環節，是否都能讓使用者有良好的體驗和感受。</p><p>這不單只是設計師的工作，也是新創團隊中的每位成員需要留心的事情，畢竟對一個產品來說，使用者就是我們的衣食父母，團隊中怎麼能有人不顧慮衣食父母的感受呢！？</p><hr><p>這十點設計師的 Startup 心得，分享了我在過往經驗中累積的想法與看法，要成為新創產品的設計師，不見得要有十八般武藝或是高強技能，這些都能在過程中學習獲得，但有兩項，是我認為設計師從投身新創後就該持續保持的特質。</p><p>那就是要保持好奇心持續學習，</p><p>以及，</p><p>要熱血啊！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇跟大家分享了幾個思維，和設計師要具備的新創心態後，這一篇將延續上集的內容，繼續分享我的江湖走跳心得(!?)&lt;/p&gt;
    
    </summary>
    
      <category term="美學設計" scheme="http://blog.unisharp.com/categories/%E7%BE%8E%E5%AD%B8%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="UX" scheme="http://blog.unisharp.com/tags/UX/"/>
    
      <category term="設計" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>設計師的十點 Startup 心得（上）</title>
    <link href="http://blog.unisharp.com/2017/10/17/%E8%A8%AD%E8%A8%88%E5%B8%AB%E7%9A%84%E5%8D%81%E9%BB%9E%20Startup%C2%A0%E5%BF%83%E5%BE%97%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://blog.unisharp.com/2017/10/17/設計師的十點 Startup 心得（上）/</id>
    <published>2017-10-16T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:53.524Z</updated>
    
    <content type="html"><![CDATA[<p>在江湖走跳(?)也有一些年了，雖然還稱不上是老江湖～但這些年也陸續以設計師的身份待過遊戲公司、社群電商平台、接案公司。除了經歷 1 到 100 的產品營運外，也和團隊執行了兩次從 0 到 1 的新創產品專案。</p><a id="more"></a><p>彙整一下自己目前累積的心得與想法，除了希望能夠幫助到目前正在進行從 0 到 1 的熱血傢伙們外，也期許這些經驗能成為基石，讓我往後執行的專案有美好的前途～</p><h1 id="一、失敗的案例同樣寶貴"><a href="#一、失敗的案例同樣寶貴" class="headerlink" title="一、失敗的案例同樣寶貴"></a>一、失敗的案例同樣寶貴</h1><p>台大電機系的葉丙成教授，在 2016 年度的畢業致詞演講中，開頭有一段話提到：</p><blockquote><p>在台灣，長輩們常愛跟年輕人分享自己是如何成功的。但成功往往是需要許多主客觀因素的配合、甚至還有一些運氣的成分。光聽別人談如何才能成功，對年輕人的幫助是很有限的。因為要複製別人的成功是很難的。<br>複製成功經驗很難，但要避免跟別人有同樣的懊悔，卻是比較容易的。因此，我認為對學生有幫助的，不是去談「如何成功」，而是把自己三十年來的失敗、懊悔、不足的地方，跟同學們分享。</p></blockquote><p>在我還沒有待過新創以前，我對市場上產品的失敗故事是完全沒有興趣的，目光只停留在那些媒體寵兒上，哪個產品又募到了多少資金，哪間公司要 IPO 了，但在親身經歷了從 0 到 1 的過程後，我意識到這些失敗的案例與成功的故事同等重要。</p><p>複製別人的成功很難，但別人已經踩過的坑完全可以盡力去避免啊！</p><h1 id="二、Pivot-的真正用意"><a href="#二、Pivot-的真正用意" class="headerlink" title="二、Pivot 的真正用意"></a>二、Pivot 的真正用意</h1><p>早期 Startup 很流行一個名詞「Pivot」，又稱關鍵轉軸。</p><p>指的是將產品或公司的經營策略與方向進行調整，進而更貼近市場及使用者的需求。</p><h3 id="Flickr"><a href="#Flickr" class="headerlink" title="Flickr"></a>Flickr</h3><p>Flickr 的前身 Ludicorp 原本是一個網路連線遊戲平台，但這個平台上的遊戲不怎麼紅，反而是聊天室中的照片分享功能大受使用者的喜愛，於是他們做了一個 Pivot，把這個照片分享功能獨立成一個網站，才變成了 Flickr 這個全球性的照片分享平台。</p><h3 id="Twitter"><a href="#Twitter" class="headerlink" title="Twitter"></a>Twitter</h3><p>Twitter 的創辦人原本是想做一個個人隨選廣播平台，結果開發產品的同時，因為團隊間有互相大量傳簡訊的需求，於是也一起做了一個簡訊轉發的平台，不久後發現廣播平台沒有起色，反而是簡訊轉發的平台紅了，接著整間公司做了一次 Pivot，才成了今天的 Twitter。</p><p>從這兩個故事可以了解 Pivot 的真正用意，並不是公司或團隊內部自行決定，與目前產品完全無關聯的大轉彎，因為這麼做與重頭開始一個新專案無異，而是必須從產品與市場互動的結果，來發掘一個新的策略方向。</p><h1 id="三、先驗證需求再追求完美"><a href="#三、先驗證需求再追求完美" class="headerlink" title="三、先驗證需求再追求完美"></a>三、先驗證需求再追求完美</h1><p>對設計師來說，尤其是自我要求很高的那種，總是會想要把產品做到一個很完美、完整的時候再推到使用者的面前，讓使用者初次接觸時就能看到產品最好的一面。</p><p>這個立意是良善，但卻剛好不適合從 0 開始的新創產品。</p><p>新創產品需要盡快把核心功能丟到市場上，用市場的反應來測試產品的核心價值（或著說核心功能），是不是真的存在需求，使用者願不願意買單等等。這一切都是為了避免發生嘔心瀝血做了一個超完整的產品，結果推出後發現市場沒有這個需求的慘劇啊….</p><p>但這並不表示設計師要放棄追求完美，而是必須要區分不同階段的輕重緩急，在產品的初始階段，盡快推出測試是第一優先，先驗證市場需求和使用者意願，而通過這關確認有需求的產品，就是設計師開始發揮完美主義的時候了！</p><h1 id="四、聆聽真正的使用者聲音"><a href="#四、聆聽真正的使用者聲音" class="headerlink" title="四、聆聽真正的使用者聲音"></a>四、聆聽真正的使用者聲音</h1><p>在各種專案的運行中總是會有許多的會議和討論，尤其是在新產品開發的過程裡，因為包含了市場需求、商業模式、營運方法等不確定性因素，團隊花在討論的時間與頻率通常也較高。</p><p>而在討論和開發的過程中，時常會有把自己當作使用者來思考的情形，「我覺得應該推出這個功能…」，「我覺得這個使用者不會用….」，「我覺得使用者不會喜歡這個」。</p><p>But～鄉親啊～這些個人感覺並不能當作真正的使用者聲音，就算自己也是產品的愛用者之一，但個人感覺也只能代表與自己相同族群的使用者而已，是一項僅供參考的主觀依據。唯有真正的去接觸外部使用者，透過訪談或科學方法(數據分析、A/B Test)所累積得到的結果，才是真正的使用者聲音。</p><h1 id="五、培養產品的早期能見度"><a href="#五、培養產品的早期能見度" class="headerlink" title="五、培養產品的早期能見度"></a>五、培養產品的早期能見度</h1><p>產品開發完成後，光是上線或將 APP 上架，透過自然流量在初期能取得的能見度很有限，如何讓產品能夠溜到首批使用者的眼前，也是相當重要的一環。</p><h3 id="直接拜訪-Pinkoi、EZTABLE"><a href="#直接拜訪-Pinkoi、EZTABLE" class="headerlink" title="直接拜訪 - Pinkoi、EZTABLE"></a>直接拜訪 - Pinkoi、EZTABLE</h3><p>Pinkoi 早期，創辦人每週都親自去拜訪設計師，溝通設計平台的理念，寄卡片、打電話進行問候，贏得設計師的好感和信任，才在最早期累積了 100 位設計師。</p><p>在 EZTABLE 的創業初期，創辦人陳翰林騎著機車跑遍大街小巷，每天打 100 通電話向餐廳老闆推薦自己的訂餐業務。</p><h3 id="社群累積-iCook、ifit"><a href="#社群累積-iCook、ifit" class="headerlink" title="社群累積 - iCook、ifit"></a>社群累積 - iCook、ifit</h3><p>iCook的行銷方式打破先有產品、後成立粉絲團行銷的傳統做法。去年九月先成立臉書粉絲團，以部落客食譜、健康資訊等內容累積人氣。兩個月後網站才正式上線。在粉絲團破萬的人氣聚集下，網站上線的第一天就有使用者分享食譜內容，並湧入上萬名訪客。</p><p>直接拜訪目標使用者，透過社群內容累積人氣，甚至是舉辦說明會，下廣告等等，都是讓產品能接觸到第一波使用者的方法。</p><hr><p>至此，應該有發現身處 Startup 環境中的設計師，在思考的廣度上需要有很大的不同了吧！</p><p>在下篇，將會繼續分享更多新創設計師所該具備的觀念思維～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在江湖走跳(?)也有一些年了，雖然還稱不上是老江湖～但這些年也陸續以設計師的身份待過遊戲公司、社群電商平台、接案公司。除了經歷 1 到 100 的產品營運外，也和團隊執行了兩次從 0 到 1 的新創產品專案。&lt;/p&gt;
    
    </summary>
    
      <category term="美學設計" scheme="http://blog.unisharp.com/categories/%E7%BE%8E%E5%AD%B8%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="UX" scheme="http://blog.unisharp.com/tags/UX/"/>
    
      <category term="設計" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 學習筆記（二）FastCGI Proxying</title>
    <link href="http://blog.unisharp.com/2017/10/04/Nginx%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%88%E4%BA%8C%EF%BC%89FastCGI%20Proxying/"/>
    <id>http://blog.unisharp.com/2017/10/04/Nginx 學習筆記（二）FastCGI Proxying/</id>
    <published>2017-10-03T16:00:00.000Z</published>
    <updated>2017-12-28T09:19:26.268Z</updated>
    
    <content type="html"><![CDATA[<p>本文章將會介紹如何設定 Nginx 作為 FastCGI Proxying，而在此之前需要先了解什麼是 CGI、FastCGI，最後會以設定 Laravel 專案作為 Nginx Proxying 的範例<br><a id="more"></a></p><ul><li>什麼是 CGI、FastCGI、PHP-FPM</li><li>如何在 Mac 上安裝 PHP</li><li>如何在 Nginx 上設定 FastCGI Proxying</li><li>如何在 Nginx 上設定 Laravel</li></ul><p>本文章主要是由參考資料翻譯及整理而來，如果是喜歡閱讀英文或是更完整資訊的朋友，可以依照參考資料的順序閱讀</p><h2 id="什麼是-CGI、FastCGI、PHP-FPM"><a href="#什麼是-CGI、FastCGI、PHP-FPM" class="headerlink" title="什麼是 CGI、FastCGI、PHP-FPM"></a>什麼是 CGI、FastCGI、PHP-FPM</h2><h3 id="Comman-Gateway-Interface-CGI"><a href="#Comman-Gateway-Interface-CGI" class="headerlink" title="Comman Gateway Interface (CGI)"></a>Comman Gateway Interface (CGI)</h3><p>在計算機中，CGI 提供了標準通訊協定讓網路伺服器執行程式腳本 (scripts)，藉此產生動態的網頁，此程式稱為 CGI Script (CGIs)，而程式如何被伺服器執行的細節由伺服器決定，通常一個請求會執行一次 CGI Script，藉此產生 HTML 回傳至 Client 端 </p><p>也就是說當伺服器 (Nginx, Apache) 要執行程式腳本 (PHP, Java…) 產生網頁 (HTML) 時，就要依照 CGI 規定的通訊協定傳輸資料給程式腳本，傳遞的資訊包含 POST 資料、HTML Header、URL 等等</p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>FastCGI 是二位元的通訊協定，處理網路伺服器與程式的介面，FastCGI 是早期 CGI 的變形，其主要目的是為了減少伺服器執行 CGIs 產生過多的負載，允許伺服器同時處理多個網頁請求</p><p>CGI 應用程式在每一次的請求時產生新的程序 (process)，且在請求完成後結束此程序，此方式讓 CGI 程式容易實作，卻也在大量的請求時，持續產生及結束程序的方式會導致過度負載，此外各個程序間也無法共享資源 (資料庫連線、快取等等)</p><p>FastCGI 則是保有一個持續存在的程序，藉由此程序處理一系列的請求，而程序與伺服器間的連線會一直保持，並不會隨請求完成後而關閉。每一次請求來時，持續存在的程序產生一個進程，由此進程處理請求，因為所有的進程都是由同一個程序產生的，所以彼此間可以享有共同資源，另外伺服器也可以藉由一次傳送多個請求，或是保有多個連線的方式達到節省傳遞的成本</p><h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h3><p>PHP-FPM (PHP FastCGI Process Manager) 其實就是實踐 FastCGI 的程序，原先是第三方的外掛套件，最後被官方合併為 PHP 核心的一部分</p><h2 id="如何在-Mac-上安裝-PHP"><a href="#如何在-Mac-上安裝-PHP" class="headerlink" title="如何在 Mac 上安裝 PHP"></a>如何在 Mac 上安裝 PHP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> brew tap homebrew/dupes</div><div class="line"><span class="meta">$</span> brew tap homebrew/versions</div><div class="line"><span class="meta">$</span> brew tap homebrew/homebrew-php</div><div class="line"></div><div class="line">// 安裝</div><div class="line"><span class="meta">$</span> brew install php72</div><div class="line"></div><div class="line">// 如果同時有多個 php 版本，可以藉由 phpswitch 切換</div><div class="line"><span class="meta">$</span> brew install brew-php-switcher</div><div class="line"></div><div class="line">// 切換為 php 5.6</div><div class="line"><span class="meta">$</span> phpswitch.sh 56</div></pre></td></tr></table></figure><h2 id="如何在-Nginx-上設定-FastCGI-Proxying"><a href="#如何在-Nginx-上設定-FastCGI-Proxying" class="headerlink" title="如何在 Nginx 上設定 FastCGI Proxying"></a>如何在 Nginx 上設定 FastCGI Proxying</h2><p>Nginx 本身無法處理程式腳本 (ex: PHP, Java)，所以當客戶端有這方面的請求時，Nginx 會作為代理伺服器將請求傳送給後端的伺服器，本文章將會以 php-fpm 做為後端伺服器，說明 Nginx 如何以 FastCGI 的方式與後端伺服器溝通</p><h3 id="基本設定"><a href="#基本設定" class="headerlink" title="基本設定"></a>基本設定</h3><p>以下的設定會將<code>http://localhost/info.php</code>請求傳送給後端的 php-fpm，php-fpm 會執行<code>/your/project/info.php</code>，並將結果回傳給客戶端<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location ~ \.php$ &#123;</div><div class="line">    root /your/project;</div><div class="line">    fastcgi_param REQUEST_METHOD $request_method;</div><div class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">    fastcgi_pass 127.0.0.1:9000;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><code>location</code>會比對符合 php 結尾的請求，並執行區塊內的設定</li><li><code>root</code>執行腳本的根目錄</li><li><code>fastcgi_param</code>設定要傳送的 fastcgi 參數，此 directive 會是是一個矩陣，使用者可以依序設定多個 fastcgi 參數，第一個值是參數名稱，第二個值是參數內容，通常會是 <code>$</code> 開頭的 nginx 變數 <ul><li><code>REQUEST_METHOD</code>: 客戶端以何種方式請求<ul><li><code>$request_methog</code>: Nginx 變數，紀錄客戶端請求的方式</li></ul></li><li><code>SCRIPT_FILE</code>: 要執行的 script file 位置，範例中由 <code>$document_rool</code>, <code>$fastcgi_script_name</code> 兩個變數組成檔案位置<ul><li><code>$document_rool</code>: Nginx 變數，對應到 root 或 alias</li><li><code>$fastcgi_script_name</code>: Nginx 變數，比對 URL 得到的 script file name</li></ul></li></ul></li><li><code>fastcgi_pass</code>將請求導向後端伺服器的位置，php-fpm 預設會監聽 9000 port，所以當 nginx 與 php-fpm 在同一台主機時，會將後端伺服器的位置設定為 127.0.0.1:9000</li></ul><p>以下的設定會將<code>http://localhost/scripts/</code>請求傳送給後端的 php-fpm，php-fpm 會執行<code>/your/project/scripts/index.php</code>，並將結果回傳給客戶端<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">location /scripts $ &#123;</div><div class="line">    root /your/project;</div><div class="line">    fastcgi_param REQUEST_METHOD $request_method;</div><div class="line">    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">    fastcgi_index index.php;</div><div class="line">    fastcgi_pass unix:/usr/local/var/run/php71-fpm.sock;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>fastcgi_index: 若 <code>SCRIPT_FILENAME</code>組成的檔案結尾是 <code>/</code> 時，會在尾端自動加上 <code>fastcgi_index</code> 形成一個完整的檔案位子</li><li>fastcgi_pass: <code>php-fpm</code>除了可以透過 network socket 溝通外，也可以透過 unix socket，基於安全性考量，建議是使用 unix socket</li></ul><p>在 mac 上要修改<code>php-fpm</code>的監聽方式時，要修改<code>/usr/local/etc/php/7.1/php-fpm.d/www.conf</code>的內容<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 設定監聽方式</div><div class="line">listen = /usr/local/var/run/php71-fpm.sock</div><div class="line"></div><div class="line"><span class="meta">#</span> 將檔案權限改為任何人都可讀寫，此設定警示為了在測試機方便行事，在正式環境時，請設定正確的 user, group，並把權限改為 0660</div><div class="line">listen.mode = 0666</div></pre></td></tr></table></figure></p><h3 id="引入外部設定檔"><a href="#引入外部設定檔" class="headerlink" title="引入外部設定檔"></a>引入外部設定檔</h3><p>我們可以將通用的設定寫入一個檔案，然後透過 <code>indlude</code> 引入這些設定，達到設定共用的效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /your/nginx/fastcgi_common</div><div class="line">fastcgi_param REQUEST_METHOD $request_method;</div><div class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">root /your/project;</div><div class="line"></div><div class="line">location ~ \.php$ &#123;</div><div class="line">    include fastcgi_common;</div><div class="line">    fastcgi_param CONTENT_TYPE $content_type;</div><div class="line">    fastcgi_param CONTENT_LENGTH $content_length;</div><div class="line">    fastcgi_pass 127.0.0.1:9000;</div><div class="line">&#125;</div><div class="line"></div><div class="line">location /scripts $ &#123;</div><div class="line">    include fastcgi_common;</div><div class="line">    fastcgi_index index.php;</div><div class="line">    fastcgi_pass unix:/usr/local/var/run/php71-fpm.sock;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="fastcgi-param-與-fastcgi-conf-檔案"><a href="#fastcgi-param-與-fastcgi-conf-檔案" class="headerlink" title="fastcgi_param 與 fastcgi.conf 檔案"></a>fastcgi_param 與 fastcgi.conf 檔案</h4><p><code>fastcgi_parm</code> 與 <code>fastcgi.conf</code> 是由 nginx 開發者們維護出的常見設定，大部分情況下只要引入這兩個設定檔的其中一個，再加入一些設定即可，<code>fastcgi_parm</code> 與 <code>fastcgi.conf</code> 最大的差異在於 <code>SCRIPT_FILENAME</code>，<code>fastcgi_parma</code> 中有設定 <code>SCRIPT_FILENAME</code>，而 <code>fastcgi.conf</code> 則沒有，此兩個設定檔位於 <code>Nginx</code> 根目錄設定檔 (<code>/usr/local/etc/nginx</code>)</p><h3 id="如何在-Nginx-上設定-Laravel"><a href="#如何在-Nginx-上設定-Laravel" class="headerlink" title="如何在 Nginx 上設定 Laravel"></a>如何在 Nginx 上設定 Laravel</h3><p><code>Nginx</code> 主要目的就是將請求傳送給 <code>php-fpm</code>，且 <code>php-fpm</code> 可以正確將請求對應到正確的 scrip 檔案，在 Laravel 中，統一的執行點會是 <code>laravel_project/public/index</code>，而以下的範例 <code>Nginx</code> 會將 <code>http://server_domain_or_ip</code> 導向 <code>/your/laravel_project/public/index</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    # 監聽 80 port</div><div class="line">    listen 80;</div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    # script 檔案的根目錄</div><div class="line">    root /your/laravel_project/public;</div><div class="line">    </div><div class="line">    # 對應到的 domain 或 IP 才會進入此 server block</div><div class="line">    server_name server_domain_or_ip;</div><div class="line"></div><div class="line">    # 此 location directive 會將 url 轉換，目的是將 url 包含 index.php</div><div class="line">    # ex:</div><div class="line">    # http://server_domain/user ---&gt;</div><div class="line">    # http://server_domain/index.php/user</div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ /index.php?$query_string;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # 上一個 location directive 轉換完後包含 index.php，因此會符合此 location directive</div><div class="line">    # 接續上一個轉換完的 url，將請求傳遞給 php-fpm</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        try_files $uri =404;</div><div class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">        fastcgi_pass unix:/usr/local/var/run/php71-fpm.sock;</div><div class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">        include fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="https://segmentfault.com/q/1010000000256516" target="_blank" rel="external">搞不清FastCgi与PHP-fpm之间是个什么样的关系</a></li><li><a href="https://gist.github.com/dtomasi/ab76d14338db82ec24a1fc137caff75b" target="_blank" rel="external">Install NGINX with PHP7-FPM on Mac OS X with Homebrew</a></li><li><a href="https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx" target="_blank" rel="external">Understanding and Implementing FastCGI Proxying in Nginx</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-laravel-with-an-nginx-web-server-on-ubuntu-14-04" target="_blank" rel="external">How to Install Laravel with an Nginx Web Server on Ubuntu 14.04</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration" target="_blank" rel="external">How To Optimize Nginx Configuration</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="external">Inside NGINX: How We Designed for Performance &amp; Scale</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章將會介紹如何設定 Nginx 作為 FastCGI Proxying，而在此之前需要先了解什麼是 CGI、FastCGI，最後會以設定 Laravel 專案作為 Nginx Proxying 的範例&lt;br&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="server" scheme="http://blog.unisharp.com/tags/server/"/>
    
      <category term="nginx" scheme="http://blog.unisharp.com/tags/nginx/"/>
    
      <category term="筆記隨筆" scheme="http://blog.unisharp.com/tags/%E7%AD%86%E8%A8%98%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>簡報排版=攝影構圖</title>
    <link href="http://blog.unisharp.com/2017/09/21/%E7%B0%A1%E5%A0%B1%E6%8E%92%E7%89%88=%E6%94%9D%E5%BD%B1%E6%A7%8B%E5%9C%96/"/>
    <id>http://blog.unisharp.com/2017/09/21/簡報排版=攝影構圖/</id>
    <published>2017-09-20T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:54.182Z</updated>
    
    <content type="html"><![CDATA[<p>你一定有幫人拍照的經驗吧，不管是身邊的路人、家人、情人，他們偶爾會抱怨拍起來不好看，沒拍到重點等</p><p>你是否也有這種困擾？<br><a id="more"></a></p><p>拍照，看似簡單，但是要拍得好，細節中藏有一定的技巧<br>剛入門學習攝影，都會先從格線開始，不管是三分割法( Rule of Thirds )，還是對稱法（ Centered Composition and Symmetry）</p><p>三分割法( Rule of Thirds )，也就是九宮格構圖法</p><p><img src="https://i.imgur.com/V2adrzl.jpg" alt="九宮格構圖法"></p><p>對稱法（ Centered Composition and Symmetry）<br><img src="https://i.imgur.com/W8A3KbY.png" alt="對稱法"></p><p>構圖技巧就是要將主角放置在背景對的位置上，呈現一致且和諧的畫面。</p><p>簡報當中，圖片之於文字，就像背景之於主角一般。我們如何透過簡單的格線技巧，快速排列出專業的簡報</p><p>接下來就把攝影的九宮格應用在簡報排版上吧！</p><p>首先，主流簡報工具有兩種，一是 Microsoft PowerPoint，另一則是 Keynote</p><p><img src="https://i.imgur.com/iylr5bj.png" alt="Microsoft PowerPoint"></p><h2 id="開啟-Microsoft-Power-Point-格線"><a href="#開啟-Microsoft-Power-Point-格線" class="headerlink" title="開啟 Microsoft Power Point 格線"></a>開啟 Microsoft Power Point 格線</h2><p><img src="https://i.imgur.com/ToXu7PR.png" alt="Microsoft PowerPoint"></p><p>點選 「檢視」 勾選 「格線」，間距輸入 0.8cm</p><p><img src="https://i.imgur.com/GfKTzh8.png" alt="Microsoft PowerPoint"></p><p>就會在簡報上顯示 14 x 8 的正方形</p><p><img src="https://i.imgur.com/J5ECTML.png" alt="Microsoft PowerPoint"></p><h2 id="不能開啟-Keynote-格線？"><a href="#不能開啟-Keynote-格線？" class="headerlink" title="不能開啟 Keynote 格線？"></a>不能開啟 Keynote 格線？</h2><p>很遺憾地是，Keynote 只有參考線沒有格線，所以只能在母片中插入表格代替</p><p><img src="https://i.imgur.com/ejBvxUh.png" alt="Keynote"></p><h2 id="Sketch-也可以？"><a href="#Sketch-也可以？" class="headerlink" title="Sketch 也可以？"></a>Sketch 也可以？</h2><p>通常設計師會有這套軟體，神之好物 Sketch 啊！<br>透過 Layout Settings 就可以變化出類似格線的效果喔</p><p><img src="https://i.imgur.com/X8LHfAx.jpg" alt="Sketch"></p><p><img src="https://i.imgur.com/SiK2sGC.png" alt="Sketch"></p><p>接下來要切入正題，到底要如何透過格線呈現完美排版？ 我們以 PowerPoint 為例</p><p><img src="https://i.imgur.com/jLOdtQp.png" alt="Microsoft PowerPoint"></p><p>灰色方塊為圖片放置處，佔據了 5 x 6 的面積、標題文字一 &amp; 二依序貼齊在格線上、預設文字放置在右下隔一格位置處、再插入圖片文字，你猜怎麼著？</p><p><img src="https://i.imgur.com/UgWZaeB.png" alt="Microsoft PowerPoint"></p><p>這樣是不是很整齊又完美地呈現一張簡報呢？<br>以後看到類似的排版不要以為是設計師的直覺排版，只要有格線，你也可以做到！</p><p>當你覺得格子太大，虛線不好排版，你也可以選擇使用輔助線，多圖排版時，你也可以這樣做</p><p><img src="https://i.imgur.com/o1vFKCX.png" alt="Microsoft PowerPoint"></p><p><img src="https://i.imgur.com/LBFR3se.png" alt="Microsoft PowerPoint"></p><p>當然這有很多種變化方式，可以不要上下對齊這麼拘束，還可以上下移動、左右傾斜都可以達到不同的風格</p><p>多圖上下移動<br><img src="https://i.imgur.com/GQQnUbv.png" alt="Microsoft PowerPoint"></p><p>比較複雜的多圖傾斜</p><p><img src="https://i.imgur.com/oOL1AI0.png" alt="Microsoft PowerPoint"></p><p>它的雛型是長這樣子的，只要多利用輔助線，格線，複雜排版對你來說一點都不是問題喔！</p><p><img src="https://i.imgur.com/LBxMaHt.png" alt="Microsoft PowerPoint"></p><p>總結：也許有些人會反應， Sketch 切出來的格線是長方形的怎麼辦？不管是正方形，長方形都沒關係，重點是善用隔線與輔助線，切出讓你好規劃、好使用的板塊，去做重新排列與組合，希望這個排版 tips 有幫助到你喔！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你一定有幫人拍照的經驗吧，不管是身邊的路人、家人、情人，他們偶爾會抱怨拍起來不好看，沒拍到重點等&lt;/p&gt;
&lt;p&gt;你是否也有這種困擾？&lt;br&gt;
    
    </summary>
    
      <category term="美學設計" scheme="http://blog.unisharp.com/categories/%E7%BE%8E%E5%AD%B8%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="設計專欄" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88%E5%B0%88%E6%AC%84/"/>
    
  </entry>
  
  <entry>
    <title>FB產品總監、花博設計總監告訴你，什麼是心創好設計</title>
    <link href="http://blog.unisharp.com/2017/09/04/FB%E7%94%A2%E5%93%81%E7%B8%BD%E7%9B%A3%E3%80%81%E8%8A%B1%E5%8D%9A%E8%A8%AD%E8%A8%88%E7%B8%BD%E7%9B%A3%E5%91%8A%E8%A8%B4%E4%BD%A0%EF%BC%8C%E4%BB%80%E9%BA%BC%E6%98%AF%E5%BF%83%E5%89%B5%E5%A5%BD%E8%A8%AD%E8%A8%88/"/>
    <id>http://blog.unisharp.com/2017/09/04/FB產品總監、花博設計總監告訴你，什麼是心創好設計/</id>
    <published>2017-09-03T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:51.879Z</updated>
    
    <content type="html"><![CDATA[<p>筆者參與此次心創好設計論壇，邀請三位重量級人物，分別是台中世界花博設計總監吳漢中、Facebook 產品設計總監 Ana、伊利諾大學工業設計系教授 Deana，一同針對該主題，提出什麼才是最符合人性的好設計。</p><a id="more"></a><h1 id="吳漢中"><a href="#吳漢中" class="headerlink" title="吳漢中"></a>吳漢中</h1><blockquote><p>設計不只是賺錢，而是如何造成社會影響力。</p></blockquote><p>舉凡世大運、台北設計之都，展現了台灣年輕設計師足以能夠支撐國際慶典的設計能力，除台北之外，基隆、新竹、台東也逐漸跟上改變市容的腳步。</p><p>世界設計之都第一屆代表城市，南韓首爾，對於城市中的廣告刊登內容，都必須要經過政府核准，符合一定的設計規範才有辦法刊登在路上，反觀台灣的廣告， 99.9% 只要付得出錢，怎樣的內容設計都沒關係。</p><p><img src="https://i.imgur.com/tVKhSq4.png" alt=""> 圖片源自 21furu.blogspot.com</p><h3 id="公車亭"><a href="#公車亭" class="headerlink" title="公車亭"></a>公車亭</h3><p>斥資 200 多萬的候車亭廣受大眾爭議，有些人問：「把座位背對道路，這樣怎麼看來車？背後又沒有長眼睛？」</p><p>當時設計師的理念是要將路權還給行人，如果是以往將座位面向馬路，候車亭背板切割了人行道一塊空間，形同壓縮到了行人的行走空間，於是仿效國外的候車亭的建造方式</p><p><img src="https://i.imgur.com/UH22Z9x.png" alt=""> 圖片源自 <a href="http://news.ltn.com.tw/" target="_blank" rel="external">http://news.ltn.com.tw/</a> 台北候車亭</p><p><img src="https://i.imgur.com/fIO7iPE.png" alt=""> 圖片源自 <a href="commons.wikimedia.org">wikimedia commons</a> 倫敦候車亭</p><p>而筆者對於爭議點的觀點是，等候者無論面朝外或內，都需側視，讓視線與來車相對，如此一來應不影響候車方式，而且，候車亭背板向道路一側，更能增加人行道空間，所以認同設計師的理念。</p><h3 id="變電箱"><a href="#變電箱" class="headerlink" title="變電箱"></a>變電箱</h3><p>變電箱大改造，舊式變電箱被畫上五顏六色的山水畫，但是，台灣交通繁忙、街景複雜，變電箱應該走向簡單、平樸，採用灰、黑色來減少用路人視覺上的負擔</p><p><img src="https://i.imgur.com/ryaeI7E.png" alt=""> 圖片源自 <a href="http://wdc2016.taipei/%E8%A8%AD%E8%A8%88%E4%B9%8B%E9%83%BD%E7%82%BA%E8%87%BA%E5%8C%97%E8%AA%BF%E8%89%B2%E3%80%80%E8%AE%8A%E9%9B%BB%E7%AE%B1%E6%8F%9B%E6%96%B0%E8%A3%9D%E4%BA%AE%E7%9B%B8/" target="_blank" rel="external">台北設計之都</a></p><h3 id="捷運"><a href="#捷運" class="headerlink" title="捷運"></a>捷運</h3><p>捷運，也是一項成功的設計改造，制作成宣導動畫，向乘客推廣捷運守則，幽默流暢的表達，深達人心。</p><p>而且，你有發現嗎？人物的手指頭只有 4 指，吳先生說多數國外的作品也都是呈現 4 指，呈現 5 指反而很擠，在 40000 多張的構圖中也能夠減少一些時間</p><p><a href="https://vimeo.com/174320235" title="台北設計之都" target="_blank" rel="external"><img src="https://i.imgur.com/tkICbII.png" alt="台北設計之都"></a></p><p><a href="http://whitelightmotion.tv/wdc-2016-design-station" target="_blank" rel="external">看更多捷運動畫細節</a></p><h3 id="菜市場"><a href="#菜市場" class="headerlink" title="菜市場"></a>菜市場</h3><p>你有多久沒有逛過菜市場了呢？ ⌈那都是我阿嬤、阿母去的啊！⌋</p><p>你是否也有這種想法？在這次計畫中，為了將傳統與設計做結合，把美感導入民間，找了幾間攤販並改造他們的招牌，目的是希望透過設計與改造，讓年輕人回流到傳統市場消費</p><p><img src="https://i.imgur.com/UmpFcCC.jpg" alt=""> 圖片源自 <a href="http://wdc2016.taipei/%E8%A8%AD%E8%A8%88%E4%B9%8B%E9%83%BD%E8%A8%AD%E8%A8%88%E5%82%B3%E7%B5%B1%E5%B8%82%E5%A0%B4-%E6%96%B0%E6%8B%9B%E7%89%8C%E5%B1%95%E6%B4%BB%E5%8A%9B%EF%BC%81/" target="_blank" rel="external">台北設計之都</a></p><p>關掉手機，在台灣路上走一遭，仔細觀察路上的一景一物，都是台灣設計師們可以共同打造與改變的，在未來，吳先生透露，打開錢包裡的身分證、鈔票…等，都有機會重新設計與改版，而這些設計，都需要靠政府的支持，也希望未來政府有這樣一個設計幕僚團隊，去除繁文縟節，讓設計直達市長、甚至總統眼裡，積極地落實，打造一個充滿美學設計的城市</p><h1 id="Deana"><a href="#Deana" class="headerlink" title="Deana"></a>Deana</h1><p>身為工業設計的教授，不免俗地帶入一些實際的案例</p><p>你想像一下，在桌子上有著一樣擺飾，外觀上是個幾何切面形成的球體，隨著光源角度，呈現明與暗的金屬光澤，你知道它其實是 wifi 分享器嗎？</p><p><img src="https://i.imgur.com/V9zRv6O.png" alt=""> 圖片源自 <a href="http://www.herbstprodukt.com/core" target="_blank" rel="external">herbst produkt</a></p><p>再想像一下，碗盤架竟然可以很簡便地、很有彈性地折出想要的間隔</p><p><img src="https://i.imgur.com/rDLSp6G.png" alt=""> 圖片源自 <a href="http://www.herbstprodukt.com/wave_fusion-brands-new" target="_blank" rel="external">herbst produkt</a></p><h1 id="Ana"><a href="#Ana" class="headerlink" title="Ana"></a>Ana</h1><p>主張多去觀察週遭的人，特別是親人，多去旅遊，跳出舒適圈，設計師的眼界是必須從生活中微小的細節堆疊而成，藉此培養敏銳的觀察力</p><p>身為產品設計師，當產品有個雛形，就主動去找陌生人做產品測試，觀察其一舉一動，表情、肢體等，迅速得到回饋，即使該產品失敗也必須不斷向前，再次前進</p><p>身為 3 個孩子的媽，她對於 nomiku 的產品相當讚賞，產品特色是以真空低溫烹飪，能保持食材的水分跟油脂，還附有 APP 設定時間與溫度的功能。烹煮的同時，能在客廳跟朋友盡情地社交，真的是省時省力又兼顧便利的產品</p><p><a href="https://www.youtube.com/watch?v=Q9K05z3RG44" title="Nomiku" target="_blank" rel="external"><img src="https://i.imgur.com/0rheLmG.png" alt="Nomiku"></a></p><p>以上是本次論壇的整理重點，有任何想法都可以下方留言討論喔</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;筆者參與此次心創好設計論壇，邀請三位重量級人物，分別是台中世界花博設計總監吳漢中、Facebook 產品設計總監 Ana、伊利諾大學工業設計系教授 Deana，一同針對該主題，提出什麼才是最符合人性的好設計。&lt;/p&gt;
    
    </summary>
    
      <category term="美學設計" scheme="http://blog.unisharp.com/categories/%E7%BE%8E%E5%AD%B8%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="UX" scheme="http://blog.unisharp.com/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>Nginx學習筆記（一）</title>
    <link href="http://blog.unisharp.com/2017/07/31/Nginx%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.unisharp.com/2017/07/31/Nginx學習筆記（一）/</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:53.837Z</updated>
    
    <content type="html"><![CDATA[<p>本文章會介紹 Nginx 的基本概念以及如何在 Mac 上安裝 Nginx，適合第一次接觸 Nginx 的讀者閱讀，將會了解到<br><a id="more"></a></p><ul><li>如何在 Mac 安裝 Nginx</li><li>Nginx 的基本概念</li><li>如何設定 virtual host (多個 domain name 對到同一個 IP)</li></ul><p>本文章主要是參考資料翻譯及整理而來，如果是喜歡閱讀英文或是更完整資訊的朋友，可以依照參考資料的順序閱讀</p><h2 id="Nginx-安裝"><a href="#Nginx-安裝" class="headerlink" title="Nginx 安裝"></a>Nginx 安裝</h2><h3 id="安裝-Homebrew"><a href="#安裝-Homebrew" class="headerlink" title="安裝 Homebrew"></a>安裝 Homebrew</h3><p>Homebrew 是 Mac 上的套件管理工具，以下的軟體都會透過 Homebrew 來安裝<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div><div class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</div></pre></td></tr></table></figure></p><p>將 Homebrew 安裝 tool 的路徑加入環境變數<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>#</div><div class="line"><span class="meta">#</span> ~/.bash_profile</div><div class="line"><span class="meta">#</span>#</div><div class="line">export PATH="/usr/local/bin:$PATH"</div><div class="line">export PATH="/usr/local/sbin:$PATH"</div><div class="line"></div><div class="line"><span class="meta">#</span>#</div><div class="line"><span class="meta">#</span> ~/.zshrc</div><div class="line"><span class="meta">#</span>#</div><div class="line">export PATH="/usr/local/bin:$PATH"</div><div class="line">export PATH="/usr/local/sbin:$PATH"</div></pre></td></tr></table></figure></p><h3 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h3><p>透過 Homebrew 安裝 Nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx</div></pre></td></tr></table></figure></p><p>預設開機啟動 Nginx，將 plist 檔複製至 Launch Daemon/Agent<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 開機後，以一般使用者身份啟動 Nginx</div><div class="line">cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/</div><div class="line"></div><div class="line"><span class="meta">#</span> 開機後，要以 root 身份啟動 Nginx</div><div class="line">sudo cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist /Library/LaunchDaemons/</div></pre></td></tr></table></figure></p><p>啟動 Nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 啟動 Nginx</div><div class="line">nginx </div><div class="line"></div><div class="line"><span class="meta">#</span> 如果設定檔牽涉 root 權限，就要以 root 啟動 nginx</div><div class="line">sudo nginx</div></pre></td></tr></table></figure></p><p>一旦 Nginx 啟動後，可以透過 <code>-s</code> 參數對 nginx 下指令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s signal</div></pre></td></tr></table></figure></p><p>signal 必須是以下幾種</p><table><thead><tr><th>訊號</th><th>意義</th></tr></thead><tbody><tr><td>stop</td><td>直接停止 Nginx</td></tr><tr><td>quit</td><td>等目前正在服務的 worker process 結束後，停止 Nginx</td></tr><tr><td>reload</td><td>重新載入設定檔，Nginx 依照新的設定產生新的 worker process，既有的 woker process 會在服務完既有的連線後停止，在重啟前可以用 <code>nginx -t</code> 檢驗語法是否正確</td></tr><tr><td>reopen</td><td>重新開啟 log 檔案</td></tr></tbody></table><h2 id="Nginx-基本概念"><a href="#Nginx-基本概念" class="headerlink" title="Nginx 基本概念"></a>Nginx 基本概念</h2><p>Nginx 是由一個主線程 (main process) 及多個工作線程 (worker processes)，主線成主要的功能是讀取及執行設定檔、維護工作線程，工作線程則是處理請求 (request)，Nginx 是事件驅動 (event-based) 和 OS-dependent，藉此達到有效的處理請求</p><h3 id="設定檔結構"><a href="#設定檔結構" class="headerlink" title="設定檔結構"></a>設定檔結構</h3><p>Nginx 組成的模組是由設定檔內的 directives 所控制，directives 可以分成 simple directives、block directives</p><ul><li>simple directives : 由名稱及參數組合而成，中間由空白鍵分割，分號結尾</li><li>block directives  : 由大括號<code>{}</code>表示起始跟結尾，中間可以包含其他 directives，被包含的 directives 被稱為內容 (context)</li></ul><p>設定檔中不屬於任何 block directives 的 directives 稱為 main context，<code>event</code> 和 <code>http</code> 是 main context，<code>server</code> 包含在 <code>http</code>，<code>location</code> 包含在 <code>server</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">worker_processes  1;  # main context, simple directive</div><div class="line"></div><div class="line">http &#123;                # block context</div><div class="line">    access_log /var/logs/access.log;    # context, simple directive</div><div class="line">    server &#123;</div><div class="line">        location &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="靜態檔案"><a href="#靜態檔案" class="headerlink" title="靜態檔案"></a>靜態檔案</h3><p>Nginx 可以根據 <code>location block</code> 將請求分別導向不同資料夾下的檔案，範例中的 <code>location / { ... }</code> 的 <code>/</code> 會去比對請求的 <code>URI</code>，若比對符合就會將 <code>URI</code> 加在 <code>root</code> 所定義的路徑後，回傳請求的檔案，而 <code>location /images/ {...}</code> 則會去比對 <code>/images/</code> 開頭的 <code>URI</code>，比對符合後，一樣會將 <code>URI</code> 加在 <code>root</code> 所定義的路徑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /usr/local/etc/nginx.conf</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    keepalive_timeout  65;</div><div class="line">    </div><div class="line">    access_log  /usr/local/etc/nginx/logs/access.log;</div><div class="line">    error_log   /usr/local/etc/nginx/logs/error.log;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   /data/www;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /images/ &#123;</div><div class="line">            root   /data;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述設定黨範例: </p><ul><li><a href="http://localhost/test.html" target="_blank" rel="external">http://localhost/test.html</a> 對應 /data/www/test.html</li><li><a href="http://localhost/images/sample.jpg" target="_blank" rel="external">http://localhost/images/sample.jpg</a> 對應 /data/images/sample.jpg</li></ul><p>設定檔更新後，要重新載入設定檔<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx -s reload</div></pre></td></tr></table></figure></p><p>範例中的 <code>http://localhost/images/sample.jpg</code> 同時符合 <code>location / {...}</code>、<code>location /images/ {...}</code>，當請求的 <code>URI</code> 符合兩個以上的 <code>location directive</code> 時，會優先選取比對條件較長的 (<code>/images/</code> 比 <code>/</code> 長)，所以一般會將越長的比對條件寫在下面，以方便閱讀，如果都找不到符合的檔案時，Nginx 會回傳 404</p><p>:::info<br>當 Nginx 的行為不符合預期時，可以多檢視<code>access_log</code>、<code>error_log</code>定義的 log 檔案<br>:::</p><h2 id="如何設定-virtual-host"><a href="#如何設定-virtual-host" class="headerlink" title="如何設定 virtual host"></a>如何設定 virtual host</h2><p>virtual host 是將多個 domain name 指向同一個 IP (即同一台伺服器)，Nginx 會依據<code>server block</code>的<code>port</code>、<code>server_name</code>決定該<code>server block</code>處理那個種類 (domain name) 的請求</p><h3 id="建立各專案的根目錄"><a href="#建立各專案的根目錄" class="headerlink" title="建立各專案的根目錄"></a>建立各專案的根目錄</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /your/project/name1/html</div><div class="line">mkdir -p /your/project/name2/html</div></pre></td></tr></table></figure><p>:::info<br>如果是在 Linux 系統下，可能會要使用<code>chown</code>,<code>chmod</code>對檔案做權限設定，允許<code>www-data</code>使用者具有<code>rwx</code>的權限<br>:::</p><h3 id="建立範例檔案"><a href="#建立範例檔案" class="headerlink" title="建立範例檔案"></a>建立範例檔案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># /your/project/name1/html/index.html</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Welcome name1 !&lt;/h1&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># /your/project/name2/html/index.html</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Welcome name2 !&lt;/h1&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><h3 id="對每個-domain-建立-server-block"><a href="#對每個-domain-建立-server-block" class="headerlink" title="對每個 domain 建立 server block"></a>對每個 domain 建立 <code>server block</code></h3><p>將每個 <code>server block</code> 設定檔儲存在 <code>/usr/local/etc/nginx/servers</code>，<code>nginx.conf</code> 預設會將 <code>servers</code> 資料夾下的檔案載入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /usr/local/etc/nginx/servers/project_name1</div><div class="line">server &#123;</div><div class="line">    # 監聽的 port</div><div class="line">    listen 80;        </div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    # 起始資料夾位置</div><div class="line">    root /your/project/name1/html;    </div><div class="line"></div><div class="line">    # 當找不到符合的檔案後，會加入 index.html，再比對一次</div><div class="line">    index index.html;                 </div><div class="line"></div><div class="line">    # client 端輸入的 domain name</div><div class="line">    server_name project_name1.com;    </div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        # 驗證檔案 $uri、資料夾 $uri/ 是否存在，都不存在則回傳 404</div><div class="line">        try_files $uri $uri/ =404;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /usr/local/etc/nginx/servers/project_name2</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    root /your/project/name2/html;</div><div class="line"></div><div class="line">    index index.html;</div><div class="line"></div><div class="line">    server_name project_name2.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ =404;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>:::info<br>Mac 的 *.conf 設定檔慣例上是放在 servers 資料夾下，如果是 Ubuntu 會建立 sites-available 及 sites-enable 兩個資料夾，將設定檔放在 sites-available 資料夾下，然後將要載入的設定檔以連結 (<code>ln -s</code>) 的方式連結至 sites-enable 資料夾<br>:::</p><h3 id="設定本機端的-DNS"><a href="#設定本機端的-DNS" class="headerlink" title="設定本機端的 DNS"></a>設定本機端的 DNS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /etc/hosts</div><div class="line">127.0.0.1       project_name1.com</div><div class="line">127.0.0.1       project_name2.com</div></pre></td></tr></table></figure><p>設定完成後，重啟 Nginx，在網頁上輸入 <a href="http://project_name1.com" target="_blank" rel="external">http://project_name1.com</a> 即可看到建立好的範例頁了</p><p>:::info<br>這邊先將測試的 Domain Name 導向 127.0.0.1，實際情況會由 DNS 導向實際對外開放的 Nginx server<br>:::</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul><li><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="external">Beginner’s Guide</a></li><li><a href="https://gist.github.com/dtomasi/ab76d14338db82ec24a1fc137caff75b" target="_blank" rel="external">Install NGINX with PHP7-FPM on Mac OS X with Homebrew</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-14-04-lts" target="_blank" rel="external">How To Set Up Nginx Server Blocks (Virtual Hosts) on Ubuntu 14.04 LTS</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章會介紹 Nginx 的基本概念以及如何在 Mac 上安裝 Nginx，適合第一次接觸 Nginx 的讀者閱讀，將會了解到&lt;br&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="server" scheme="http://blog.unisharp.com/tags/server/"/>
    
      <category term="nginx" scheme="http://blog.unisharp.com/tags/nginx/"/>
    
      <category term="筆記隨筆" scheme="http://blog.unisharp.com/tags/%E7%AD%86%E8%A8%98%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP 的性能猛獸 - Swoole</title>
    <link href="http://blog.unisharp.com/2017/07/28/PHP%20%E7%9A%84%E6%80%A7%E8%83%BD%E7%8C%9B%E7%8D%B8%20-%20Swoole/"/>
    <id>http://blog.unisharp.com/2017/07/28/PHP 的性能猛獸 - Swoole/</id>
    <published>2017-07-27T16:00:00.000Z</published>
    <updated>2017-12-28T09:19:30.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PHP 發展至今已經 20 餘年，現今許多網站有相當高的比例都是以 PHP 所建構而成，然而一直以來 PHP 為人所詬病的就是他的<strong>效能問題</strong>。尤其是現今許多的開發框架雖然強大優雅，但同時也因為框架的複雜度讓 PHP 的效能更加倍放大來檢視，甚至成為許多人不選擇使用框架開發的原因。</p><a id="more"></a><p>雖然在新版的 <strong>PHP 7</strong> 中比起以往效能上有重大的突破，但在大多數人眼中 PHP 似乎始終都不是以效能為考量時的主要首選開發語言。但是接下來要介紹的 <strong>Swoole</strong> 可能會讓你重新定義 PHP，甚至更加倍地愛上他。</p><blockquote><p>PHP 面對大流量或高效能需求時，也有許多優秀的解決方案，但不在本篇文章的主題內，故不細加說明。</p></blockquote><h2 id="Swoole-簡介"><a href="#Swoole-簡介" class="headerlink" title="Swoole 簡介"></a>Swoole 簡介</h2><p>首先，<strong>Swoole</strong> 這個名字源自於作者起出的名字 <code>sword-server</code>，意即希望為廣大的 PHP 開發者創造出一把鋒利的劍，後來又參考 <code>google</code> 的字將<code>sword-server</code>做變形變成了 <strong>Swoole</strong> 這個名字。<br></p><p><strong>Swoole</strong> 並不是一個新的程式語言，他是一個以<strong>純 C 語言</strong>編寫的 <strong>PHP extension</strong>，簡單來說他有以下特點:</p><ul><li>純 C 語言編寫，所以性能超強</li><li>事件驅動 (Event Driven)</li><li>異步 I/O</li><li>支援 異步/同步/協程 (Coroutine)</li><li>支援 TCP/UDP/UnixSock 通信協定</li><li>支援異步 Server 端和異步 Client 端</li><li>支援多行程 (Process) 與多執行緒 (Thread)</li><li>支援 IPv4 與 IPv6</li><li>低 CPU 消耗與支援 daemon 模式</li></ul><p><strong>Swoole</strong> 是一個多行程模式的框架，當 <strong>Swoole</strong> 啟動時，一共會建立 <code>2 + n + m</code> 個行程，其 <code>n</code><br> 為 <code>Worker 數</code>， <code>m</code> 為 <code>TaskWorker 數</code>，<code>2</code> 為一個 <code>Master 行程</code>和一個 <code>Manager 行程</code>，架構圖如下:<br><img src="http://i.imgur.com/I5SqLJQ.png" alt="swoole-model"></p><p>列了那麼多特點，簡單來說，就是 <strong>Swoole</strong> 能讓你的 PHP 馬上提升好幾個等級，能達到原生 PHP 不支援的許多功能，雖然 <strong>Swoole</strong> 並不是第一個支援異步的方案，而 PHP 本身也能使用一些方式達成異步，但是 <strong>Swoole</strong> 的效能在目前來說還沒有人能與其匹敵，更別說他除了異步還有以上那麼多優秀的功能。</p><h2 id="異步開發"><a href="#異步開發" class="headerlink" title="異步開發"></a>異步開發</h2><p>前面談到了異步，但異步對於效能有什麼幫助？近幾年 <strong>NodeJS</strong> 深受許多人喜愛，原因之一就是他的異步功能，而造就了他優秀的性能，以下為簡易 <strong>NodeJS</strong> 的異步流程:<br><img src="http://i.imgur.com/yPb4RaG.png" alt="nodejs-async"></p><p>傳統上來說，一個客戶端發起的 <code>request</code> 在伺服器端處理時會有很多 I/O 的操作，而 I/O 通常是最耗費時間的，但是伺服器端會等相關的 I/O 處理完才會一次回傳給客戶端結果，此時便呈現阻塞的 (Blocked) 狀態，一旦伺服器該請求未完全處理完，其他客戶端的請求就必須等待。</p><p>而異步能讓伺服器在 I/O 未處理完時，就繼續處理下一個用戶端的請求，當前面的 I/O 處理完成時再回覆前次的請求，藉由這種方式充份地使用的伺服器的效能。</p><blockquote><p>當然 <strong>NodeJS</strong> 的 V8 引擎和本身就能夠當作 Server 來服務，免去每次的 <code>request</code> 需要重複載入及編譯也是 <strong>NodeJS</strong> 效能的重要功臣。</p></blockquote><h2 id="NodeJS-vs-Swoole"><a href="#NodeJS-vs-Swoole" class="headerlink" title="NodeJS vs Swoole"></a>NodeJS vs Swoole</h2><p>既然 <strong>NodeJS</strong> 的性能如此優異，那 <strong>Swoole</strong> 相比之下還有哪些優勢呢?</p><ul><li><p>Callback 函數更加靈活<br>所有的編譯式語言都是透過 <code>callback</code> 機制來達成異步的，包含C/C++、Java、Ruby、Python、Javascript，與 Javascript 相比，PHP 支援 4 種不同的 <code>callback</code> 寫法，讓你寫起來更加地有彈性。(請參照: <a href="https://wiki.swoole.com/wiki/page/458.html" target="_blank" rel="external">4種PHP回調函數風格</a>)</p></li><li><p>更優秀的效能<br><strong>NodeJS</strong> 雖然在效能上相當不錯，但是 <strong>Swoole</strong> 是以<strong>純 C 語言</strong>編寫的，又 <strong>NodeJS</strong> 只支援<code>單一程序</code>與<code>單執行緒</code>，而 <strong>Swoole</strong> 支援<code>多程序</code>與<code>多執行緒</code>，所以效能上更加優秀。</p></li></ul><p>以下效能評測以<code>wrk 壓力測試工具</code>對 <strong>NodeJS</strong> 與 <strong>Swoole</strong> 進行測試，雙方 <code>server</code> 都只進行單純的印出資料作為回覆。</p><ul><li><p>Node.js v4.2.6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wrk -t4 -c400 -d10s http://127.0.0.1:1337/</div><div class="line">Running 10s test @ http://127.0.0.1:1337/</div><div class="line">  4 threads and 400 connections</div><div class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</div><div class="line">    Latency    16.08ms    2.70ms 237.82ms   90.94%</div><div class="line">    Req/Sec     6.05k   510.34     7.10k    91.00%</div><div class="line">  240668 requests in 10.02s, 46.36MB read</div><div class="line">Requests/sec:  24026.00</div><div class="line">Transfer/sec:      4.63MB</div></pre></td></tr></table></figure><ul><li>PHP7.1+Swoole-v1.9.5<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">wrk -t4 -c400 -d10s http://127.0.0.1:1337/</div><div class="line">Running 10s test @ http://127.0.0.1:1337/</div><div class="line">  4 threads and 400 connections</div><div class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</div><div class="line">    Latency     1.46ms    1.42ms  27.96ms   85.66%</div><div class="line">    Req/Sec    75.29k    36.43k  183.55k    72.75%</div><div class="line">  3007806 requests in 10.06s, 605.25MB read</div><div class="line">Requests/sec: 299103.32</div><div class="line">Transfer/sec:     60.19MB</div></pre></td></tr></table></figure></li></ul></li></ul><p>若單純以 <code>RPS 數據</code>作效能比較，<strong>Swoole</strong> 的處理速度大約是 <strong>NodeJS</strong> 的十倍之多，這樣的結果是相當令人驚豔的，<strong>Swoole</strong> 的誕生完全為 <strong>PHP</strong> 長期以來在性能上遭受的罵名扳回一城。</p><p>(評測資料來自於: <a href="https://www.w3c-lab.com/php-7-1-swoole-v1-9-5-vs-node-js-benchmark-test-php7-swoole-beats-node-js/" target="_blank" rel="external">PHP 7.1+ Swoole v1.9.5 vs Node.js Benchmark Test PHP7 + Swoole beats Node.js</a>)</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>總結來說，個人對於 <strong>Swoole</strong> 的評價相當的高，非常推薦給有興趣的人來嘗試，但是在這裡還是列出客觀上一些 <strong>Swoole</strong> 所面臨的劣勢:</p><ul><li>官方文件相當簡易，而且只有中文，缺乏定期維護</li><li>儘管 <strong>Swoole</strong> 有中國的<code>騰訊</code>、<code>百度</code>、<code>阿里巴巴</code>等多家技術人員投入開發使用，但缺乏廣大的社群</li><li>入門門檻較高，若要完整熟悉 <strong>Swoole</strong> 開發，必須擁有大量<code>多執行緒開發</code>、<code>Unix</code>、<code>TCP</code>的經驗與知識才能完全掌握</li><li>不支援 <code>Windows</code>，除非裝上虛擬器執行 <code>Linux</code> 或是使用 <code>CygWin</code> (也建議只在開發用，<strong>不適合</strong>當 production server)</li><li>網路上學習資源相對少，目前市面上也沒有相關的教學書籍可以參考</li></ul><p>即便是這樣，如果你本身就熟悉 <strong>PHP</strong>，在效能上有所追求或是想嘗試不同的開發方式，還是相當推薦試試看 <strong>Swoole</strong> !</p><p>參考資源: <a href="http://www.swoole.com" target="_blank" rel="external">Swoole 官方網站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;PHP 發展至今已經 20 餘年，現今許多網站有相當高的比例都是以 PHP 所建構而成，然而一直以來 PHP 為人所詬病的就是他的&lt;strong&gt;效能問題&lt;/strong&gt;。尤其是現今許多的開發框架雖然強大優雅，但同時也因為框架的複雜度讓 PHP 的效能更加倍放大來檢視，甚至成為許多人不選擇使用框架開發的原因。&lt;/p&gt;
    
    </summary>
    
      <category term="程式設計" scheme="http://blog.unisharp.com/categories/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="PHP" scheme="http://blog.unisharp.com/tags/PHP/"/>
    
      <category term="Swoole" scheme="http://blog.unisharp.com/tags/Swoole/"/>
    
  </entry>
  
  <entry>
    <title>用 Vue.js 打造 Binary Clock</title>
    <link href="http://blog.unisharp.com/2017/07/12/%E7%94%A8%20Vue.js%20%E6%89%93%E9%80%A0%20Binary%20Clock/"/>
    <id>http://blog.unisharp.com/2017/07/12/用 Vue.js 打造 Binary Clock/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:55.856Z</updated>
    
    <content type="html"><![CDATA[<p>數字時鐘是不是很膩了？第一次看到 Binary Clock 是不是有一種好想擁有的感覺？</p><p>現在，我們就來瞭解 &amp; 用 vue.js 動手做做看吧！</p><a id="more"></a><p><strong>什麼是 Binary ? 什麼又是 Binary Clock ?</strong> 來說說吧：</p><p>Binary 中文是二進位。平常我們看數字 5 其實是十進位，轉成二進位要看成 0101</p><p>假設現在是 19:56:16，轉成二進位是 0001 1001 : 0101 0110 : 0001 0110</p><p>那麼 Binary Clock 會對應二進位 1 燈亮、 0 燈不亮。</p><iframe width="100%" height="500" src="https://clock.sasaya.me/" frameborder="0"></iframe><h2 id="Pre-requirements"><a href="#Pre-requirements" class="headerlink" title="Pre requirements"></a>Pre requirements</h2><p>開始之前，我們有些前置作業要完成，要把環境架起來</p><p>Required:</p><ul><li>Node.js (&gt;=4.x, 6.x preferred)</li><li>npm version 3+</li><li>Git.</li></ul><p>Installation:</p><p>安裝 vue-cli <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">可參考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g vue-cli</div></pre></td></tr></table></figure><p>建立專案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ vue init webpack &lt;project-name&gt;</div><div class="line"></div><div class="line">  ? Project name &lt;project-name&gt;</div><div class="line">  ? Project description &lt;description&gt;</div><div class="line">  ? Author &lt;auther&gt;</div><div class="line">  ? Vue build standalone</div><div class="line">  ? Install vue-router? No</div><div class="line">  ? Use ESLint to lint your code? No</div><div class="line">  ? Setup unit tests with Karma + Mocha? No</div><div class="line">  ? Setup e2e tests with Nightwatch? No</div><div class="line"></div><div class="line">   vue-cli · Generated &quot;&lt;project-name&gt;&quot;.</div><div class="line"></div><div class="line">   To get started:</div><div class="line">     // 進入專案</div><div class="line">     cd &lt;project-name&gt;</div><div class="line">     // 初始專案</div><div class="line">     npm install</div><div class="line">     // 啟動專案</div><div class="line">     npm run dev</div><div class="line"></div><div class="line">   Documentation can be found at https://vuejs-templates.github.io/webpack</div></pre></td></tr></table></figure><p>前往 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 看到大大的 V 就表示成功了</p><h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><p>首先，建立 /src/components/Light.vue。我們需要一顆燈的元件，它的行為只有亮或暗，而且我們要從外部給予亮或暗的指令。</p><ul><li>拉出一個燈，並且給予 on 的參數</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;light&quot; :class=&quot;&#123; on: on &#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><ul><li>透過 props 屬性從父元件傳入 0/1 布林值進來</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  export default &#123;</div><div class="line">    props: &#123;</div><div class="line">      on: &#123;</div><div class="line">        type: Boolean,</div><div class="line">        required: true</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>設定樣式（發揮你的設計天份吧）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">  .light &#123;</div><div class="line">    background-color: #9da0a4;</div><div class="line">    width: 70px;</div><div class="line">    height: 70px;</div><div class="line">    margin-top: 8px;</div><div class="line">    margin-bottom: 8px;</div><div class="line">    margin-left: 8px;</div><div class="line">    border-radius: 5px;</div><div class="line">  &#125;</div><div class="line">  .light.on &#123;</div><div class="line">    background-color: #333;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>接著，建立 /src/components/Digit.vue。我們以四顆燈為一組，需要兩組形成兩位數的元件</p><ul><li>拉出兩位數的元件，每位數是由是四個 Light 元件組成，四顆燈分別表示二進位的四個 bit</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;binary-digit&quot;&gt;</div><div class="line">    &lt;div class=&quot;digit&quot;&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 8)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 4)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 2)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 1)&quot;&gt;&lt;/light&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;digit&quot;&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 8)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 4)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 2)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 1)&quot;&gt;&lt;/light&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><ul><li>同樣透過 props 屬性從父元件傳入兩位數進來，並且切成十位數字和個位數字，每位數字轉成二進位交給 Light 元件顯示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  import Light from &apos;./Light&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    props: &#123;</div><div class="line">      digit: &#123;</div><div class="line">        type: Number,</div><div class="line">        required: true</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      Light</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">      tens () &#123;</div><div class="line">        return Math.floor(this.digit / 10)</div><div class="line">      &#125;,</div><div class="line">      ones () &#123;</div><div class="line">        return this.digit % 10</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>樣式設定（發揮你的設計天份吧）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">  .binary-digit &#123;</div><div class="line">    display: flex;</div><div class="line">    flex-direction: row;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><p>最後，修改 /src/App.vue 。我們要把時/分/秒的元件組成時鐘，並且每秒更動一次，完成 Binary Clock</p><ul><li>拉出時/分/秒的元件，是由三個 Digit 元件組成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;div class=&quot;binary-clock&quot;&gt;</div><div class="line">      &lt;digit :digit=&quot;hours&quot;&gt;&lt;/digit&gt;</div><div class="line">      &lt;digit :digit=&quot;minutes&quot;&gt;&lt;/digit&gt;</div><div class="line">      &lt;digit :digit=&quot;seconds&quot;&gt;&lt;/digit&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure><ul><li>利用 window.setInterval 每秒讀取一次時間，更新 hours（時）, minutes（分）, seconds（秒） 的值，交給 Digit 元件處理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  import Digit from &apos;./components/Digit&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    name: &apos;app&apos;,</div><div class="line">    components: &#123;</div><div class="line">      Digit</div><div class="line">    &#125;,</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        hours: 0,</div><div class="line">        minutes: 0,</div><div class="line">        seconds: 0,</div><div class="line">        now: new Date()</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted () &#123;</div><div class="line">      window.setInterval(() =&gt; &#123;</div><div class="line">        var now = new Date()</div><div class="line">        this.hours = now.getHours()</div><div class="line">        this.minutes = now.getMinutes()</div><div class="line">        this.seconds = now.getSeconds()</div><div class="line">      &#125;, 1000)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><ul><li>樣式設定（發揮你的設計天份吧）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">body &#123;</div><div class="line">  background-color: gray;</div><div class="line">&#125;</div><div class="line">#app &#123;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div><div class="line">.binary-clock &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: row;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>結果會像這樣</p><p><img src="binary-clock.gif" alt=""></p><h1 id="作者時間"><a href="#作者時間" class="headerlink" title="作者時間"></a>作者時間</h1><p><a href="https://github.com/storyn26383/binary-clock" target="_blank" rel="external">想看完整原始碼</a> 在這裡在這裡 <a href="https://github.com/storyn26383/binary-clock" target="_blank" rel="external">toryn26383/binary-clock</a></p><p>因為習慣使用 pug &amp; sass 所以原始碼跟這裡的程式碼會有不一樣喔，這裡是為了簡化學習複雜度，使用 html &amp; css 教學</p><p>最後，歡迎大家按右下方的社群按鈕，貼上你的成果，把這一次的收穫分享出去喔（微笑）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;數字時鐘是不是很膩了？第一次看到 Binary Clock 是不是有一種好想擁有的感覺？&lt;/p&gt;
&lt;p&gt;現在，我們就來瞭解 &amp;amp; 用 vue.js 動手做做看吧！&lt;/p&gt;
    
    </summary>
    
      <category term="開源分享" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="Vuejs" scheme="http://blog.unisharp.com/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>軟體開發的阿波羅13</title>
    <link href="http://blog.unisharp.com/2017/07/10/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E7%9A%84%E9%98%BF%E6%B3%A2%E7%BE%8513/"/>
    <id>http://blog.unisharp.com/2017/07/10/軟體開發的阿波羅13/</id>
    <published>2017-07-10T00:00:00.000Z</published>
    <updated>2017-07-25T06:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然間，小 PM 聽到工程師葛格們正在討論一個很奇怪的名詞『code name』。在好奇心的驅使下，我這位小菜鳥也加入他們的討論，才知道他們正在為某個新的專案/產品取名字。<br><a id="more"></a><br>小 PM 一直覺得，專案/產品的名字不就依照用途來取嗎？像是我們自家公司的網站，不就應該叫做『UniSharp Website』之類的嗎？</p><p>經過小 PM 抽絲剝繭、認真學習與研究之後才發現，原來我認知的這個名字，是叫做產品名稱，或是專案的對外名稱；一般在開發這個專案/產品時，公司內部通常會為它取一個 code name，這個 code name 可能跟產品或是這個專案的目的、用途<strong>完全沒有關係</strong>。所以『UniSharp Website』的 code name 可能叫做『bigbang』 :P。</p><h2 id="為什麼要取-code-name-呢？"><a href="#為什麼要取-code-name-呢？" class="headerlink" title="為什麼要取 code name 呢？"></a>為什麼要取 code name 呢？</h2><h3 id="每個行業都有常用的專有名詞或術語，取一個該領域外的-code-name-可以讓專案更有辨識度。"><a href="#每個行業都有常用的專有名詞或術語，取一個該領域外的-code-name-可以讓專案更有辨識度。" class="headerlink" title="每個行業都有常用的專有名詞或術語，取一個該領域外的 code name 可以讓專案更有辨識度。"></a>每個行業都有常用的專有名詞或術語，取一個該領域外的 code name 可以讓專案更有辨識度。</h3><p>以我們的行業來舉例，若有個專案叫做『悠夏爾公告系統』，當我們在內部溝通，講到『公告』這個詞的時候，就會讓人混淆：到底是在講『悠夏爾公告系統』，還是一般的公告功能？<br>若把『悠夏爾公告系統』的 code name 取作 bigbang，我們提到『bigbang』，就很清楚的知道是在講某個專案/產品。</p><h3 id="維護專案的秘密，以混淆競爭對手"><a href="#維護專案的秘密，以混淆競爭對手" class="headerlink" title="維護專案的秘密，以混淆競爭對手"></a>維護專案的秘密，以混淆競爭對手</h3><p>當內部資料外流，而讓競爭對手看到『bigbang』這個詞的時候，他會不清楚這是什麼專案。<br>甚至有些情況會時常調整同一個專案的 code name，會更讓競爭對手摸不著頭緒。但必須小心服用此帖，別讓自己人也搞混了。</p><h3 id="讓產品名稱與開發時的名稱脫勾"><a href="#讓產品名稱與開發時的名稱脫勾" class="headerlink" title="讓產品名稱與開發時的名稱脫勾"></a>讓產品名稱與開發時的名稱脫勾</h3><p>開發人員可以專注在開發議題上，不需因為產品名稱的變動，而必須修改程式內的專案名稱來傷腦筋。<br>在開發過程中，可能因為 Pivot 而導致整個方向都變了，若一開始的方向是 ERP，code name 可能叫做 『UniSharp ERP』，但因為 Pivot的緣故，方向變成了交友平台（這也差太遠了吧….），這個時候專案代號若還是使用『UniSharp ERP』，就會變得很怪了。</p><h2 id="該怎麼取-code-name？"><a href="#該怎麼取-code-name？" class="headerlink" title="該怎麼取 code name？"></a>該怎麼取 code name？</h2><ul><li>易念（要好發音）、好拼，別太難。</li><li>簡短不要長，四、五個音就太長了。</li><li>最好要有一系列的相關名字</li><li>不要有諧音或不好的聯想</li></ul><h2 id="著名的-code-name"><a href="#著名的-code-name" class="headerlink" title="著名的 code name"></a>著名的 code name</h2><blockquote><p>Android 的甜點系列<br><a href="https://zh.wikipedia.org/wiki/Android歷史版本" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android歷史版本</a> (<a href="https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC</a>)</p><p>Debian 的玩具總動員系列<br><a href="https://zh.wikipedia.org/wiki/Debian#.E5.8F.91.E8.A1.8C.E7.89.88.E6.9C.AC" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Debian#.E5.8F.91.E8.A1.8C.E7.89.88.E6.9C.AC</a></p><p>Microsoft 的一大堆 code name<br><a href="https://en.wikipedia.org/wiki/List_of_Microsoft_codenames" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_Microsoft_codenames</a></p></blockquote><h2 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h2><p>取 code name 真的是一門學問，但在命名的同時，也讓苦悶的程式開發增添了一些有趣的元素進來 !?。<br>取一個屬於自己的 code name，有時候也是工程師大哥獨特的浪漫吧～～</p><p>如果是我取，可能會用一系列的名牌當 code name：</p><blockquote><p>Prada、Hermes、LV、Coach、Bally、Burberry、Chanel…</p></blockquote><p>最後才想到還沒講到標題提到的阿波羅13（Apollo 13），其實阿波羅13就是一個 code name 啊！我們常在戰爭電影裡面看到的什麼黑鷹計畫、藍象行動、綠狗任務，這都是他們的 code name 喔！（一整個亂取…XD）</p><h3 id="參考文獻："><a href="#參考文獻：" class="headerlink" title="參考文獻："></a>參考文獻：</h3><blockquote><p>維基百科 Code name<br><a href="https://en.wikipedia.org/wiki/Code_name" target="_blank" rel="external">https://en.wikipedia.org/wiki/Code_name</a><br><a href="https://zh.wikipedia.org/wiki/代号" target="_blank" rel="external">https://zh.wikipedia.org/wiki/代号</a></p><p>Project Code Name<br><a href="https://ingramchen.io/blog/2014/03/project-code-name.html" target="_blank" rel="external">https://ingramchen.io/blog/2014/03/project-code-name.html</a></p><p>怎麼幫專案取名字呢? - 喲哪桑 Speaking 之專案工作日誌<br><a href="http://jonathanspeaking.blogspot.tw/2013/04/blog-post.html" target="_blank" rel="external">http://jonathanspeaking.blogspot.tw/2013/04/blog-post.html</a></p><p>翻譯：專案之名有什麼意涵？(What’s in a Project Name?) by Jeff Atwood - 葉難<br><a href="http://yehnan.blogspot.tw/2010/08/whats-in-project-name-by-jeff-atwood.html" target="_blank" rel="external">http://yehnan.blogspot.tw/2010/08/whats-in-project-name-by-jeff-atwood.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然間，小 PM 聽到工程師葛格們正在討論一個很奇怪的名詞『code name』。在好奇心的驅使下，我這位小菜鳥也加入他們的討論，才知道他們正在為某個新的專案/產品取名字。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>好書推薦-簡單思考</title>
    <link href="http://blog.unisharp.com/2017/06/26/%E5%A5%BD%E6%9B%B8%E6%8E%A8%E8%96%A6-%E7%B0%A1%E5%96%AE%E6%80%9D%E8%80%83/"/>
    <id>http://blog.unisharp.com/2017/06/26/好書推薦-簡單思考/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:57.729Z</updated>
    
    <content type="html"><![CDATA[<p>多閱讀商場上各式各樣的產品開發經驗，並從中瞭解其成功與失敗背後的原因，思考成功產品為什麼會成功？失敗產品又會什麼無法被市場所接受呢？<a id="more"></a>對於規劃產品的PM來說，是很重要的一環。</p><p>今日要推薦的好書 - 簡單思考。「簡單思考」在講一個人人幾乎皆有使用、甚至工作和生活都離不開的「LINE」，是如何被打造出來的？為什麼 LINE 可以獲得巨大的成功？其背後的團隊究竟是如何創造出的呢？其公司的前任 CEO 森川亮，分享 LINE 從無到有的心路歷程與成功秘辛。</p><h3 id="認清商業本質"><a href="#認清商業本質" class="headerlink" title="認清商業本質"></a>認清商業本質</h3><blockquote><p>比起在競賽中勝出，更應該單純的為使用者著想，全心全意創造出真正滿足使用者的事物，最後自然會獲勝。</p><p>-節錄書中片段</p></blockquote><p>書中最先提出的便是商業的本質，有趣的是，這幾乎是商業人士皆知的理論 - 供需法則。作者認為，為寒冷的冬天提供溫暖的衣服、為無聊閒得發慌的人設計遊戲，最重要的事情正是因為瞭解人們真正的需求，並且愛護人們的心情。</p><p>普遍認為公司就是不斷推出熱門的產品並且從中獲得利益，但是將「錢」視為最終目標卻是非常危險的作法，因為使用者會馬上察覺並且離開，產品也終將走向沒落一路，因此，若想變成長銷產品，最重要的事情是滿足需求與看重使用者滿意度。</p><h3 id="以「人」為本"><a href="#以「人」為本" class="headerlink" title="以「人」為本"></a>以「人」為本</h3><blockquote><p>徵才戰略的基礎，就是打造一個讓員工可以盡情發揮能力的環境。<br>只要讓他們輕鬆愉快的工作，自然會產生聚集優秀人才的生態系統。</p></blockquote><p>想要打造成功的產品，團隊成員是關鍵中的關鍵，甚至已經決定了產品的成敗走向，因此，慎選人才並愛用人，才是公司挑選成員應遵循的原則。作者打破了位階制度做越久領越多的做法，有能力的人就該給予相對應的報酬，相對的，只因年資高卻毫無貢獻的職員，在考核時也給予相對應的調整，打造一家「鼓勵員工創造成績的公司」。</p><p>正因貫徹「以人為本」的理念，在公司中大家不需要察言觀色，有話直說的工作環境，讓開會時可以、也必須誠實地表達出自己的想法，若認為提案有需要改善的部分，皆可當面提出質疑，而背後的原因更呼了「應認清商業的本質」，因為比起得罪同事，成員更害怕得罪使用者。</p><h3 id="觀察並洞悉需求"><a href="#觀察並洞悉需求" class="headerlink" title="觀察並洞悉需求"></a>觀察並洞悉需求</h3><p>LINE 的成立剛好是在日本 311 大地震的時期，公司規劃推出適合智慧型手機的服務軟體，並成立了專案團隊。與此同時，雖然有市調結果，卻一直尚未決定方向。</p><p>在地震過後，許多人第一時間想盡方式聯繫親朋好友，想要報平安，卻苦無辦法，而出現眾人在公用電話亭前大排長龍的景象。（這景象也成為日後產品命名的靈感 - LINE）</p><p>看見這些畫面的成員，認為當下最迫切需要的功能，就是封閉式通訊，於是，團隊有了方向，秉持著最簡開發，在最短的速度內，將產品完成並推廣出去。</p><p>正因為察覺了使用者最需要的功能並且專注完成，LINE 才可以在最短的時間內被推出，並且成功打入市場。</p><h3 id="讓優秀的設計師主導產品"><a href="#讓優秀的設計師主導產品" class="headerlink" title="讓優秀的設計師主導產品"></a>讓優秀的設計師主導產品</h3><blockquote><p>真正優秀的設計師會排除自己的喜好，徹底追求如何讓使用者方便使用。</p></blockquote><p>作者認為產品讓優秀的設計師主導較好的原因在於，工程師主導的產品容易偏離使用者的思維，常以技術的角度規劃，反而增加了許多不必要、非重點的功能。</p><p>作者提出不同以往的觀點是，他認為優秀的設計並不是將產品設計地別出心裁，而是站在使用者的立場規劃出最適合使用者的功能與介面，所以，他們擅長將功能化簡至只留最重要的功能。</p><p>作者讓我發現 LINE 公司裡「由設計主導服務開發」的產品非常多，他們不在於追求差異化與創新，更著重在提供使用者最需要的功能。</p><p>正因為<strong>使用者永遠不會告訴你答案</strong>，即便做了市調研究，有時結論卻仍然不一定是真實的結論，最重要的還是觀察與察覺使用者的需求，並且提供其最貼近自身的價值，作者相信利益會由此伴隨而來，產品也將會成為真正符合商業本質的長銷產品。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多閱讀商場上各式各樣的產品開發經驗，並從中瞭解其成功與失敗背後的原因，思考成功產品為什麼會成功？失敗產品又會什麼無法被市場所接受呢？
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>暢銷的原理</title>
    <link href="http://blog.unisharp.com/2017/06/26/%E6%9A%A2%E9%8A%B7%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.unisharp.com/2017/06/26/暢銷的原理/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:59.394Z</updated>
    
    <content type="html"><![CDATA[<p>有沒有想過為什麼超商以前沒有賣的咖啡現在卻會熱賣？</p><p>有沒有想過為什麼超商現在很少販售份量較大的微波熟食 / 甜點？進而改販售越來越小份的熟食 / 甜點？</p><a id="more"></a><p>今天想介紹大家一本書，除了說明以上的原因外，作者更想讓讀者創造出「暢銷」的產品！</p><p>當閱讀完第一章節作者對以上社會實際案例的解釋說明後，便可以知道暢銷商品的共同點就在於「潮流」和「隱藏需求」，未來若想要讓推出的新商品、服務熱銷，甚至是順利讓客戶採納提案、訂定公司目標計畫…等，關鍵就在於找出那些「潮流」和「隱藏需求」！</p><h3 id="至於如何尋找「潮流」和「隱藏需求」呢？"><a href="#至於如何尋找「潮流」和「隱藏需求」呢？" class="headerlink" title="至於如何尋找「潮流」和「隱藏需求」呢？"></a>至於如何尋找「潮流」和「隱藏需求」呢？</h3><p>作者在書中介紹了三個觀點「觀察」、「體會」、「注意」，希望讀者們能夠用心體現，找出平常生活中的各種「亮點」，並將它們用自己習慣的方式紀錄起來，以便未來方便取得使用。<br><br><br>在此小編偷偷透露內文中大家要找的應該是哪些「亮點」？<br><br>平常生活中有哪些是出現次數「較多的事物」？<br><br>有哪些是惱人的「麻煩事物」？<br><br>有哪些是超出我們認知範圍「比較怪的事物」？<br><br><br>書中舉了許多例子，其中包含作者觀察到生活裡多出了「自助烏龍麵」、「自助加油站」…等暢銷的自助商品服務造成了「自助潮流」!<br><br>越來越多「電子票證」、「電子錢包」讓我們幾乎不需要再擔心忘記帶現金的「無現金潮流」!</p><p>這些都是在我們日常生活中漸漸出現的「亮點」，而這些「亮點」是怎麼出現的呢？<br>作者進一步說明這些「亮點」基本上不出很重要的兩種「需求」：「巨觀」、「微觀」需求！</p><p><br></p><blockquote><p><strong>巨觀需求：</strong> 其實就是白話中的「潮流」，作者對潮流的定義就是「消費者的需求隨著社會變化而改變，因此傾向追求具備某種特色的商品與服務」，也就是整個社會追求的需求，反映出社會的主要變化。</p><p><strong>微觀需求：</strong> 相反於巨觀需求，微觀需求就是指每一個人的具體需求，通常是從觀察顧客行為，聽取顧客意見、貼近顧客進而得知。</p></blockquote><p><br></p><p>以上兩種需求作者統稱為「需求資訊」，在此作者也請我們注意顧客需求中常有的陷阱，若掉入的陷阱會有按照顧客需求開發新產品卻完全賣不出去的可能性！</p><p>作者舉了非常好的例子說明通常顧客需求的形式都是「我想要什麼」，但問題是究竟有「多少人」有這個需求？</p><p>所以我們需要憑藉潮流（巨觀需求）來判讀顧客的「微觀需求」，雖然聽起來很容易，卻很多企業都是掉入這樣的陷阱之中。</p><h3 id="用心「觀察」、「體會」、「注意」並找出巨觀-微觀需求就夠了嗎？"><a href="#用心「觀察」、「體會」、「注意」並找出巨觀-微觀需求就夠了嗎？" class="headerlink" title="用心「觀察」、「體會」、「注意」並找出巨觀 / 微觀需求就夠了嗎？"></a>用心「觀察」、「體會」、「注意」並找出巨觀 / 微觀需求就夠了嗎？</h3><p>除了找到以上的兩種需求後就可以創造出「暢銷」的產品與服務嗎？</p><p>作者更進一步介紹了兩個能讓我們精準打中顧客 / 客戶「痛點」並發想出新產品、新服務的方法：</p><p><br></p><blockquote><p><strong>「深入挖掘」 &amp; 「橫向連鎖」</strong></p></blockquote><p><br></p><p>其實說白了「深入挖掘」就是希望當我們了解顧客 / 客戶需求後別囫圇吞棗的直接開發產品、專案，而是抱持著「打破砂鍋問到底」的精忱，去挖掘更深入的需求資訊。</p><p>在此小編想到最有名的一個例子就是汽車大王亨利福特所說過的話：「如果問顧客他們想要什麼？他們肯定只會說需要一匹更快的馬。」</p><p>如果在汽車出現之前的時代企業家們沒有更「深入挖掘」顧客們的需求，或許大家只會去研究如何培育出跑更快的馬，而非了解顧客其實是需要「更快地到達某地」並創造出了汽車造福全世界！</p><p>至於「橫向連鎖」則是希望我們透過「深入挖掘」後找到滿足「痛點」的價值，找出也對此「價值」有著需求卻還尚未被滿足的市場，如此一來就會少了許多紅海競爭，進而開發出屬於自己的藍海！又或者說你可以為產品 / 服務擴大推廣範圍 / 目標族群，進而達成商業目標！</p><p>作者將「深入挖掘」&amp;「橫向連鎖」結合起來稱作「縱橫展開」，當然這方法除了可以達成商業目標外，更是讓我們培養「從主觀轉為客觀」的習慣。</p><p>我們常常發現一些難以暢銷的產品 / 服務，亦或是企業內部無法獲得批准的企劃，大多都是因為太過主觀而造成旁人難以理解並拒絕的原因。</p><p><br></p><blockquote><p><strong>「所以我們要「客觀化」，將需求資訊從衡展開，看得更深更遠，計畫才會更加客觀。而計劃愈客觀，成功機率就愈高。」-內文</strong></p></blockquote><p><br><br>以上就是整本書作者最想告訴讀者們的主軸，看到這邊或許會認為平常這些早就明白，亦會覺得這些都是很淺的知識？</p><p>但小編覺得學到最多的其實是從書中作者所舉的每一個實際案例，除了了解如何應用上述的方法 / 技巧外，在不同案例的情境下作者也教了許多深藏其中的 Know-How，期望讀著們能在自己所處的環境 / 挑戰下打造出傑出的產品 / 計畫，為公司 / 自己創造更多的價值！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有沒有想過為什麼超商以前沒有賣的咖啡現在卻會熱賣？&lt;/p&gt;
&lt;p&gt;有沒有想過為什麼超商現在很少販售份量較大的微波熟食 / 甜點？進而改販售越來越小份的熟食 / 甜點？&lt;/p&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>ES6 極簡摘要</title>
    <link href="http://blog.unisharp.com/2017/06/19/ES6%20%E6%A5%B5%E7%B0%A1%E6%91%98%E8%A6%81/"/>
    <id>http://blog.unisharp.com/2017/06/19/ES6 極簡摘要/</id>
    <published>2017-06-19T00:00:00.000Z</published>
    <updated>2017-12-28T09:16:55.200Z</updated>
    
    <content type="html"><![CDATA[<p>覺得官方文件的說明太冗長了嗎？<br>這裡是用小編的理解來說明 ES6 到底新增了哪些方便好用的功能<br>以這篇文章當作前言，再搭配官方的文件，效果會更好喔！<br><a id="more"></a></p><p>新舊語法比較：<a href="http://es6-features.org/" target="_blank" rel="external">http://es6-features.org/</a></p><h1 id="Constant-常數"><a href="#Constant-常數" class="headerlink" title="Constant - 常數"></a>Constant - 常數</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> PI = <span class="number">3.141593</span></div></pre></td></tr></table></figure><h1 id="Block-scoped-variable-用-let-宣告變數"><a href="#Block-scoped-variable-用-let-宣告變數" class="headerlink" title="Block-scoped variable - 用 let 宣告變數"></a>Block-scoped variable - 用 let 宣告變數</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 0</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// i is not defined</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span>; j++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(j); <span class="comment">// 0</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(j); <span class="comment">// 1</span></div></pre></td></tr></table></figure><h3 id="const-amp-let-的共通點"><a href="#const-amp-let-的共通點" class="headerlink" title="const &amp; let 的共通點"></a>const &amp; let 的共通點</h3><ul><li>要在使用前宣告</li><li>不能重複宣告</li></ul><p>★ const 就是不能改值的 let ★</p><h1 id="Block-scoped-function"><a href="#Block-scoped-function" class="headerlink" title="Block-scoped function"></a>Block-scoped function</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// codes here</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>以前要用下面的 code 把要執行的程式包起來，現在只需要大括號</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span> &#125;</div><div class="line">    foo() === <span class="number">1</span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span> &#125;</div><div class="line">        foo() === <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">    foo() === <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Arrow-functions-用箭頭簡化匿名函數"><a href="#Arrow-functions-用箭頭簡化匿名函數" class="headerlink" title="Arrow functions - 用箭頭簡化匿名函數"></a>Arrow functions - 用箭頭簡化匿名函數</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plus_numbers = numbers.map(<span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">1</span>);</div></pre></td></tr></table></figure><p>以前要這樣寫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plus_numbers = numbers.map( <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> v + <span class="number">1</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="且可以使用-this-來取得當前的-object"><a href="#且可以使用-this-來取得當前的-object" class="headerlink" title="且可以使用 this 來取得當前的 object"></a>且可以使用 this 來取得當前的 object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.nums.forEach(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (v % <span class="number">5</span> === <span class="number">0</span>)</div><div class="line">        <span class="keyword">this</span>.fives.push(v)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><hr><h1 id="參數現在可以用預設值了！！！"><a href="#參數現在可以用預設值了！！！" class="headerlink" title="參數現在可以用預設值了！！！"></a>參數現在可以用預設值了！！！</h1><hr><h1 id="新的運算子：”…”"><a href="#新的運算子：”…”" class="headerlink" title="新的運算子：”…”"></a>新的運算子：”…”</h1><h3 id="功能一：Rest-Parameter，取剩下的參數"><a href="#功能一：Rest-Parameter，取剩下的參數" class="headerlink" title="功能一：Rest Parameter，取剩下的參數"></a>功能一：Rest Parameter，取剩下的參數</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove_first</span>(<span class="params">first, ...arr_others</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> arr_others;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> result = remove_first(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div><div class="line">result === [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div></pre></td></tr></table></figure><h3 id="功能二：Spread-Operator，將陣列或字串打散"><a href="#功能二：Spread-Operator，將陣列或字串打散" class="headerlink" title="功能二：Spread Operator，將陣列或字串打散"></a>功能二：Spread Operator，將陣列或字串打散</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> params = [ <span class="string">"hello"</span>, <span class="literal">true</span>, <span class="number">7</span> ];</div><div class="line"><span class="keyword">let</span> other = [ <span class="number">1</span>, <span class="number">2</span>, ...params ]; <span class="comment">// [ 1, 2, "hello", true, 7 ]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> str = <span class="string">"foo"</span></div><div class="line"><span class="keyword">let</span> chars = [ ...str ] <span class="comment">// [ "f", "o", "o" ]</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">let</span> copyed_array = [...numbers]; <span class="comment">// 也可用於複製 array</span></div></pre></td></tr></table></figure><h1 id="Template-字串中帶入變數（必須使用-）"><a href="#Template-字串中帶入變數（必須使用-）" class="headerlink" title="Template - 字串中帶入變數（必須使用`）"></a>Template - 字串中帶入變數（必須使用`）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> username = <span class="string">'Stream'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;username&#125;</span>.`</span>); <span class="comment">// Hello Stream.</span></div></pre></td></tr></table></figure><h1 id="轉換二進位與八進位的數字"><a href="#轉換二進位與八進位的數字" class="headerlink" title="轉換二進位與八進位的數字"></a>轉換二進位與八進位的數字</h1><p>在開頭使用 0b 或 0o<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0b111110111</span> === <span class="number">503</span></div><div class="line"><span class="number">0o767</span> === <span class="number">503</span></div></pre></td></tr></table></figure></p><h1 id="正規式"><a href="#正規式" class="headerlink" title="正規式"></a>正規式</h1><h3 id="新增-y-選項（類似-g，但會從剩下的字串的第一個字開始比對）"><a href="#新增-y-選項（類似-g，但會從剩下的字串的第一個字開始比對）" class="headerlink" title="新增 y 選項（類似 g，但會從剩下的字串的第一個字開始比對）"></a>新增 y 選項（類似 g，但會從剩下的字串的第一個字開始比對）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="string">'aaa_aa_a'</span>;</div><div class="line"><span class="keyword">let</span> r1 = <span class="regexp">/a+/g</span>;</div><div class="line"><span class="keyword">let</span> r2 = <span class="regexp">/a+/y</span>;</div><div class="line"></div><div class="line">r1.exec(s) <span class="comment">// ["aaa"]</span></div><div class="line">r2.exec(s) <span class="comment">// ["aaa"]</span></div><div class="line"></div><div class="line">r1.exec(s) <span class="comment">// ["aa"]</span></div><div class="line">r2.exec(s) <span class="comment">// null，因剩下的字串為'_aa_a'，第一個字就不符合了</span></div></pre></td></tr></table></figure><h1 id="物件"><a href="#物件" class="headerlink" title="物件"></a>物件</h1><p>###簡化 assign value 的方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> obj = &#123;x, y&#125;; <span class="comment">// &#123;x:1, y:2&#125;</span></div></pre></td></tr></table></figure></p><h3 id="object-的-key-可以是運算式"><a href="#object-的-key-可以是運算式" class="headerlink" title="object 的 key 可以是運算式"></a>object 的 key 可以是運算式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    foo: <span class="string">"bar"</span>,</div><div class="line">    [ <span class="string">"baz"</span> + quux() ]: <span class="number">42</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="簡化-object-內-function-的宣告"><a href="#簡化-object-內-function-的宣告" class="headerlink" title="簡化 object 內 function 的宣告"></a>簡化 object 內 function 的宣告</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">    foo (a, b) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>舊的寫法如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">obj = &#123;</div><div class="line">    foo: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h1 id="Destructing-Assignment-解構賦值"><a href="#Destructing-Assignment-解構賦值" class="headerlink" title="Destructing Assignment - 解構賦值"></a>Destructing Assignment - 解構賦值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> list = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</div><div class="line"><span class="keyword">let</span> [ a, , b ] = list; <span class="comment">// a === 1, b === 3</span></div><div class="line">[ b, a ] = [ a, b ]; <span class="comment">// 交換 a 和 b 的值</span></div></pre></td></tr></table></figure><h1 id="Module-import-amp-export"><a href="#Module-import-amp-export" class="headerlink" title="Module - import &amp; export"></a>Module - import &amp; export</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  lib/math.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y &#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span></div><div class="line"></div><div class="line"><span class="comment">//  someApp.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">"lib/math"</span> <span class="comment">// import 進來是個 object，並取名為 math</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + math.sum(math.pi, math.pi))</div><div class="line"></div><div class="line"><span class="comment">//  otherApp.js</span></div><div class="line"><span class="keyword">import</span> &#123; sum, pi &#125; <span class="keyword">from</span> <span class="string">"lib/math"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"2π = "</span> + sum(pi, pi))</div><div class="line"></div><div class="line"><span class="comment">//  lib/mathplusplus.js</span></div><div class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">"lib/math"</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (x) =&gt; <span class="built_in">Math</span>.exp(x) <span class="comment">// 可以 export 一個帶有 default 字眼的函數或變數</span></div><div class="line"></div><div class="line"><span class="comment">//  someApp.js</span></div><div class="line"><span class="keyword">import</span> exp, &#123; pi, e &#125; <span class="keyword">from</span> <span class="string">"lib/mathplusplus"</span></div><div class="line"><span class="comment">// exp 不在&#123;&#125;內，被 assign 成上面 export default 的函數或變數（此例為一個匿名函數）</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"e^&#123;π&#125; = "</span> + exp(pi))</div></pre></td></tr></table></figure><h1 id="Class-類別"><a href="#Class-類別" class="headerlink" title="Class - 類別"></a>Class - 類別</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (id, x, y) &#123;&#125;</div><div class="line">    move (x, y) &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="還可以-extend"><a href="#還可以-extend" class="headerlink" title="還可以 extend"></a>還可以 extend</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (id, x, y, radius) &#123;</div><div class="line">        <span class="keyword">super</span>(id, x, y)     <span class="comment">// 呼叫父類別的建構元</span></div><div class="line">        <span class="keyword">this</span>.radius = radius</div><div class="line">        <span class="keyword">super</span>.move()        <span class="comment">// 取得父類別的函數或變數</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="類別可以設定-static-成員"><a href="#類別可以設定-static-成員" class="headerlink" title="類別可以設定 static 成員"></a>類別可以設定 static 成員</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> whoami () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'I am Circle'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Circle.whoami() <span class="comment">// I am Circle</span></div></pre></td></tr></table></figure><h3 id="可以自定義-getter-amp-setter"><a href="#可以自定義-getter-amp-setter" class="headerlink" title="可以自定義 getter &amp; setter"></a>可以自定義 getter &amp; setter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span> (radius) &#123;</div><div class="line">        <span class="keyword">this</span>._radius  = radius</div><div class="line">    &#125;</div><div class="line">    set radius   (radius) &#123; <span class="keyword">this</span>._radius  = radius  &#125;</div><div class="line">    get radius   ()       &#123; <span class="keyword">return</span> <span class="keyword">this</span>._radius     &#125;</div><div class="line">    get diameter ()       &#123; <span class="keyword">return</span> <span class="number">2</span> * <span class="keyword">this</span>._radius &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Circle(<span class="number">50</span>) <span class="comment">// 使用 new 來取得實體</span></div><div class="line">c.diameter === <span class="number">100</span></div></pre></td></tr></table></figure><h1 id="Set-amp-Map-兩個新的資料集合"><a href="#Set-amp-Map-兩個新的資料集合" class="headerlink" title="Set &amp; Map - 兩個新的資料集合"></a>Set &amp; Map - 兩個新的資料集合</h1><h3 id="set-可以把它當成資料不會重複的-array"><a href="#set-可以把它當成資料不會重複的-array" class="headerlink" title="set - 可以把它當成資料不會重複的 array"></a>set - 可以把它當成資料不會重複的 array</h3><p>操作方法：add(), delete(), has(), clear()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>()</div><div class="line">s.add(<span class="string">"hello"</span>).add(<span class="string">"goodbye"</span>).add(<span class="string">"hello"</span>)</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> s.values()) <span class="comment">// insertion order</span></div><div class="line">    <span class="built_in">console</span>.log(key) <span class="comment">// output : hello, goodbye</span></div></pre></td></tr></table></figure><h3 id="map-可以把它當成-object，但-key-可以使用字串以外的型別"><a href="#map-可以把它當成-object，但-key-可以使用字串以外的型別" class="headerlink" title="map - 可以把它當成 object，但 key 可以使用字串以外的型別"></a>map - 可以把它當成 object，但 key 可以使用字串以外的型別</h3><p>操作方法：set(), get(), delete, has(), clear()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line"><span class="keyword">let</span> s = <span class="number">1</span></div><div class="line">m.set(<span class="string">"hello"</span>, <span class="number">42</span>)</div><div class="line">m.set(s, <span class="number">34</span>)</div><div class="line">m.get(s) === <span class="number">34</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [ key, val ] <span class="keyword">of</span> m.entries())</div><div class="line">    <span class="built_in">console</span>.log(key + <span class="string">" = "</span> + val) <span class="comment">// output : hello = 42, 1 = 34</span></div></pre></td></tr></table></figure><p>列舉方法：set &amp; map 都可以使用 keys(), values(), entries(), forEach()，且都有 size 屬性</p><h3 id="weak-set-amp-weak-map-弱引用"><a href="#weak-set-amp-weak-map-弱引用" class="headerlink" title="weak set &amp; weak map - 弱引用"></a>weak set &amp; weak map - 弱引用</h3><p>共通點：</p><ul><li>適合存放 DOM 節點，因為當其中的 object 不再被引用的時候，記憶體會被回收，減少 memory leak</li><li>成員只能是 object，其他的值不可用</li><li>無法列舉，因此列舉方法與 size 屬性都不能用</li><li>可以使用各自對應的操作方法，但少了 clear()，因為無法列舉</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isMarked     = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</div><div class="line"><span class="keyword">let</span> attachedData = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</div></pre></td></tr></table></figure><h1 id="Symbol-一個新的型別，代表獨一無二的值"><a href="#Symbol-一個新的型別，代表獨一無二的值" class="headerlink" title="Symbol - 一個新的型別，代表獨一無二的值"></a>Symbol - 一個新的型別，代表獨一無二的值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>(<span class="string">"foo"</span>) !== <span class="built_in">Symbol</span>(<span class="string">"foo"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> foo = <span class="built_in">Symbol</span>()</div><div class="line"><span class="keyword">typeof</span> foo === <span class="string">"symbol"</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;&#125;</div><div class="line">obj[foo] = <span class="string">"foo"</span> <span class="comment">// 為一個物件加入 symbol 值必須使用 []</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj) <span class="comment">// []</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(obj) <span class="comment">// [ foo ]</span></div></pre></td></tr></table></figure><h3 id="可以使用-Symbol-for-設定全域的-Symbol，此時會以-key-決定是否相等"><a href="#可以使用-Symbol-for-設定全域的-Symbol，此時會以-key-決定是否相等" class="headerlink" title="可以使用 Symbol.for() 設定全域的 Symbol，此時會以 key 決定是否相等"></a>可以使用 Symbol.for() 設定全域的 Symbol，此時會以 key 決定是否相等</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>.for(<span class="string">"app.foo"</span>) === <span class="built_in">Symbol</span>.for(<span class="string">"app.foo"</span>)</div></pre></td></tr></table></figure><h1 id="Iterator-使用-for…of-前必須宣告的函數"><a href="#Iterator-使用-for…of-前必須宣告的函數" class="headerlink" title="Iterator - 使用 for…of 前必須宣告的函數"></a>Iterator - 使用 for…of 前必須宣告的函數</h1><p>for…of 一種可以列舉 object, array, map, set 的方式，前提是要先宣告 iterator</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fibonacci = &#123;</div><div class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">        <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">           next () &#123;</div><div class="line">               [ pre, cur ] = [ cur, pre + cur ]</div><div class="line">               <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> fibonacci) &#123;</div><div class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="built_in">console</span>.log(n)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Generator-可以分段執行迴圈的函數"><a href="#Generator-可以分段執行迴圈的函數" class="headerlink" title="Generator  - 可以分段執行迴圈的函數"></a>Generator  - 可以分段執行迴圈的函數</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">range</span> (<span class="params">start, end, step</span>) </span>&#123; <span class="comment">// function 後面，函數名稱前面一定有個星號</span></div><div class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">        <span class="keyword">yield</span> start  <span class="comment">// 使用 yield 表示中斷，並回傳一個值</span></div><div class="line">        start += step</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 0, 2, 4, 6, 8</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="成員-Ganerator-表示法"><a href="#成員-Ganerator-表示法" class="headerlink" title="成員 Ganerator 表示法"></a>成員 Ganerator 表示法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clz</span> </span>&#123;</div><div class="line">    * bar () &#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> Obj = &#123;</div><div class="line">    * foo () &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Promise-確保異步操作結束"><a href="#Promise-確保異步操作結束" class="headerlink" title="Promise - 確保異步操作結束"></a>Promise - 確保異步操作結束</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise'</span>);</div><div class="line">  resolve();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Resolved.'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hi!'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Promise</span></div><div class="line"><span class="comment">// Hi!</span></div><div class="line"><span class="comment">// Resolved</span></div></pre></td></tr></table></figure><h3 id="promise-all"><a href="#promise-all" class="headerlink" title="promise all"></a>promise all</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]).then(success, fail);</div></pre></td></tr></table></figure><ol><li>p1, p2, p3 全部完成才執行 success</li><li>p1, p2, p3 任一個失敗就執行 fail</li></ol><h1 id="Proxy-存取-object-之前的過濾器"><a href="#Proxy-存取-object-之前的過濾器" class="headerlink" title="Proxy - 存取 object 之前的過濾器"></a>Proxy - 存取 object 之前的過濾器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> target = &#123;</div><div class="line">    foo: <span class="string">"Welcome, foo"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</div><div class="line">    get (receiver, name) &#123;</div><div class="line">        <span class="keyword">return</span> name <span class="keyword">in</span> receiver ? receiver[name] : <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">proxy.foo   === <span class="string">"Welcome, foo"</span></div><div class="line">proxy.world === <span class="string">"Hello, world"</span></div></pre></td></tr></table></figure><p>可用的過濾有：get, set, has, deleteProperty, ……</p><h1 id="Reflection-改了舊的功能，但不可以直接蓋掉-object-原本的功能，所以只好放這裡"><a href="#Reflection-改了舊的功能，但不可以直接蓋掉-object-原本的功能，所以只好放這裡" class="headerlink" title="Reflection - 改了舊的功能，但不可以直接蓋掉 object 原本的功能，所以只好放這裡"></a>Reflection - 改了舊的功能，但不可以直接蓋掉 object 原本的功能，所以只好放這裡</h1><p>ES5 沒有 symbol ，所以舊的函數已不夠用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"b"</span>, &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;)</div><div class="line">obj[<span class="built_in">Symbol</span>(<span class="string">"c"</span>)] = <span class="number">3</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj); <span class="comment">// [ "a", "b" ]</span></div><div class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// [ "a", "b", Symbol(c) ]</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;覺得官方文件的說明太冗長了嗎？&lt;br&gt;這裡是用小編的理解來說明 ES6 到底新增了哪些方便好用的功能&lt;br&gt;以這篇文章當作前言，再搭配官方的文件，效果會更好喔！&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://blog.unisharp.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="後端" scheme="http://blog.unisharp.com/categories/%E5%89%8D%E7%AB%AF/%E5%BE%8C%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://blog.unisharp.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Coroutine, Generator 那是什麼？</title>
    <link href="http://blog.unisharp.com/2017/06/19/Coroutine,%20Generator%20%E9%82%A3%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
    <id>http://blog.unisharp.com/2017/06/19/Coroutine, Generator 那是什麼？/</id>
    <published>2017-06-18T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:54.835Z</updated>
    
    <content type="html"><![CDATA[<p>在談到 coroutine 之前，先來暸解一下緣起好了</p><p>首先，我們來談談什麼是異步？</p><a id="more"></a><p>在現在的程式語言中，一直都有想做到異步、平行的需求，以減少 CPU 停下來等 IO 的時間。</p><p>目前有的解決方案，如 javascript 是直接對於會遇到 io 的程式碼直接跳過不執行，等到程式有空去執行 IO 的部分才會去處理。</p><p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.readFile(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div></pre></td></tr></table></figure></p><p>以上述的例子來說，當中的 <code>readFile</code> 是一個異步的函數，當下不會執行，只會將你寫的 callback 函數註冊起來，等到有空的時候再去呼叫你寫的 callback</p><p>因此上述 console.log 的順序會是 ‘hello’, ‘world’</p><p>雖然執行順序跟閱讀的順序不一樣，但確實可以節省 CPU 等待 IO 的時間。這麼方便的東西，一般開發者其實無法寫出異步的函數，只能用系統提供的異步函數。</p><h2 id="Coroutine-是什麼？"><a href="#Coroutine-是什麼？" class="headerlink" title="Coroutine 是什麼？"></a>Coroutine 是什麼？</h2><p>前面  readFile 的例子，幾乎就只有系統提供的函數能變成異步的，要是使用者也想寫出這樣的東西在以往幾乎是不可行。而 php, python 等語言借鑒了其他語言中 coroutine 的概念，逐步實現了使用者自行撰寫異步函數的功能。</p><p>先列出要實現異步功能的需求：</p><ol><li>讓出函數的執行權</li><li>繼續執行未完成的部分</li></ol><p>而在其他有實現 coroutine 功能的語言裡面，多半以 <code>yield</code> 這樣的語法來讓出函數的執行權</p><p>例如 :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 自我感覺<span class="title">IO</span>很吃重的函數<span class="params">($callback)</span> </span>&#123;</div><div class="line">     <span class="keyword">yield</span>; <span class="comment">// 這裡先讓出執行權，之後的程式碼等有空再執行</span></div><div class="line">     <span class="keyword">print</span>(<span class="string">"start to read data"</span>);</div><div class="line">     $data = do_somthing_io(); <span class="comment">// 很吃重的工作</span></div><div class="line">     $callback($data); <span class="comment">// 取得資料後送給你註冊的 callback</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述的程式碼在第一次呼叫的時候什麼事都不會發生，因為 yield 這行就讓出執行權了。</p><p>但是 yield 跟 return 最大的不同點在於 yield 會紀錄函數執行到一半的狀態，你可以用某些語法繼續執行，以下以 resume 函數當作繼續執行的功能</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $執行到一半的函數 = 自我感覺IO很吃重的函數();</div><div class="line"><span class="keyword">print</span>(<span class="string">"hello"</span>);</div><div class="line">resume($執行到一半的函數)</div></pre></td></tr></table></figure><p>以上的範例是說明 自我感覺IO很吃重的函數() 會回傳一個執行到 yield 的紀錄，讓你可以用 consume 函數繼續執行它。</p><p>而上面的例子就是認為在 <code>print(“hello”)</code>  才有空去執行剩餘 IO 吃重的部分。</p><p>如果有螢幕的話，在螢幕上顯示文字的順序大概會是這樣 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello</div><div class="line">start to read data</div></pre></td></tr></table></figure><p>基本所謂的 coroutine 大概是這樣，與前面 js 的 readFile 的差異在於繼續執行的時間點是由自己呼叫 consume() 去控制，而非系統自己找時間點去執行</p><p>附帶一提，這裡說明的 coroutine 還差了那麼一點點，真正的 coroutine 是可以指定 yield 之後可以跳到哪裡。但為了說明方便，這裡假定會跳回呼叫者處。</p><h2 id="Generator-又是什麼"><a href="#Generator-又是什麼" class="headerlink" title="Generator 又是什麼"></a>Generator 又是什麼</h2><p>提到 php, python 實作 coroutine 的時候一定又會提及 Generator</p><p>其實 Generator 是融合了 iterator 跟 coroutine 兩種特性的東西，在 php 裡面實作了 Iterator 介面，便能夠讓物件被 <code>foreach</code> 語法拿來迭代，類似這樣的物件便可以被稱作 iterator 迭代器。</p><p>在 php 裡面也是可以使用 yield 的，如果我們對一個函數 yield 去 var_dump 觀察一下可以發現會得到一個名為 Generator 的物件。</p><p>這個 Generator 其實也是前面提到的 <code>執行到一半的函式</code> 可以讓我們透過某種方法繼續執行下去。</p><p>而 php 的 Generator 是以實作了 Iterator 的作法，讓我們使用裡面的 next() 方法去執行下一步。</p><p>這樣融合迭代器的作法，又額外了多解決了一些記憶體消耗的情境。</p><p>以產生 1000 個奇數為例，會試做以下的函數 :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">odds</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $odds = [];</div><div class="line">    <span class="keyword">for</span> ($odd = <span class="number">0</span>; count($odds) &lt; <span class="number">1000</span>; $odd++) &#123;</div><div class="line">        <span class="keyword">if</span> ($odd % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            $odds[] = $odd;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $odds;</div></pre></td></tr></table></figure><p>在這裡會生成塞 1000 個奇數的陣列，當這個陣列小的時候還不會覺得有多大的問題。但是數量一多，然後可能要做的事情只是 print 出數字，整個記憶體就浪費了。</p><p>我們可以將上面例子稍微改寫一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">odds</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>;; $i++) &#123;</div><div class="line">        <span class="keyword">if</span> ($i % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">yield</span> $i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span> (odds() <span class="keyword">as</span> $i =&gt; $value) &#123;</div><div class="line">    <span class="keyword">if</span> ($i == <span class="number">1000</span>) <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">echo</span> $value . <span class="string">"\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>這裡的 odds()  是用個無窮迴圈來產出所有奇數，但是根本不用怕會被無窮迴圈卡在這個函數裡，因為每產出一個奇數，便會讓出執行權。</p><p>而這裡有個小小的不同，就是在 yield 的後方可以加上類似回傳值的東西。在 Generator 裏可以利用 current() 方法把這個回傳值給取出來。</p><p>如果是跑在 foreach 迴圈裡也不用想太多，迴圈會自己幫忙帶進來。</p><p>以這個改寫的例子來說，所佔用的記憶體只有一個變數 $i ，然後利用 coroutine 會記住上次執行狀態的特性，就能夠減少其他的記憶體消耗了。</p><p>最後稍微提一下，在 php 裡是不能夠自己去 new 一個 Generator 的唷，因為這個特殊的迭代器要記住當下的執行狀態，所以都是以 C 去寫成的，所以目前只能靠 yield 去產生 Generator 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在談到 coroutine 之前，先來暸解一下緣起好了&lt;/p&gt;
&lt;p&gt;首先，我們來談談什麼是異步？&lt;/p&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="程式設計" scheme="http://blog.unisharp.com/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>用 CSS 打造 UniSharp-Logo</title>
    <link href="http://blog.unisharp.com/2017/06/18/%E7%94%A8%20CSS%20%E6%89%93%E9%80%A0%20UniSharp-Logo/"/>
    <id>http://blog.unisharp.com/2017/06/18/用 CSS 打造 UniSharp-Logo/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-12-28T09:16:55.523Z</updated>
    
    <content type="html"><![CDATA[<p>今天我們要帶大家用 CSS 來畫 UniSharp 的 LOGO</p><a id="more"></a><p>首先我們先分析 LOGO，可以分成兩組，每組是一個字母 <code>U</code> 加一個 Bar</p><p>分析完了之後，就可以把 HTML 設計出來了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.logo</div><div class="line">  .wrapper</div><div class="line">    .u.left</div><div class="line">      .bar</div><div class="line">    .u.right</div><div class="line">      .bar</div></pre></td></tr></table></figure><p>再來就是今天的重頭戲，要來用 CSS 畫畫了！</p><p>先畫出字母 <code>U</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.u</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">47px</span>;</div><div class="line"></div><div class="line">  &amp;, &amp;:before &#123;</div><div class="line">    <span class="selector-tag">width</span>: 172<span class="selector-tag">px</span>;</div><div class="line">    <span class="selector-tag">border-style</span>: <span class="selector-tag">solid</span>;</div><div class="line">    <span class="selector-tag">border-color</span>: <span class="selector-tag">white</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">height</span>: <span class="number">117px</span>;</div><div class="line">    <span class="attribute">border-width</span>: <span class="number">47px</span>;</div><div class="line">    <span class="attribute">border-top-width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">47px</span>;</div><div class="line">    <span class="attribute">bottom</span>: -<span class="number">115px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">100px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/7kxgESN.png" alt=""></p><p>再把兩個 <code>U</code> 轉一下並組合起來，歐～已經有個樣子了唷！</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.u</span> &#123;</div><div class="line">  &amp;.left &#123;</div><div class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line">    <span class="selector-tag">left</span>: 60<span class="selector-tag">px</span>;</div><div class="line">    <span class="selector-tag">top</span>: 40<span class="selector-tag">px</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;<span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-135deg);</div><div class="line">    <span class="attribute">left</span>: <span class="number">167px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/ItsYpp7.png" alt=""></p><p>然後把兩個 bar 放上去</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">93px</span>;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(90deg) <span class="built_in">skewX</span>(10deg);</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">31px</span>;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">24px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/GDSi6SS.png" alt=""></p><p>再微調一下角度，大功告成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-7deg) <span class="built_in">skewX</span>(-1deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/RAn2y2j.png" alt=""></p><p><a href="https://github.com/UniSharp/logo" target="_blank" rel="external">完整的程式碼請點我</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我們要帶大家用 CSS 來畫 UniSharp 的 LOGO&lt;/p&gt;
    
    </summary>
    
      <category term="開源分享" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="css" scheme="http://blog.unisharp.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>問題背後的問題</title>
    <link href="http://blog.unisharp.com/2017/06/14/%E5%95%8F%E9%A1%8C%E8%83%8C%E5%BE%8C%E7%9A%84%E5%95%8F%E9%A1%8C/"/>
    <id>http://blog.unisharp.com/2017/06/14/問題背後的問題/</id>
    <published>2017-06-14T00:00:00.000Z</published>
    <updated>2017-12-28T09:16:59.736Z</updated>
    
    <content type="html"><![CDATA[<p>在我還是小菜鳥初進職場時，當時的前輩跟小菜鳥們分享了這本書 - 問題背後的問題。工作幾年後，再回頭讀了一遍，對照當時的懞懂，此刻，對於書中的文字感觸良多。<br><a id="more"></a><br>這次，不單是再次謹惕自己，對任何事都要更加積極，也想在接下來跟大家分享這本好書。</p><pre><code>本書作者：約翰・米勒。 這本書 2004 年出版，直到 2017 年的現在，無論在職場或是校園依舊受用。</code></pre><p>「個人擔當」是本書的核心。</p><p>常在生活中聽到：「不是我的錯」，「不干我的事」或「不是我的問題」，這些話我們總是不經意的說出口，把問題像打太極般地往外推開，米勒說，這些都暴露出個人缺乏責任感，他甚至直接指出，當今許多問題的核心在於「問題背後的問題」（The Question Behind the Question, QBQ）。</p><blockquote><p>米勒指出：把腦筋轉個一百八十度，多問些與個人擔當有關的周題，才是改善組織、改進個人生活，最有力也最有效的方法。</p></blockquote><p>於是他提出了三個 QBQ 的原則：</p><ol><li>以「什麼？」或「該如何？」這兩句話來發問，而不是「為什麼」「什麼時候」或「誰」。</li><li>包含「我」字在內，而不是「他們」「我們」「你」或「你們」。</li><li>將重點放在行動上。</li></ol><p>舉例：</p><ol><li>主管問：為什麼我的員工都這麼不積極？ &lt;-&gt; QBQ：我該如何更了解我的員工？該做些什麼使他們對公司更有向心力呢？</li><li>客服問：為什麼顧客總是打來問電器怎麼操作？ &lt;-&gt; QBQ：是不是我們的使用手冊不夠清楚？我該如何讓顧客更容易對產品上手呢？</li><li>需求者問：他們到底什麼時候才可以把我的需求做好？ &lt;-&gt; QBQ：我該如何提供更有效的資訊，使需求開發流程更順利、更有效率呢？</li></ol><p>做對的事，才能享受對的人生；問對的問題，才能有效的解決問題。</p><p>我們在面對屬於集體的問題時，要當成是自己的問題，以「我」當出發點來思考解決的方法。我們無法改變其他人，但卻能改變自己，進而影響身邊的人，所以不要輕忽了自己的能力。遇到問題的當下，千萬不要拖延，不要嗷嗷待哺般地等著其他人來給你答案，或是期待有誰會幫你做好你可以自行處理的工作，一旦有了「為什麼？、什麼時候？、是誰？」的想法，不論對其他人或是對自己，就是推託的開始。越接近交付日期，壓力越大，那何不一開始就想辦法解決呢？所以面對問題後，我們要將『重點放在行動上』，任何事情請立即付諸行動去思考、去解決它！</p><p>我們透過不斷地解決問題，從中吸取經驗、記取教訓，使自己成長、進步，讓自己面對問題的態度、處理方式、思考，更加成熟、更加縝密，而這一切都是靠著反覆訓練思考 QBQ 而來。</p><p>面對問題、付諸行動，不要再拖了，加油！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我還是小菜鳥初進職場時，當時的前輩跟小菜鳥們分享了這本書 - 問題背後的問題。工作幾年後，再回頭讀了一遍，對照當時的懞懂，此刻，對於書中的文字感觸良多。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
</feed>
