<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UniSharp blog</title>
  <subtitle>網站建置與管理經營的大平台</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.unisharp.com/"/>
  <updated>2017-08-17T08:58:19.000Z</updated>
  <id>http://blog.unisharp.com/</id>
  
  <author>
    <name>Mr.UniSharp</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>設計專欄：都市上班族養狗攻略，專屬宅毛孩散步 APP 概念圖</title>
    <link href="http://blog.unisharp.com/2018/01/08/%E8%A8%AD%E8%A8%88%E5%B0%88%E6%AC%84%EF%BC%9A%E9%83%BD%E5%B8%82%E4%B8%8A%E7%8F%AD%E6%97%8F%E9%A4%8A%E7%8B%97%E6%94%BB%E7%95%A5%EF%BC%8C%E5%B0%88%E5%B1%AC%E5%AE%85%E6%AF%9B%E5%AD%A9%E6%95%A3%E6%AD%A5%20APP%20%E6%A6%82%E5%BF%B5%E5%9C%96/"/>
    <id>http://blog.unisharp.com/2018/01/08/設計專欄：都市上班族養狗攻略，專屬宅毛孩散步 APP 概念圖/</id>
    <published>2018-01-07T16:00:00.000Z</published>
    <updated>2017-08-17T08:58:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>這次的設計主題是關於都市中的毛孩(寵物)因飼主工作繁忙、生活節奏快速而忽略照顧散步，所以創作了幾個概念性的介面，解決宅毛孩運動不足、憂鬱等問題。</p>
<a id="more"></a>
<h3 id="設計靈感來源："><a href="#設計靈感來源：" class="headerlink" title="設計靈感來源："></a>設計靈感來源：</h3><p>根據日本寵物食品協會預估，現在寵物的數量竟然比 14 歲以下孩童多出 400 萬，反映寵物逐漸被當成家人的現象。</p>
<p>但在台灣養寵物大部分都是上班族，經常工作繁忙，除了用自動餵食器滿足生理需求之外，毛孩的心理需求、渴望的關懷如何兼顧？想到毛孩在空蕩的房子等待，不經會感到悲從中來的孤寂感。</p>
<p>你，忍心讓毛孩獨自一人獨守空閨嗎？ＸＤ</p>
<p>如果有一種遛寵物的 app，搜尋附近有空閒能遛寵物的人，稱之「遛寵人 ( Pet Walker )」，在指定的公園遛，飼主除了能看到即時散步路線圖，還能透過視訊，觀察毛孩與 Pet Walker 的一舉一動，app 也提供了公園的即時天氣概況及壅擠程度，選擇最適合的散步路線，不僅能讓毛孩身心健康也能抵抗憂鬱。</p>
<h3 id="介面成果圖："><a href="#介面成果圖：" class="headerlink" title="介面成果圖："></a>介面成果圖：</h3><p><img src="http://i.imgur.com/EE7Gwwg.png" alt="毛孩散步 APP"></p>
<h3 id="設計理念："><a href="#設計理念：" class="headerlink" title="設計理念："></a>設計理念：</h3><p>採用暖色調為基底，搭配不規則的曲線，詮釋出愛毛孩的柔軟及溫柔</p>
<h3 id="設計過程："><a href="#設計過程：" class="headerlink" title="設計過程："></a>設計過程：</h3><p>原先採用電繪方式呈現主人與毛孩的互動，但效果並沒有讓人感受到 “真實”的情感，如果整個風格使用電繪，雖然可愛，但就像是回到以前養番薯寶寶的時代，玩久了，會膩。</p>
<p><img src="http://i.imgur.com/WPab5hd.png =300x" alt="毛孩散步 APP"></p>
<p>幾番思考後，挑選了幾張足以傳達情緒和情感的照片，以真實人與毛孩相處的圖片取代，也提升了整體介面的真實一致性。</p>
<h3 id="介面設計圖"><a href="#介面設計圖" class="headerlink" title="介面設計圖"></a>介面設計圖</h3><h4 id="搜尋介面"><a href="#搜尋介面" class="headerlink" title="搜尋介面"></a>搜尋介面</h4><p><img src="http://i.imgur.com/nOtfptX.jpg =300x" alt="毛孩散步 APP 搜尋"></p>
<p><img style="float: right;" src="whatever.jpg"></p>
<p>介面一開始輸入毛孩當前地址，找尋附近是否有 Pet Walker。上方的 range input 區間線，是可選擇預期的價格區間，顏色從淺色到深色代表價格由低到高。移標採用狗腳掌為亮點。</p>
<p>點擊地圖中價格可即時預覽 Pet Walker 介紹，Pet Walker 以真實影像取代電繪更具真實感。且用狗骨頭呈現評價，取代常見的星星，符合整體寵物設計概念。</p>
<h4 id="搜尋遛狗地點即時概況"><a href="#搜尋遛狗地點即時概況" class="headerlink" title="搜尋遛狗地點即時概況"></a>搜尋遛狗地點即時概況</h4><p><img src="http://i.imgur.com/xFxz3az.jpg =300x" alt="毛孩散步 APP 搜尋公園"></p>
<p>除了搜尋 Pet Walker 之外，也可搜尋遛狗地點，並且顯示即時天氣動態、結合 Google Map 的擁擠程度預測，以及當下多少隻貓狗在該地區活動，不管是活潑或是孤僻的毛孩，都可以透過該資訊，選對毛孩最好的地點。</p>
<h4 id="查看-Pet-Walker-詳細資訊"><a href="#查看-Pet-Walker-詳細資訊" class="headerlink" title="查看 Pet Walker 詳細資訊"></a>查看 Pet Walker 詳細資訊</h4><p><img src="http://i.imgur.com/VcwCjOz.png =300x" alt="毛孩散步 APP walker 詳細資訊"></p>
<p>查看 Pet Walker 詳細資訊，上方地圖為提供的遛狗路線，所花費時間，以及提供娛樂設備（球、飛盤）等。</p>
<h4 id="查看毛孩散步即時動態"><a href="#查看毛孩散步即時動態" class="headerlink" title="查看毛孩散步即時動態"></a>查看毛孩散步即時動態</h4><p><img src="http://i.imgur.com/1eWDoxS.png =300x" alt="毛孩散步 APP 散步即時動態"></p>
<p>當 Pet Walker 開始遛毛孩，畫面就會開始顯示毛孩當前位置，下方顯示所經過詳細路徑，也可透過視訊即時通話，及時給予毛孩互動。</p>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>以上是本月設計專欄的遛寵物的 App 介面概念圖。寵物需求一多，商機就會出現，一個一個創意想法都漸漸付諸實行在日常生活之中。在國外已經有類似概念的產品出現，或許台灣也可以做，但需配合當地規範產生一整個系統的配套措施，如果你有任何其他的想法或是更棒的解決方案，歡迎在下方留言喔 ^.&lt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這次的設計主題是關於都市中的毛孩(寵物)因飼主工作繁忙、生活節奏快速而忽略照顧散步，所以創作了幾個概念性的介面，解決宅毛孩運動不足、憂鬱等問題。&lt;/p&gt;
    
    </summary>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="設計專欄" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88%E5%B0%88%E6%AC%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 學習筆記（一）</title>
    <link href="http://blog.unisharp.com/2017/07/31/Nginx%20%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://blog.unisharp.com/2017/07/31/Nginx 學習筆記（一）/</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文章會介紹 Nginx 的基本概念以及如何在 Max 上安裝 Nginx，適合第一次接觸 Nginx 的讀者閱讀，將會了解到</p>
<ul>
<li>如何在 Mac 安裝 Nginx</li>
<li>Nginx 的基本概念</li>
<li>如何設定 virtual host (多個 domain name 對到同一個 IP)</li>
</ul>
<p>本文章主要是參考資料翻譯及整理而來，如果是喜歡閱讀英文或是更完整資訊的朋友，可以依照參考資料的順序閱讀</p>
<a id="more"></a>
<h2 id="Nginx-安裝"><a href="#Nginx-安裝" class="headerlink" title="Nginx 安裝"></a>Nginx 安裝</h2><h3 id="安裝-Homebrew"><a href="#安裝-Homebrew" class="headerlink" title="安裝 Homebrew"></a>安裝 Homebrew</h3><p>Homebrew 是 Mac 上的套件管理工具，以下的軟體都會透過 Homebrew 來安裝<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div><div class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</div></pre></td></tr></table></figure></p>
<p>將 Homebrew 安裝 tool 的路徑加入環境變數<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>#</div><div class="line"><span class="meta">#</span> ~/.bash_profile</div><div class="line"><span class="meta">#</span>#</div><div class="line">export PATH="/usr/local/bin:$PATH"</div><div class="line">export PATH="/usr/local/sbin:$PATH"</div><div class="line"></div><div class="line"><span class="meta">#</span>#</div><div class="line"><span class="meta">#</span> ~/.zshrc</div><div class="line"><span class="meta">#</span>#</div><div class="line">export PATH="/usr/local/bin:$PATH"</div><div class="line">export PATH="/usr/local/sbin:$PATH"</div></pre></td></tr></table></figure></p>
<h3 id="安裝-Nginx"><a href="#安裝-Nginx" class="headerlink" title="安裝 Nginx"></a>安裝 Nginx</h3><p>透過 Homebrew 安裝 Nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx</div></pre></td></tr></table></figure></p>
<p>預設開機啟動 Nginx，將 plist 檔複製至 Launch Daemon/Agent<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 開機後，以一般使用者身份啟動 Nginx</div><div class="line">cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/</div><div class="line"></div><div class="line"><span class="meta">#</span> 開機後，要以 root 身份啟動 Nginx</div><div class="line">sudo cp /usr/local/opt/nginx/homebrew.mxcl.nginx.plist /Library/LaunchDaemons/</div></pre></td></tr></table></figure></p>
<p>啟動 Nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 啟動 Nginx</div><div class="line">nginx </div><div class="line"></div><div class="line"><span class="meta">#</span> 如果設定檔牽涉 root 權限，就要以 root 啟動 nginx</div><div class="line">sudo nginx</div></pre></td></tr></table></figure></p>
<p>一旦 Nginx 啟動後，需要透過 <code>-s</code> 參數執行動作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s signal</div></pre></td></tr></table></figure></p>
<p>signal 必須是以下幾種</p>
<table>
<thead>
<tr>
<th>訊號</th>
<th>意義</th>
</tr>
</thead>
<tbody>
<tr>
<td>stop</td>
<td>直接停止 Nginx</td>
</tr>
<tr>
<td>quit</td>
<td>等目前正在服務的 worker process 結束後，停止 Nginx</td>
</tr>
<tr>
<td>reload</td>
<td>重新載入設定檔，Nginx 依照新的設定產生新的 worker process，既有的 woker process 會在服務完既有的連線後停止，在重啟前可以用 <code>nginx -t</code> 檢驗語法是否正確</td>
</tr>
<tr>
<td>reopen</td>
<td>重新開啟 log 檔案</td>
</tr>
</tbody>
</table>
<h2 id="Nginx-基本概念"><a href="#Nginx-基本概念" class="headerlink" title="Nginx 基本概念"></a>Nginx 基本概念</h2><p>Nginx 是由一個主線程 (main process) 及多個工作線程 (worker processes)，主線成主要的功能是讀取及執行設定檔、維護工作線程，工作線程則是處理請求 (request)，Nginx 是事件驅動 (event-based) 和 OS-dependent，藉此達到有效的處理請求</p>
<h3 id="設定檔結構"><a href="#設定檔結構" class="headerlink" title="設定檔結構"></a>設定檔結構</h3><p>Nginx 組成的模組是由設定檔內的 directives 所控制，directives 可以分成 simple directives、block directives</p>
<ul>
<li>simple directives : 由名稱及參數組合而成，中間由空白鍵分割，分號結尾</li>
<li>block directives  : 由大括號<code>{}</code>表示起始跟結尾，中間可以包含其他 directives，被包含的 directives 被稱為內容 (context)</li>
</ul>
<p>設定檔中不屬於任何 block directives 的 directives 稱為 main context，<code>event</code> 和 <code>http</code> 是 main context，<code>server</code> 包含在 <code>http</code>，<code>location</code> 包含在 <code>server</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">worker_processes  1;  # main context, simple directive</div><div class="line"></div><div class="line">http &#123;                # block context</div><div class="line">    access_log /var/logs/access.log;    # context, simple directive</div><div class="line">    server &#123;</div><div class="line">        location &#123;</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="靜態檔案"><a href="#靜態檔案" class="headerlink" title="靜態檔案"></a>靜態檔案</h3><p>Nginx 可以根據 <code>location block</code> 將請求分別導向不同資料夾下的檔案，範例中的 <code>location / { ... }</code> 的 <code>/</code> 會去比對請求的 <code>URI</code>，若比對符合就會將 <code>URI</code> 加在 <code>root</code> 所定義的路徑後，回傳請求的檔案，而 <code>location /images/ {...}</code> 則會去比對 <code>/images/</code> 開頭的 <code>URI</code>，比對符合後，一樣會將 <code>URI</code> 加在 <code>root</code> 所定義的路徑</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /usr/local/etc/nginx.conf</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    keepalive_timeout  65;</div><div class="line">    </div><div class="line">    access_log  /usr/local/etc/nginx/logs/access.log;</div><div class="line">    error_log   /usr/local/etc/nginx/logs/error.log;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   /data/www;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        location /images/ &#123;</div><div class="line">            root   /data;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述設定黨範例: </p>
<ul>
<li><a href="http://localhost/test.html" target="_blank" rel="external">http://localhost/test.html</a> 對應 /data/www/test.html</li>
<li><a href="http://localhost/images/sample.jpg" target="_blank" rel="external">http://localhost/images/sample.jpg</a> 對應 /data/images/sample.jpg</li>
</ul>
<p>設定檔更新後，要重新載入設定檔<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx -s reload</div></pre></td></tr></table></figure></p>
<p>範例中的 <code>http://localhost/images/sample.jpg</code> 同時符合 <code>location / {...}</code>、<code>location /images/ {...}</code>，當請求的 <code>URI</code> 符合兩個以上的 <code>location directive</code> 時，會優先選取比對條件較長的 (<code>/images/</code> 比 <code>/</code> 長)，所以一般會將越長的比對條件寫在下面，以方便閱讀，如果都找不到符合的檔案時，Nginx 會回傳 404</p>
<p>:::info<br>當 Nginx 的行為不符合預期時，可以多檢視<code>access_log</code>、<code>error_log</code>定義的 log 檔案<br>:::</p>
<h2 id="如何設定-virtual-host"><a href="#如何設定-virtual-host" class="headerlink" title="如何設定 virtual host"></a>如何設定 virtual host</h2><p>virtual host 是將多個 domain name 指向同一個 IP (即同一台伺服器)，Nginx 會依據<code>server block</code>的<code>port</code>、<code>server_name</code>決定該<code>server block</code>處理那個種類 (domain name) 的請求</p>
<h3 id="建立各專案的根目錄"><a href="#建立各專案的根目錄" class="headerlink" title="建立各專案的根目錄"></a>建立各專案的根目錄</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /your/project/name1/html</div><div class="line">mkdir -p /your/project/name2/html</div></pre></td></tr></table></figure>
<p>:::info<br>如果是在 Linux 系統下，可能會要使用<code>chown</code>,<code>chmod</code>對檔案做權限設定，允許<code>www-data</code>使用者具有<code>rwx</code>的權限<br>:::</p>
<h3 id="建立範例檔案"><a href="#建立範例檔案" class="headerlink" title="建立範例檔案"></a>建立範例檔案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># /your/project/name1/html/index.html</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Welcome name1 !&lt;/h1&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># /your/project/name2/html/index.html</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;Welcome name2 !&lt;/h1&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="對每個-domain-建立-server-block"><a href="#對每個-domain-建立-server-block" class="headerlink" title="對每個 domain 建立 server block"></a>對每個 domain 建立 <code>server block</code></h3><p>將每個 <code>server block</code> 設定檔儲存在 <code>/usr/local/etc/nginx/servers</code>，<code>nginx.conf</code> 預設會將 <code>servers</code> 資料夾下的檔案載入</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /usr/local/etc/nginx/servers/project_name1</div><div class="line">server &#123;</div><div class="line">    # 監聽的 port</div><div class="line">    listen 80;        </div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    # 起始資料夾位置</div><div class="line">    root /your/project/name1/html;    </div><div class="line"></div><div class="line">    # 當找不到符合的檔案後，會加入 index.html，再比對一次</div><div class="line">    index index.html;                 </div><div class="line"></div><div class="line">    # client 端輸入的 domain name</div><div class="line">    server_name project_name1.com;    </div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        # 驗證檔案 $uri、資料夾 $uri/ 是否存在，都不存在則回傳 404</div><div class="line">        try_files $uri $uri/ =404;    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /usr/local/etc/nginx/servers/project_name2</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    listen [::]:80;</div><div class="line"></div><div class="line">    root /your/project/name2/html;</div><div class="line"></div><div class="line">    index index.html;</div><div class="line"></div><div class="line">    server_name project_name2.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        try_files $uri $uri/ =404;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>:::info<br>Mac 的 *.conf 設定檔慣例上是放在 servers 資料夾下，如果是 Ubuntu 會建立 sites-available 及 sites-enable 兩個資料夾，將設定檔放在 sites-available 資料夾下，然後將要載入的設定檔以連結 (<code>ln -s</code>) 的方式連結至 sites-enable 資料夾<br>:::</p>
<h3 id="設定本機端的-DNS"><a href="#設定本機端的-DNS" class="headerlink" title="設定本機端的 DNS"></a>設定本機端的 DNS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> /etc/hosts</div><div class="line">127.0.0.1       project_name1.com</div><div class="line">127.0.0.1       project_name2.com</div></pre></td></tr></table></figure>
<p>設定完成後，重啟 Nginx，在網頁上輸入 <a href="http://project_name1.com" target="_blank" rel="external">http://project_name1.com</a> 即可看到建立好的範例頁了</p>
<p>:::info<br>這邊先將測試的 Domain Name 導向 127.0.0.1，實際情況會由 DNS 導向實際對外開放的 Nginx server<br>:::</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><ul>
<li><a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="external">Beginner’s Guide</a></li>
<li><a href="https://gist.github.com/dtomasi/ab76d14338db82ec24a1fc137caff75b" target="_blank" rel="external">Install NGINX with PHP7-FPM on Mac OS X with Homebrew</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-14-04-lts" target="_blank" rel="external">How To Set Up Nginx Server Blocks (Virtual Hosts) on Ubuntu 14.04 LTS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章會介紹 Nginx 的基本概念以及如何在 Max 上安裝 Nginx，適合第一次接觸 Nginx 的讀者閱讀，將會了解到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何在 Mac 安裝 Nginx&lt;/li&gt;
&lt;li&gt;Nginx 的基本概念&lt;/li&gt;
&lt;li&gt;如何設定 virtual host (多個 domain name 對到同一個 IP)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文章主要是參考資料翻譯及整理而來，如果是喜歡閱讀英文或是更完整資訊的朋友，可以依照參考資料的順序閱讀&lt;/p&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="server" scheme="http://blog.unisharp.com/tags/server/"/>
    
      <category term="nginx" scheme="http://blog.unisharp.com/tags/nginx/"/>
    
      <category term="筆記隨筆" scheme="http://blog.unisharp.com/tags/%E7%AD%86%E8%A8%98%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>用 Vue.js 打造 Binary Clock</title>
    <link href="http://blog.unisharp.com/2017/07/12/%E7%94%A8%20Vue.js%20%E6%89%93%E9%80%A0%20Binary%20Clock/"/>
    <id>http://blog.unisharp.com/2017/07/12/用 Vue.js 打造 Binary Clock/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>數字時鐘是不是很膩了？第一次看到 Binary Clock 是不是有一種好想擁有的感覺？</p>
<p>現在，我們就來瞭解 &amp; 用 vue.js 動手做做看吧！</p>
<a id="more"></a>
<p><strong>什麼是 Binary ? 什麼又是 Binary Clock ?</strong> 來說說吧：</p>
<p>Binary 中文是二進位。平常我們看數字 5 其實是十進位，轉成二進位要看成 0101</p>
<p>假設現在是 19:56:16，轉成二進位是 0001 1001 : 0101 0110 : 0001 0110</p>
<p>那麼 Binary Clock 會對應二進位 1 燈亮、 0 燈不亮。</p>
<iframe width="100%" height="500" src="https://clock.sasaya.me/" frameborder="0"></iframe>

<h2 id="Pre-requirements"><a href="#Pre-requirements" class="headerlink" title="Pre requirements"></a>Pre requirements</h2><p>開始之前，我們有些前置作業要完成，要把環境架起來</p>
<p>Required:</p>
<ul>
<li>Node.js (&gt;=4.x, 6.x preferred)</li>
<li>npm version 3+</li>
<li>Git.</li>
</ul>
<p>Installation:</p>
<p>安裝 vue-cli <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">可參考</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g vue-cli</div></pre></td></tr></table></figure>
<p>建立專案</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ vue init webpack &lt;project-name&gt;</div><div class="line"></div><div class="line">  ? Project name &lt;project-name&gt;</div><div class="line">  ? Project description &lt;description&gt;</div><div class="line">  ? Author &lt;auther&gt;</div><div class="line">  ? Vue build standalone</div><div class="line">  ? Install vue-router? No</div><div class="line">  ? Use ESLint to lint your code? No</div><div class="line">  ? Setup unit tests with Karma + Mocha? No</div><div class="line">  ? Setup e2e tests with Nightwatch? No</div><div class="line"></div><div class="line">   vue-cli · Generated &quot;&lt;project-name&gt;&quot;.</div><div class="line"></div><div class="line">   To get started:</div><div class="line">     // 進入專案</div><div class="line">     cd &lt;project-name&gt;</div><div class="line">     // 初始專案</div><div class="line">     npm install</div><div class="line">     // 啟動專案</div><div class="line">     npm run dev</div><div class="line"></div><div class="line">   Documentation can be found at https://vuejs-templates.github.io/webpack</div></pre></td></tr></table></figure>
<p>前往 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 看到大大的 V 就表示成功了</p>
<h2 id="Implement"><a href="#Implement" class="headerlink" title="Implement"></a>Implement</h2><p>首先，建立 /src/components/Light.vue。我們需要一顆燈的元件，它的行為只有亮或暗，而且我們要從外部給予亮或暗的指令。</p>
<ul>
<li>拉出一個燈，並且給予 on 的參數</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;light&quot; :class=&quot;&#123; on: on &#125;&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<ul>
<li>透過 props 屬性從父元件傳入 0/1 布林值進來</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  export default &#123;</div><div class="line">    props: &#123;</div><div class="line">      on: &#123;</div><div class="line">        type: Boolean,</div><div class="line">        required: true</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>設定樣式（發揮你的設計天份吧）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">  .light &#123;</div><div class="line">    background-color: #9da0a4;</div><div class="line">    width: 70px;</div><div class="line">    height: 70px;</div><div class="line">    margin-top: 8px;</div><div class="line">    margin-bottom: 8px;</div><div class="line">    margin-left: 8px;</div><div class="line">    border-radius: 5px;</div><div class="line">  &#125;</div><div class="line">  .light.on &#123;</div><div class="line">    background-color: #333;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>接著，建立 /src/components/Digit.vue。我們以四顆燈為一組，需要兩組形成兩位數的元件</p>
<ul>
<li>拉出兩位數的元件，每位數是由是四個 Light 元件組成，四顆燈分別表示二進位的四個 bit</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div class=&quot;binary-digit&quot;&gt;</div><div class="line">    &lt;div class=&quot;digit&quot;&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 8)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 4)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 2)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(tens &amp; 1)&quot;&gt;&lt;/light&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;digit&quot;&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 8)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 4)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 2)&quot;&gt;&lt;/light&gt;</div><div class="line">      &lt;light :on=&quot;!!(ones &amp; 1)&quot;&gt;&lt;/light&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<ul>
<li>同樣透過 props 屬性從父元件傳入兩位數進來，並且切成十位數字和個位數字，每位數字轉成二進位交給 Light 元件顯示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  import Light from &apos;./Light&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    props: &#123;</div><div class="line">      digit: &#123;</div><div class="line">        type: Number,</div><div class="line">        required: true</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">      Light</div><div class="line">    &#125;,</div><div class="line">    computed: &#123;</div><div class="line">      tens () &#123;</div><div class="line">        return Math.floor(this.digit / 10)</div><div class="line">      &#125;,</div><div class="line">      ones () &#123;</div><div class="line">        return this.digit % 10</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>樣式設定（發揮你的設計天份吧）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">  .binary-digit &#123;</div><div class="line">    display: flex;</div><div class="line">    flex-direction: row;</div><div class="line">  &#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>最後，修改 /src/App.vue 。我們要把時/分/秒的元件組成時鐘，並且每秒更動一次，完成 Binary Clock</p>
<ul>
<li>拉出時/分/秒的元件，是由三個 Digit 元件組成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;div class=&quot;binary-clock&quot;&gt;</div><div class="line">      &lt;digit :digit=&quot;hours&quot;&gt;&lt;/digit&gt;</div><div class="line">      &lt;digit :digit=&quot;minutes&quot;&gt;&lt;/digit&gt;</div><div class="line">      &lt;digit :digit=&quot;seconds&quot;&gt;&lt;/digit&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure>
<ul>
<li>利用 window.setInterval 每秒讀取一次時間，更新 hours（時）, minutes（分）, seconds（秒） 的值，交給 Digit 元件處理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  import Digit from &apos;./components/Digit&apos;</div><div class="line"></div><div class="line">  export default &#123;</div><div class="line">    name: &apos;app&apos;,</div><div class="line">    components: &#123;</div><div class="line">      Digit</div><div class="line">    &#125;,</div><div class="line">    data () &#123;</div><div class="line">      return &#123;</div><div class="line">        hours: 0,</div><div class="line">        minutes: 0,</div><div class="line">        seconds: 0,</div><div class="line">        now: new Date()</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted () &#123;</div><div class="line">      window.setInterval(() =&gt; &#123;</div><div class="line">        var now = new Date()</div><div class="line">        this.hours = now.getHours()</div><div class="line">        this.minutes = now.getMinutes()</div><div class="line">        this.seconds = now.getSeconds()</div><div class="line">      &#125;, 1000)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li>樣式設定（發揮你的設計天份吧）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;style scoped&gt;</div><div class="line">body &#123;</div><div class="line">  background-color: gray;</div><div class="line">&#125;</div><div class="line">#app &#123;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div><div class="line">.binary-clock &#123;</div><div class="line">  display: flex;</div><div class="line">  flex-direction: row;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p>結果會像這樣</p>
<p><img src="binary-clock.gif" alt=""></p>
<h1 id="作者時間"><a href="#作者時間" class="headerlink" title="作者時間"></a>作者時間</h1><p><a href="https://github.com/storyn26383/binary-clock" target="_blank" rel="external">想看完整原始碼</a> 在這裡在這裡 <a href="https://github.com/storyn26383/binary-clock" target="_blank" rel="external">toryn26383/binary-clock</a></p>
<p>因為習慣使用 pug &amp; sass 所以原始碼跟這裡的程式碼會有不一樣喔，這裡是為了簡化學習複雜度，使用 html &amp; css 教學</p>
<p>最後，歡迎大家按右下方的社群按鈕，貼上你的成果，把這一次的收穫分享出去喔（微笑）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;數字時鐘是不是很膩了？第一次看到 Binary Clock 是不是有一種好想擁有的感覺？&lt;/p&gt;
&lt;p&gt;現在，我們就來瞭解 &amp;amp; 用 vue.js 動手做做看吧！&lt;/p&gt;
    
    </summary>
    
      <category term="開源分享" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="Vuejs" scheme="http://blog.unisharp.com/tags/Vuejs/"/>
    
  </entry>
  
  <entry>
    <title>軟體開發的阿波羅13</title>
    <link href="http://blog.unisharp.com/2017/07/10/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E7%9A%84%E9%98%BF%E6%B3%A2%E7%BE%8513/"/>
    <id>http://blog.unisharp.com/2017/07/10/軟體開發的阿波羅13/</id>
    <published>2017-07-10T00:00:00.000Z</published>
    <updated>2017-07-25T06:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶然間，小 PM 聽到工程師葛格們正在討論一個很奇怪的名詞『code name』。在好奇心的驅使下，我這位小菜鳥也加入他們的討論，才知道他們正在為某個新的專案/產品取名字。<br><a id="more"></a><br>小 PM 一直覺得，專案/產品的名字不就依照用途來取嗎？像是我們自家公司的網站，不就應該叫做『UniSharp Website』之類的嗎？</p>
<p>經過小 PM 抽絲剝繭、認真學習與研究之後才發現，原來我認知的這個名字，是叫做產品名稱，或是專案的對外名稱；一般在開發這個專案/產品時，公司內部通常會為它取一個 code name，這個 code name 可能跟產品或是這個專案的目的、用途<strong>完全沒有關係</strong>。所以『UniSharp Website』的 code name 可能叫做『bigbang』 :P。</p>
<h2 id="為什麼要取-code-name-呢？"><a href="#為什麼要取-code-name-呢？" class="headerlink" title="為什麼要取 code name 呢？"></a>為什麼要取 code name 呢？</h2><h3 id="每個行業都有常用的專有名詞或術語，取一個該領域外的-code-name-可以讓專案更有辨識度。"><a href="#每個行業都有常用的專有名詞或術語，取一個該領域外的-code-name-可以讓專案更有辨識度。" class="headerlink" title="每個行業都有常用的專有名詞或術語，取一個該領域外的 code name 可以讓專案更有辨識度。"></a>每個行業都有常用的專有名詞或術語，取一個該領域外的 code name 可以讓專案更有辨識度。</h3><p>以我們的行業來舉例，若有個專案叫做『悠夏爾公告系統』，當我們在內部溝通，講到『公告』這個詞的時候，就會讓人混淆：到底是在講『悠夏爾公告系統』，還是一般的公告功能？<br>若把『悠夏爾公告系統』的 code name 取作 bigbang，我們提到『bigbang』，就很清楚的知道是在講某個專案/產品。</p>
<h3 id="維護專案的秘密，以混淆競爭對手"><a href="#維護專案的秘密，以混淆競爭對手" class="headerlink" title="維護專案的秘密，以混淆競爭對手"></a>維護專案的秘密，以混淆競爭對手</h3><p>當內部資料外流，而讓競爭對手看到『bigbang』這個詞的時候，他會不清楚這是什麼專案。<br>甚至有些情況會時常調整同一個專案的 code name，會更讓競爭對手摸不著頭緒。但必須小心服用此帖，別讓自己人也搞混了。</p>
<h3 id="讓產品名稱與開發時的名稱脫勾"><a href="#讓產品名稱與開發時的名稱脫勾" class="headerlink" title="讓產品名稱與開發時的名稱脫勾"></a>讓產品名稱與開發時的名稱脫勾</h3><p>開發人員可以專注在開發議題上，不需因為產品名稱的變動，而必須修改程式內的專案名稱來傷腦筋。<br>在開發過程中，可能因為 Pivot 而導致整個方向都變了，若一開始的方向是 ERP，code name 可能叫做 『UniSharp ERP』，但因為 Pivot的緣故，方向變成了交友平台（這也差太遠了吧….），這個時候專案代號若還是使用『UniSharp ERP』，就會變得很怪了。</p>
<h2 id="該怎麼取-code-name？"><a href="#該怎麼取-code-name？" class="headerlink" title="該怎麼取 code name？"></a>該怎麼取 code name？</h2><ul>
<li>易念（要好發音）、好拼，別太難。</li>
<li>簡短不要長，四、五個音就太長了。</li>
<li>最好要有一系列的相關名字</li>
<li>不要有諧音或不好的聯想</li>
</ul>
<h2 id="著名的-code-name"><a href="#著名的-code-name" class="headerlink" title="著名的 code name"></a>著名的 code name</h2><blockquote>
<p>Android 的甜點系列<br><a href="https://zh.wikipedia.org/wiki/Android歷史版本" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android歷史版本</a> (<a href="https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC</a>)</p>
<p>Debian 的玩具總動員系列<br><a href="https://zh.wikipedia.org/wiki/Debian#.E5.8F.91.E8.A1.8C.E7.89.88.E6.9C.AC" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Debian#.E5.8F.91.E8.A1.8C.E7.89.88.E6.9C.AC</a></p>
<p>Microsoft 的一大堆 code name<br><a href="https://en.wikipedia.org/wiki/List_of_Microsoft_codenames" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_Microsoft_codenames</a></p>
</blockquote>
<h2 id="總結："><a href="#總結：" class="headerlink" title="總結："></a>總結：</h2><p>取 code name 真的是一門學問，但在命名的同時，也讓苦悶的程式開發增添了一些有趣的元素進來 !?。<br>取一個屬於自己的 code name，有時候也是工程師大哥獨特的浪漫吧～～</p>
<p>如果是我取，可能會用一系列的名牌當 code name：</p>
<blockquote>
<p>Prada、Hermes、LV、Coach、Bally、Burberry、Chanel…</p>
</blockquote>
<p>最後才想到還沒講到標題提到的阿波羅13（Apollo 13），其實阿波羅13就是一個 code name 啊！我們常在戰爭電影裡面看到的什麼黑鷹計畫、藍象行動、綠狗任務，這都是他們的 code name 喔！（一整個亂取…XD）</p>
<h3 id="參考文獻："><a href="#參考文獻：" class="headerlink" title="參考文獻："></a>參考文獻：</h3><blockquote>
<p>維基百科 Code name<br><a href="https://en.wikipedia.org/wiki/Code_name" target="_blank" rel="external">https://en.wikipedia.org/wiki/Code_name</a><br><a href="https://zh.wikipedia.org/wiki/代号" target="_blank" rel="external">https://zh.wikipedia.org/wiki/代号</a></p>
<p>Project Code Name<br><a href="https://ingramchen.io/blog/2014/03/project-code-name.html" target="_blank" rel="external">https://ingramchen.io/blog/2014/03/project-code-name.html</a></p>
<p>怎麼幫專案取名字呢? - 喲哪桑 Speaking 之專案工作日誌<br><a href="http://jonathanspeaking.blogspot.tw/2013/04/blog-post.html" target="_blank" rel="external">http://jonathanspeaking.blogspot.tw/2013/04/blog-post.html</a></p>
<p>翻譯：專案之名有什麼意涵？(What’s in a Project Name?) by Jeff Atwood - 葉難<br><a href="http://yehnan.blogspot.tw/2010/08/whats-in-project-name-by-jeff-atwood.html" target="_blank" rel="external">http://yehnan.blogspot.tw/2010/08/whats-in-project-name-by-jeff-atwood.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然間，小 PM 聽到工程師葛格們正在討論一個很奇怪的名詞『code name』。在好奇心的驅使下，我這位小菜鳥也加入他們的討論，才知道他們正在為某個新的專案/產品取名字。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>暢銷的原理</title>
    <link href="http://blog.unisharp.com/2017/06/26/%E6%9A%A2%E9%8A%B7%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.unisharp.com/2017/06/26/暢銷的原理/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>有沒有想過為什麼超商以前沒有賣的咖啡現在卻會熱賣？</p>
<p>有沒有想過為什麼超商現在很少販售份量較大的微波熟食 / 甜點？進而改販售越來越小份的熟食 / 甜點？</p>
<a id="more"></a>
<p>今天想介紹大家一本書，除了說明以上的原因外，作者更想讓讀者創造出「暢銷」的產品！</p>
<p>當閱讀完第一章節作者對以上社會實際案例的解釋說明後，便可以知道暢銷商品的共同點就在於「潮流」和「隱藏需求」，未來若想要讓推出的新商品、服務熱銷，甚至是順利讓客戶採納提案、訂定公司目標計畫…等，關鍵就在於找出那些「潮流」和「隱藏需求」！</p>
<h3 id="至於如何尋找「潮流」和「隱藏需求」呢？"><a href="#至於如何尋找「潮流」和「隱藏需求」呢？" class="headerlink" title="至於如何尋找「潮流」和「隱藏需求」呢？"></a>至於如何尋找「潮流」和「隱藏需求」呢？</h3><p>作者在書中介紹了三個觀點「觀察」、「體會」、「注意」，希望讀者們能夠用心體現，找出平常生活中的各種「亮點」，並將它們用自己習慣的方式紀錄起來，以便未來方便取得使用。<br><br><br>在此小編偷偷透露內文中大家要找的應該是哪些「亮點」？<br><br>平常生活中有哪些是出現次數「較多的事物」？<br><br>有哪些是惱人的「麻煩事物」？<br><br>有哪些是超出我們認知範圍「比較怪的事物」？<br><br><br>書中舉了許多例子，其中包含作者觀察到生活裡多出了「自助烏龍麵」、「自助加油站」…等暢銷的自助商品服務造成了「自助潮流」!<br><br>越來越多「電子票證」、「電子錢包」讓我們幾乎不需要再擔心忘記帶現金的「無現金潮流」!</p>
<p>這些都是在我們日常生活中漸漸出現的「亮點」，而這些「亮點」是怎麼出現的呢？<br>作者進一步說明這些「亮點」基本上不出很重要的兩種「需求」：「巨觀」、「微觀」需求！</p>
<p><br></p>
<blockquote>
<p><strong>巨觀需求：</strong> 其實就是白話中的「潮流」，作者對潮流的定義就是「消費者的需求隨著社會變化而改變，因此傾向追求具備某種特色的商品與服務」，也就是整個社會追求的需求，反映出社會的主要變化。</p>
<p><strong>微觀需求：</strong> 相反於巨觀需求，微觀需求就是指每一個人的具體需求，通常是從觀察顧客行為，聽取顧客意見、貼近顧客進而得知。</p>
</blockquote>
<p><br></p>
<p>以上兩種需求作者統稱為「需求資訊」，在此作者也請我們注意顧客需求中常有的陷阱，若掉入的陷阱會有按照顧客需求開發新產品卻完全賣不出去的可能性！</p>
<p>作者舉了非常好的例子說明通常顧客需求的形式都是「我想要什麼」，但問題是究竟有「多少人」有這個需求？</p>
<p>所以我們需要憑藉潮流（巨觀需求）來判讀顧客的「微觀需求」，雖然聽起來很容易，卻很多企業都是掉入這樣的陷阱之中。</p>
<h3 id="用心「觀察」、「體會」、「注意」並找出巨觀-微觀需求就夠了嗎？"><a href="#用心「觀察」、「體會」、「注意」並找出巨觀-微觀需求就夠了嗎？" class="headerlink" title="用心「觀察」、「體會」、「注意」並找出巨觀 / 微觀需求就夠了嗎？"></a>用心「觀察」、「體會」、「注意」並找出巨觀 / 微觀需求就夠了嗎？</h3><p>除了找到以上的兩種需求後就可以創造出「暢銷」的產品與服務嗎？</p>
<p>作者更進一步介紹了兩個能讓我們精準打中顧客 / 客戶「痛點」並發想出新產品、新服務的方法：</p>
<p><br></p>
<blockquote>
<p><strong>「深入挖掘」 &amp; 「橫向連鎖」</strong></p>
</blockquote>
<p><br></p>
<p>其實說白了「深入挖掘」就是希望當我們了解顧客 / 客戶需求後別囫圇吞棗的直接開發產品、專案，而是抱持著「打破砂鍋問到底」的精忱，去挖掘更深入的需求資訊。</p>
<p>在此小編想到最有名的一個例子就是汽車大王亨利福特所說過的話：「如果問顧客他們想要什麼？他們肯定只會說需要一匹更快的馬。」</p>
<p>如果在汽車出現之前的時代企業家們沒有更「深入挖掘」顧客們的需求，或許大家只會去研究如何培育出跑更快的馬，而非了解顧客其實是需要「更快地到達某地」並創造出了汽車造福全世界！</p>
<p>至於「橫向連鎖」則是希望我們透過「深入挖掘」後找到滿足「痛點」的價值，找出也對此「價值」有著需求卻還尚未被滿足的市場，如此一來就會少了許多紅海競爭，進而開發出屬於自己的藍海！又或者說你可以為產品 / 服務擴大推廣範圍 / 目標族群，進而達成商業目標！</p>
<p>作者將「深入挖掘」&amp;「橫向連鎖」結合起來稱作「縱橫展開」，當然這方法除了可以達成商業目標外，更是讓我們培養「從主觀轉為客觀」的習慣。</p>
<p>我們常常發現一些難以暢銷的產品 / 服務，亦或是企業內部無法獲得批准的企劃，大多都是因為太過主觀而造成旁人難以理解並拒絕的原因。</p>
<p><br></p>
<blockquote>
<p><strong>「所以我們要「客觀化」，將需求資訊從衡展開，看得更深更遠，計畫才會更加客觀。而計劃愈客觀，成功機率就愈高。」-內文</strong></p>
</blockquote>
<p><br><br>以上就是整本書作者最想告訴讀者們的主軸，看到這邊或許會認為平常這些早就明白，亦會覺得這些都是很淺的知識？</p>
<p>但小編覺得學到最多的其實是從書中作者所舉的每一個實際案例，除了了解如何應用上述的方法 / 技巧外，在不同案例的情境下作者也教了許多深藏其中的 Know-How，期望讀著們能在自己所處的環境 / 挑戰下打造出傑出的產品 / 計畫，為公司 / 自己創造更多的價值！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有沒有想過為什麼超商以前沒有賣的咖啡現在卻會熱賣？&lt;/p&gt;
&lt;p&gt;有沒有想過為什麼超商現在很少販售份量較大的微波熟食 / 甜點？進而改販售越來越小份的熟食 / 甜點？&lt;/p&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>好書推薦 - 簡單思考</title>
    <link href="http://blog.unisharp.com/2017/06/26/%E5%A5%BD%E6%9B%B8%E6%8E%A8%E8%96%A6%20-%20%E7%B0%A1%E5%96%AE%E6%80%9D%E8%80%83/"/>
    <id>http://blog.unisharp.com/2017/06/26/好書推薦 - 簡單思考/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-08-25T09:28:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>多閱讀商場上各式各樣的產品開發經驗，並從中瞭解其成功與失敗背後的原因，思考成功產品為什麼會成功？失敗產品又會什麼無法被市場所接受呢？<a id="more"></a>對於規劃產品的PM來說，是很重要的一環。</p>
<p>今日要推薦的好書 - 簡單思考。「簡單思考」在講一個人人幾乎皆有使用、甚至工作和生活都離不開的「LINE」，是如何被打造出來的？為什麼 LINE 可以獲得巨大的成功？其背後的團隊究竟是如何創造出的呢？其公司的前任 CEO 森川亮，分享 LINE 從無到有的心路歷程與成功秘辛。</p>
<h3 id="認清商業本質"><a href="#認清商業本質" class="headerlink" title="認清商業本質"></a>認清商業本質</h3><blockquote>
<p>比起在競賽中勝出，更應該單純的為使用者著想，全心全意創造出真正滿足使用者的事物，最後自然會獲勝。</p>
<p>-節錄書中片段</p>
</blockquote>
<p>書中最先提出的便是商業的本質，有趣的是，這幾乎是商業人士皆知的理論 - 供需法則。作者認為，為寒冷的冬天提供溫暖的衣服、為無聊閒得發慌的人設計遊戲，最重要的事情正是因為瞭解人們真正的需求，並且愛護人們的心情。</p>
<p>普遍認為公司就是不斷推出熱門的產品並且從中獲得利益，但是將「錢」視為最終目標卻是非常危險的作法，因為使用者會馬上察覺並且離開，產品也終將走向沒落一路，因此，若想變成長銷產品，最重要的事情是滿足需求與看重使用者滿意度。</p>
<h3 id="以「人」為本"><a href="#以「人」為本" class="headerlink" title="以「人」為本"></a>以「人」為本</h3><blockquote>
<p>徵才戰略的基礎，就是打造一個讓員工可以盡情發揮能力的環境。<br>只要讓他們輕鬆愉快的工作，自然會產生聚集優秀人才的生態系統。</p>
</blockquote>
<p>想要打造成功的產品，團隊成員是關鍵中的關鍵，甚至已經決定了產品的成敗走向，因此，慎選人才並愛用人，才是公司挑選成員應遵循的原則。作者打破了位階制度做越久領越多的做法，有能力的人就該給予相對應的報酬，相對的，只因年資高卻毫無貢獻的職員，在考核時也給予相對應的調整，打造一家「鼓勵員工創造成績的公司」。</p>
<p>正因貫徹「以人為本」的理念，在公司中大家不需要察言觀色，有話直說的工作環境，讓開會時可以、也必須誠實地表達出自己的想法，若認為提案有需要改善的部分，皆可當面提出質疑，而背後的原因更呼了「應認清商業的本質」，因為比起得罪同事，成員更害怕得罪使用者。</p>
<h3 id="觀察並洞悉需求"><a href="#觀察並洞悉需求" class="headerlink" title="觀察並洞悉需求"></a>觀察並洞悉需求</h3><p>LINE 的成立剛好是在日本 311 大地震的時期，公司規劃推出適合智慧型手機的服務軟體，並成立了專案團隊。與此同時，雖然有市調結果，卻一直尚未決定方向。</p>
<p>在地震過後，許多人第一時間想盡方式聯繫親朋好友，想要報平安，卻苦無辦法，而出現眾人在公用電話亭前大排長龍的景象。（這景象也成為日後產品命名的靈感 - LINE）</p>
<p>看見這些畫面的成員，認為當下最迫切需要的功能，就是封閉式通訊，於是，團隊有了方向，秉持著最簡開發，在最短的速度內，將產品完成並推廣出去。</p>
<p>正因為察覺了使用者最需要的功能並且專注完成，LINE 才可以在最短的時間內被推出，並且成功打入市場。</p>
<h3 id="讓優秀的設計師主導產品"><a href="#讓優秀的設計師主導產品" class="headerlink" title="讓優秀的設計師主導產品"></a>讓優秀的設計師主導產品</h3><blockquote>
<p>真正優秀的設計師會排除自己的喜好，徹底追求如何讓使用者方便使用。</p>
</blockquote>
<p>作者認為產品讓優秀的設計師主導較好的原因在於，工程師主導的產品容易偏離使用者的思維，常以技術的角度規劃，反而增加了許多不必要、非重點的功能。</p>
<p>作者提出不同以往的觀點是，他認為優秀的設計並不是將產品設計地別出心裁，而是站在使用者的立場規劃出最適合使用者的功能與介面，所以，他們擅長將功能化簡至只留最重要的功能。</p>
<p>作者讓我發現 LINE 公司裡「由設計主導服務開發」的產品非常多，他們不在於追求差異化與創新，更著重在提供使用者最需要的功能。</p>
<p>正因為<strong>使用者永遠不會告訴你答案</strong>，即便做了市調研究，有時結論卻仍然不一定是真實的結論，最重要的還是觀察與察覺使用者的需求，並且提供其最貼近自身的價值，作者相信利益會由此伴隨而來，產品也將會成為真正符合商業本質的長銷產品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多閱讀商場上各式各樣的產品開發經驗，並從中瞭解其成功與失敗背後的原因，思考成功產品為什麼會成功？失敗產品又會什麼無法被市場所接受呢？
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>Coroutine, Generator 那是什麼？</title>
    <link href="http://blog.unisharp.com/2017/06/19/Coroutine,%20Generator%20%E9%82%A3%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
    <id>http://blog.unisharp.com/2017/06/19/Coroutine, Generator 那是什麼？/</id>
    <published>2017-06-18T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在談到 coroutine 之前，先來暸解一下緣起好了</p>
<p>首先，我們來談談什麼是異步？</p>
<a id="more"></a>
<p>在現在的程式語言中，一直都有想做到異步、平行的需求，以減少 CPU 停下來等 IO 的時間。</p>
<p>目前有的解決方案，如 javascript 是直接對於會遇到 io 的程式碼直接跳過不執行，等到程式有空去執行 IO 的部分才會去處理。</p>
<p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">fs.readFile(<span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>);</div></pre></td></tr></table></figure></p>
<p>以上述的例子來說，當中的 <code>readFile</code> 是一個異步的函數，當下不會執行，只會將你寫的 callback 函數註冊起來，等到有空的時候再去呼叫你寫的 callback</p>
<p>因此上述 console.log 的順序會是 ‘hello’, ‘world’</p>
<p>雖然執行順序跟閱讀的順序不一樣，但確實可以節省 CPU 等待 IO 的時間。這麼方便的東西，一般開發者其實無法寫出異步的函數，只能用系統提供的異步函數。</p>
<h2 id="Coroutine-是什麼？"><a href="#Coroutine-是什麼？" class="headerlink" title="Coroutine 是什麼？"></a>Coroutine 是什麼？</h2><p>前面  readFile 的例子，幾乎就只有系統提供的函數能變成異步的，要是使用者也想寫出這樣的東西在以往幾乎是不可行。而 php, python 等語言借鑒了其他語言中 coroutine 的概念，逐步實現了使用者自行撰寫異步函數的功能。</p>
<p>先列出要實現異步功能的需求：</p>
<ol>
<li>讓出函數的執行權</li>
<li>繼續執行未完成的部分</li>
</ol>
<p>而在其他有實現 coroutine 功能的語言裡面，多半以 <code>yield</code> 這樣的語法來讓出函數的執行權</p>
<p>例如 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 自我感覺<span class="title">IO</span>很吃重的函數<span class="params">($callback)</span> </span>&#123;</div><div class="line">     <span class="keyword">yield</span>; <span class="comment">// 這裡先讓出執行權，之後的程式碼等有空再執行</span></div><div class="line">     <span class="keyword">print</span>(<span class="string">"start to read data"</span>);</div><div class="line">     $data = do_somthing_io(); <span class="comment">// 很吃重的工作</span></div><div class="line">     $callback($data); <span class="comment">// 取得資料後送給你註冊的 callback</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述的程式碼在第一次呼叫的時候什麼事都不會發生，因為 yield 這行就讓出執行權了。</p>
<p>但是 yield 跟 return 最大的不同點在於 yield 會紀錄函數執行到一半的狀態，你可以用某些語法繼續執行，以下以 resume 函數當作繼續執行的功能</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $執行到一半的函數 = 自我感覺IO很吃重的函數();</div><div class="line"><span class="keyword">print</span>(<span class="string">"hello"</span>);</div><div class="line">resume($執行到一半的函數)</div></pre></td></tr></table></figure>
<p>以上的範例是說明 自我感覺IO很吃重的函數() 會回傳一個執行到 yield 的紀錄，讓你可以用 consume 函數繼續執行它。</p>
<p>而上面的例子就是認為在 <code>print(“hello”)</code>  才有空去執行剩餘 IO 吃重的部分。</p>
<p>如果有螢幕的話，在螢幕上顯示文字的順序大概會是這樣 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hello</div><div class="line">start to read data</div></pre></td></tr></table></figure>
<p>基本所謂的 coroutine 大概是這樣，與前面 js 的 readFile 的差異在於繼續執行的時間點是由自己呼叫 consume() 去控制，而非系統自己找時間點去執行</p>
<p>附帶一提，這裡說明的 coroutine 還差了那麼一點點，真正的 coroutine 是可以指定 yield 之後可以跳到哪裡。但為了說明方便，這裡假定會跳回呼叫者處。</p>
<h2 id="Generator-又是什麼"><a href="#Generator-又是什麼" class="headerlink" title="Generator 又是什麼"></a>Generator 又是什麼</h2><p>提到 php, python 實作 coroutine 的時候一定又會提及 Generator</p>
<p>其實 Generator 是融合了 iterator 跟 coroutine 兩種特性的東西，在 php 裡面實作了 Iterator 介面，便能夠讓物件被 <code>foreach</code> 語法拿來迭代，類似這樣的物件便可以被稱作 iterator 迭代器。</p>
<p>在 php 裡面也是可以使用 yield 的，如果我們對一個函數 yield 去 var_dump 觀察一下可以發現會得到一個名為 Generator 的物件。</p>
<p>這個 Generator 其實也是前面提到的 <code>執行到一半的函式</code> 可以讓我們透過某種方法繼續執行下去。</p>
<p>而 php 的 Generator 是以實作了 Iterator 的作法，讓我們使用裡面的 next() 方法去執行下一步。</p>
<p>這樣融合迭代器的作法，又額外了多解決了一些記憶體消耗的情境。</p>
<p>以產生 1000 個奇數為例，會試做以下的函數 :</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">odds</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    $odds = [];</div><div class="line">    <span class="keyword">for</span> ($odd = <span class="number">0</span>; count($odds) &lt; <span class="number">1000</span>; $odd++) &#123;</div><div class="line">        <span class="keyword">if</span> ($odd % <span class="number">2</span> == <span class="number">1</span>)</div><div class="line">            $odds[] = $odd;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $odds;</div></pre></td></tr></table></figure>
<p>在這裡會生成塞 1000 個奇數的陣列，當這個陣列小的時候還不會覺得有多大的問題。但是數量一多，然後可能要做的事情只是 print 出數字，整個記憶體就浪費了。</p>
<p>我們可以將上面例子稍微改寫一下</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">odds</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>;; $i++) &#123;</div><div class="line">        <span class="keyword">if</span> ($i % <span class="number">2</span> == <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">yield</span> $i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">foreach</span> (odds() <span class="keyword">as</span> $i =&gt; $value) &#123;</div><div class="line">    <span class="keyword">if</span> ($i == <span class="number">1000</span>) <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">echo</span> $value . <span class="string">"\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>這裡的 odds()  是用個無窮迴圈來產出所有奇數，但是根本不用怕會被無窮迴圈卡在這個函數裡，因為每產出一個奇數，便會讓出執行權。</p>
<p>而這裡有個小小的不同，就是在 yield 的後方可以加上類似回傳值的東西。在 Generator 裏可以利用 current() 方法把這個回傳值給取出來。</p>
<p>如果是跑在 foreach 迴圈裡也不用想太多，迴圈會自己幫忙帶進來。</p>
<p>以這個改寫的例子來說，所佔用的記憶體只有一個變數 $i ，然後利用 coroutine 會記住上次執行狀態的特性，就能夠減少其他的記憶體消耗了。</p>
<p>最後稍微提一下，在 php 裡是不能夠自己去 new 一個 Generator 的唷，因為這個特殊的迭代器要記住當下的執行狀態，所以都是以 C 去寫成的，所以目前只能靠 yield 去產生 Generator 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在談到 coroutine 之前，先來暸解一下緣起好了&lt;/p&gt;
&lt;p&gt;首先，我們來談談什麼是異步？&lt;/p&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="程式設計" scheme="http://blog.unisharp.com/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>用 CSS 打造 UniSharp Logo</title>
    <link href="http://blog.unisharp.com/2017/06/18/%E7%94%A8%20CSS%20%E6%89%93%E9%80%A0%20UniSharp%20Logo/"/>
    <id>http://blog.unisharp.com/2017/06/18/用 CSS 打造 UniSharp Logo/</id>
    <published>2017-06-17T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我們要帶大家用 CSS 來畫 UniSharp 的 LOGO</p>
<a id="more"></a>
<p>首先我們先分析 LOGO，可以分成兩組，每組是一個字母 <code>U</code> 加一個 Bar</p>
<p>分析完了之後，就可以把 HTML 設計出來了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.logo</div><div class="line">  .wrapper</div><div class="line">    .u.left</div><div class="line">      .bar</div><div class="line">    .u.right</div><div class="line">      .bar</div></pre></td></tr></table></figure>
<p>再來就是今天的重頭戲，要來用 CSS 畫畫了！</p>
<p>先畫出字母 <code>U</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.u</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">47px</span>;</div><div class="line"></div><div class="line">  &amp;, &amp;:before &#123;</div><div class="line">    <span class="selector-tag">width</span>: 172<span class="selector-tag">px</span>;</div><div class="line">    <span class="selector-tag">border-style</span>: <span class="selector-tag">solid</span>;</div><div class="line">    <span class="selector-tag">border-color</span>: <span class="selector-tag">white</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;<span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">height</span>: <span class="number">117px</span>;</div><div class="line">    <span class="attribute">border-width</span>: <span class="number">47px</span>;</div><div class="line">    <span class="attribute">border-top-width</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">47px</span>;</div><div class="line">    <span class="attribute">bottom</span>: -<span class="number">115px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span> <span class="number">100px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/7kxgESN.png" alt=""></p>
<p>再把兩個 <code>U</code> 轉一下並組合起來，歐～已經有個樣子了唷！</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrapper</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.u</span> &#123;</div><div class="line">  &amp;.left &#123;</div><div class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</div><div class="line">    <span class="selector-tag">left</span>: 60<span class="selector-tag">px</span>;</div><div class="line">    <span class="selector-tag">top</span>: 40<span class="selector-tag">px</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &amp;<span class="selector-class">.right</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-135deg);</div><div class="line">    <span class="attribute">left</span>: <span class="number">167px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/ItsYpp7.png" alt=""></p>
<p>然後把兩個 bar 放上去</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">48px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">93px</span>;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(90deg) <span class="built_in">skewX</span>(10deg);</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">31px</span>;</div><div class="line">  <span class="attribute">left</span>: -<span class="number">24px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/GDSi6SS.png" alt=""></p>
<p>再微調一下角度，大功告成</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-7deg) <span class="built_in">skewX</span>(-1deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/RAn2y2j.png" alt=""></p>
<p><a href="https://github.com/UniSharp/logo" target="_blank" rel="external">完整的程式碼請點我</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天我們要帶大家用 CSS 來畫 UniSharp 的 LOGO&lt;/p&gt;
    
    </summary>
    
      <category term="開源分享" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E9%96%8B%E6%BA%90%E5%88%86%E4%BA%AB/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="css" scheme="http://blog.unisharp.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>問題背後的問題</title>
    <link href="http://blog.unisharp.com/2017/06/14/%E5%95%8F%E9%A1%8C%E8%83%8C%E5%BE%8C%E7%9A%84%E5%95%8F%E9%A1%8C/"/>
    <id>http://blog.unisharp.com/2017/06/14/問題背後的問題/</id>
    <published>2017-06-14T00:00:00.000Z</published>
    <updated>2017-08-17T07:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我還是小菜鳥初進職場時，當時的前輩跟小菜鳥們分享了這本書 - 問題背後的問題。工作幾年後，再回頭讀了一遍，對照當時的懞懂，此刻，對於書中的文字感觸良多。<br><a id="more"></a><br>這次，不單是再次謹惕自己，對任何事都要更加積極，也想在接下來跟大家分享這本好書。</p>
<pre><code>本書作者：約翰・米勒。
 這本書 2004 年出版，直到 2017 年的現在，無論在職場或是校園依舊受用。
</code></pre><p>「個人擔當」是本書的核心。</p>
<p>常在生活中聽到：「不是我的錯」，「不干我的事」或「不是我的問題」，這些話我們總是不經意的說出口，把問題像打太極般地往外推開，米勒說，這些都暴露出個人缺乏責任感，他甚至直接指出，當今許多問題的核心在於「問題背後的問題」（The Question Behind the Question, QBQ）。</p>
<blockquote>
<p>米勒指出：把腦筋轉個一百八十度，多問些與個人擔當有關的周題，才是改善組織、改進個人生活，最有力也最有效的方法。</p>
</blockquote>
<p>於是他提出了三個 QBQ 的原則：</p>
<ol>
<li>以「什麼？」或「該如何？」這兩句話來發問，而不是「為什麼」「什麼時候」或「誰」。</li>
<li>包含「我」字在內，而不是「他們」「我們」「你」或「你們」。</li>
<li>將重點放在行動上。</li>
</ol>
<p>舉例：</p>
<ol>
<li>主管問：為什麼我的員工都這麼不積極？ &lt;-&gt; QBQ：我該如何更了解我的員工？該做些什麼使他們對公司更有向心力呢？</li>
<li>客服問：為什麼顧客總是打來問電器怎麼操作？ &lt;-&gt; QBQ：是不是我們的使用手冊不夠清楚？我該如何讓顧客更容易對產品上手呢？</li>
<li>需求者問：他們到底什麼時候才可以把我的需求做好？ &lt;-&gt; QBQ：我該如何提供更有效的資訊，使需求開發流程更順利、更有效率呢？</li>
</ol>
<p>做對的事，才能享受對的人生；問對的問題，才能有效的解決問題。</p>
<p>我們在面對屬於集體的問題時，要當成是自己的問題，以「我」當出發點來思考解決的方法。我們無法改變其他人，但卻能改變自己，進而影響身邊的人，所以不要輕忽了自己的能力。遇到問題的當下，千萬不要拖延，不要嗷嗷待哺般地等著其他人來給你答案，或是期待有誰會幫你做好你可以自行處理的工作，一旦有了「為什麼？、什麼時候？、是誰？」的想法，不論對其他人或是對自己，就是推託的開始。越接近交付日期，壓力越大，那何不一開始就想辦法解決呢？所以面對問題後，我們要將『重點放在行動上』，任何事情請立即付諸行動去思考、去解決它！</p>
<p>我們透過不斷地解決問題，從中吸取經驗、記取教訓，使自己成長、進步，讓自己面對問題的態度、處理方式、思考，更加成熟、更加縝密，而這一切都是靠著反覆訓練思考 QBQ 而來。</p>
<p>面對問題、付諸行動，不要再拖了，加油！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我還是小菜鳥初進職場時，當時的前輩跟小菜鳥們分享了這本書 - 問題背後的問題。工作幾年後，再回頭讀了一遍，對照當時的懞懂，此刻，對於書中的文字感觸良多。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="思維邏輯" scheme="http://blog.unisharp.com/tags/%E6%80%9D%E7%B6%AD%E9%82%8F%E8%BC%AF/"/>
    
  </entry>
  
  <entry>
    <title>設計師必備 Sketch Plugin 推薦</title>
    <link href="http://blog.unisharp.com/2017/06/12/%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%BF%85%E5%82%99Sketch%20Plugin%20%E6%8E%A8%E8%96%A6/"/>
    <id>http://blog.unisharp.com/2017/06/12/設計師必備Sketch Plugin 推薦/</id>
    <published>2017-06-11T16:00:00.000Z</published>
    <updated>2017-06-11T02:41:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下介紹的 Plugin 都能幫助你在使用過程中更快速完成任務，節省寶貴時間，產出最大成效</p>
<a id="more"></a>
<ol>
<li><p><a href="http://sketchtoolbox.com/" target="_blank" rel="external">Sketch Toolbox</a></p>
<p> 再裝任何 Plugin 之前，建議可以使用Sketch toolbox 去管理接下來下載的 Plugin，在這裡可以同時查詢、下載並安裝會非常方便快速</p>
<p>  <a href="http://sketchtoolbox.com/" title="Sketch toolbox" target="_blank" rel="external"><img src="toolbox.png" alt="Sketch Toolbox"></a></p>
</li>
<li><p><a href="https://animaapp.github.io/" target="_blank" rel="external">Auto Layout</a></p>
<p> 這個 Plugin 一出來真的是砸中各位設計師的痛點！<br> 每當要處理不太複雜的 RWD （響應式）網頁時，在大大小小的尺寸要東搬移一塊、西複製一塊，整個調整完一整天就過去了 （淚..）</p>
<p> Auto Layout 就能夠輕鬆解決這個問題，點選下方教學影片能幫助你更了解操作步驟</p>
<p> <a href="https://www.youtube.com/watch?v=v393LgriWCs" title="Sketch Auto Layout" target="_blank" rel="external"><img src="snshot-autolayout.png" alt="autolayout"></a></p>
<p> 又或者是在調整文字、按鈕，文章長度，整個排版又需要重新調整，到底有沒有更好、更有效率的方式可以解決這個問題呢？</p>
<p> (必看！非常實用！）<br> 點選下方教學影片告訴你如何利用 Auot Layout 做出文章、按鈕的自動排版</p>
<p> <a href="https://www.youtube.com/watch?v=DiCXg17CwIY" title="Sketch Auto Layout" target="_blank" rel="external"><img src="scshot-flexbox.png" alt="flexbox"></a></p>
</li>
<li><p><a href="https://www.invisionapp.com/craft" target="_blank" rel="external">Craft</a></p>
<p> 由 Invision 推出的內容產生器，結合 unsplash it 的免費圖庫輕鬆自動產生圖片、產生名字、產生文章、甚至產生金額、email等，但目前並沒有支援中文</p>
<p> <a href="https://www.invisionapp.com/craft" title="Craft" target="_blank" rel="external"><img src="craft.png" alt="craft"></a></p>
<p> 當然也可以把介面同步到 Invision ，並開啟 inspect 功能，查看每個物件的顏色、尺寸等參數，而且還有協作功能，讓團隊合作時更便捷迅速</p>
<p> <a href="https://support.invisionapp.com/hc/en-us/articles/115000650823-Inspect" title="Inspect" target="_blank" rel="external"><img src="inspect.png" alt="Inspect"></a></p>
</li>
<li><p><a href="https://github.com/romannurik/Sketch-ArtboardTricks" target="_blank" rel="external">Artboard Tricks</a></p>
<p> 當你的介面越來越多，這時就需要 Artboard Tricks 去幫助你排序，除了可以設定每個 Artboard 之間的距離，還可以編號，可以避免團隊工作上的誤會、更快達成共識。</p>
<p> <a href="https://github.com/romannurik/sketch-artboardtricks" target="_blank" rel="external"><img src="https://raw.githubusercontent.com/romannurik/Sketch-ArtboardTricks/master/art/rearrange.gif" alt="Frontend Flow"></a></p>
</li>
<li><p><a href="https://abynim.github.io/UserFlows/" target="_blank" rel="external">UserFlow</a></p>
<p> 當你完成所有介面，需交付給ＰＭ或是客戶時，利用 Userflow 可以標記物件 ＆ Artboard 之間的順序、流程，最後產出的文件就可以很清楚知道從頭到尾的流程</p>
<p> <a href="https://abynim.github.io/UserFlows/" target="_blank" rel="external"><img src="userflow.png" alt="Frontend Flow"></a></p>
</li>
</ol>
<p>以上就是作者認為 5 大必備精華的 Sketch Plugin，雖然也有嘗試其他 Plugin，但 Plugin 不在多、在於精，能夠有效地達到目的並節省時間才是最重要的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下介紹的 Plugin 都能幫助你在使用過程中更快速完成任務，節省寶貴時間，產出最大成效&lt;/p&gt;
    
    </summary>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="UI" scheme="http://blog.unisharp.com/tags/UI/"/>
    
      <category term="Sketch" scheme="http://blog.unisharp.com/tags/Sketch/"/>
    
  </entry>
  
  <entry>
    <title>由內而外打造企業開源文化</title>
    <link href="http://blog.unisharp.com/2017/06/05/%E7%94%B1%E5%85%A7%E8%80%8C%E5%A4%96%E6%89%93%E9%80%A0%E4%BC%81%E6%A5%AD%E9%96%8B%E6%BA%90%E6%96%87%E5%8C%96/"/>
    <id>http://blog.unisharp.com/2017/06/05/由內而外打造企業開源文化/</id>
    <published>2017-06-04T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="緣起"><a href="#緣起" class="headerlink" title="緣起"></a>緣起</h2><p>筆者自從學習資訊技術以來，一直受惠於開源文化，也嚮往著開源的工作。在幫公司開發軟體時，也同時對世界多一份貢獻，真是非常美好的事情。<br><a id="more"></a>很幸運地，我曾經受前公司的老闆賦予這樣的任務：「替公司創造一個開源產品，並以社群方式經營它」，雖然最終沒有太大的成果，但卻是一個很難得的經驗呢。</p>
<p>事實上，有許多的企業都在做一樣的事情 - 選擇性地將工作產出開源，甚至有許多的企業能做到 100% 以開源的方式進行開發。</p>
<p>不知道你是否也有這樣的經驗呢？因為工作需要而使用了某一個 Open Source 軟體，發現了一些問題，你 trace 了很久，最終將它修正了，很想把這個修正回饋回上游。</p>
<p>但是你遲疑了。<br>「公司允許我這樣做嗎？」<br>「我發 Patch（或 Pull Request）時要用公司的 Email 嗎？」</p>
<p>有沒有一個工作環境是可以讓我安心地玩社群、掛 IRC、不用區分我的產出是在工作時間內還是私人時間呢？</p>
<p>事隔多年，我在悠夏爾遇到了一群開源同好，我們經過一番努力，我們逐步讓開源文化在公司內成形。</p>
<p>這些年來，因為開放的內部文化，使得我們的溝通更順暢、工作也更愉快了。我們留下了越來越多的程式元件、文件、設計稿、讀書會影片。每個人都樂於分享、樂於向他人學習。我們也不斷成長，勇於打破不適合的規則。我們對於自己的貢獻會「持續保持開放」感到安心。</p>
<p>更進一步地，因為這樣的開源文化，使得大家勇於將產出對外開源。雖然受限於對客戶的合約與責任，我們還無法成為 100% 將工作產出開源的公司，但這是一個好的開始，對吧 ;)</p>
<p>我認為，塑造開源文化應該「由內而外」、「內外兼顧」才是自然。對許多人來說，長久以來習慣是：部門內的員工只能看到自己部門的文件、只能存取自己負責的 Git Repo，這時，如果他們得到公司的指示：「我們鼓勵您將心血開源，給公司外的人無限制地使用」，是很刻意的。</p>
<p>這些年為了促成悠夏爾的開源文化，我與公司夥伴們列出了一些開源工作原則，以下我們就來逐一介紹這些原則。<br>雖然還沒有做得很好，但我們會朝這個方向繼續努力的。</p>
<h2 id="內部持續開放原則"><a href="#內部持續開放原則" class="headerlink" title="內部持續開放原則"></a>內部持續開放原則</h2><blockquote>
<p>在公司內就放心學習、無限制地分享吧！</p>
</blockquote>
<p>「內部持續開放原則」是指：「<strong>無論公司如何成長，所有內部成員享有學習及改良任何公司技術、設計及專案文件的自由，不會改變</strong>」</p>
<p>舉例來說，以下這些是開放的：</p>
<ol>
<li>所有的 Git Repositories 永遠開放給每一位公司成員讀寫。無須取得授權，無須問過「我可不可以這樣改？」</li>
<li>所有工作規則、工作筆記、專案需求等文件以及設計原始檔，永遠開放給每一位成員閱讀、使用和修改。同上，做任何修改是不需要問過他人的，即便這篇文件是主管擬定的工作規則。（反正有歷史記錄在啊）</li>
<li>所有成員均可自由地於內部聊天頻道暢所欲言（目前是使用 slack）</li>
<li>所有成員均可放心地指出目前工作流程或工作習慣中的不良處，提出改善方式。</li>
<li>想學習公司所知的任何技術，都可以在稱為「許願池」的地方提出，公司馬上會安排人分享。</li>
</ol>
<p>公司內部就像是一個小型的開源社群，所有人因相同的願景而聚在一起，互相學習、成長。我們盡可能地共享資源，將公司內部變成一個知識寶庫。</p>
<p>有朝一日，公司也許會有更多人、有更多不同的部門。我能否自由學習其他部門中感興趣的項目呢？我能否對它們貢獻所長？或是會被拒於門外？</p>
<p>我相信團隊人數增加後，我們會有更多的顧慮。但我們會努力捍衛這個原則的。</p>
<h2 id="可重用原則"><a href="#可重用原則" class="headerlink" title="可重用原則"></a>可重用原則</h2><blockquote>
<p>擁有自由之後，提升分享的品質吧！</p>
</blockquote>
<p>「可重用原則」用意在於提升開源品質，白話一點的解釋是：「<strong>所有的文件、設計、程式與流程，需致力於讓他人方便使用。</strong>」</p>
<p>依「內部持續開放原則」，所有的內部分享、伺服器管理紀錄、檢討報告、專案日誌、程式產出等，均是對內開放的。當數量越來越多、越來越雜，有許多東西漸漸沒人看得懂了。我們需要致力於改善它的可重用性，讓下一次需要這些項目的人得以快速地使用它。</p>
<p>舉例來說，某一些程式在開發初期可能是寫死的，只有某一個專案可以使用。但因為可重用原則，我們會提醒自己致力於將這個程式元件化，即便會多花一點時間。</p>
<p>另外舉一個文件的例子：<br>當我們對產品做了一個重要決策，如果它的會議紀錄只是一個 「2017-05-05 會議記錄：經過投票，結論是使用 A 方案」這樣的描述，對於想從各方角度了解會議的其他人幫助不大。我們採取共筆方式完成，相關與會人員會補上：「選擇 A 方案的人的人的理由是什麼？」、「反對它的人的理由是什麼？」、「其他的選項是什麼？」，讓往後他人可以快速查找並進入當下的情境。這樣子使得這份記錄被review的機會增加，它的價值提升了。</p>
<p>這個原則幫助我們時常思考要怎麼讓產出被他人持續使用，而不只是淪為自己一個人看得懂得東西。在軟體上，它同等於致力於優良的設計模式。在文件上，它代表著以文字或圖像精準表達出自己的思維。</p>
<p>為了更有效地提升品質，目前我們我們採用的做法是：「程式使用 TDD 開發」、「文件以 Executable Spec 為最終目標」。限於篇幅，先不繼續討論它，下回我們會分享我們努力朝這個方向前進的心路歷程，請繼續支持我們的 How We Work 系列文章囉。</p>
<h2 id="開放優先原則"><a href="#開放優先原則" class="headerlink" title="開放優先原則"></a>開放優先原則</h2><blockquote>
<p>自在分享</p>
</blockquote>
<p>當「內部持續開放原則」與「可重用原則」進行了好一陣子後，我們有越來越多的內部私有產出。</p>
<p>這些私有產出中不乏我們認為對外部也有價值的軟體元件或文件，我們很想將它開放，然而，我們時常顧慮著：「這裡面會不會很多 typo 啊？」、「這邊程式寫得很醜會丟臉耶」、「網路上已經有別人做得更好了」、「這開放出去被學走好嗎」等。</p>
<p>因為這些顧慮，使得這些項目隱藏了許多的「開源門檻」，阻擋我們將它們真正開源到 GitHub 或部落格上，這些隱藏門檻有：</p>
<ol>
<li>不違法、不違背合約</li>
<li>夠獨立、夠泛用</li>
<li>真的對他人有幫助</li>
<li>文件充足，用得人看得懂</li>
<li>不造成公司損失</li>
<li>得到技術主管同意並且 review 過</li>
<li>… 可能還有很多很多</li>
</ol>
<p>但仔細想來，只有第 1 點是必須遵守的條件。</p>
<p>為了鼓勵開源，我們新列了一項原則，稱為「開放優先原則」，它的意思是：</p>
<p><strong>在不違法、不違反合約的前提下，優先以開源的方式開發所有的元件及文件。例如在 GitHub 上開源開發元件，再引入私有專案使用。不需要取得公司同意。</strong></p>
<p>有了這個原則，我們來回應一下一開始的兩個疑問吧！</p>
<p>「公司允許我這樣做嗎？」 =&gt; 當然，公司直接鼓勵我這樣做！</p>
<p>「我發 patch（或 PR）時要用公司的 email 嗎？」 =&gt; 看喜歡用哪個就用哪個囉！</p>
<p>當然我們更喜歡同事把公司開源項目放在 GitHub 中的 UniSharp 群組內，畢竟這樣比較好找。而且因為群組內同仁都有寫入權，因此要修改時不需要發 PR 會更方便，會更符合第一個「內部持續開放原則」的！</p>
<p>同時我們也鼓勵同事經營自己個人帳號下的開源項目。無論是與公司業務有關或無關的。</p>
<p>這樣的原則下，使我們近年在 GitHub 上的開源項目大爆發。雖然因為不刻意行銷，也時常是工程師的神來一筆，沒有留下什麼好文件，不一定有很多關注。然而本著 Release Early, Release Often 的精神，及早開放就是及早得以討論與分享。我們很開心也自豪地會繼續這樣做。</p>
<h1 id="最後，也是開始"><a href="#最後，也是開始" class="headerlink" title="最後，也是開始"></a>最後，也是開始</h1><p>人類的生命及專注力是有限的資源，必須珍惜。希望某一天，在地球的某一處，有人因為我們的分享而無痛完成一項工作，得以有時間回家幫小孩過生日，或是用這些時間把自己擅長的事情分享給其他人，讓這樣的分享持續下去。</p>
<p>感謝各開源社群帶給我們的幫助，無論我們做得好不好，都希望能將這份精神傳遞出去。</p>
<p>特別謝謝 <strong>Allison Randal</strong> 的 <a href="https://allisonrandal.com/2012/04/15/open-source-enlightenment/" target="_blank" rel="external">Open Source Enlightenment</a> 與 <strong>唐鳳</strong> 精彩的「<a href="https://www.slideshare.net/autang/open-source-enlightenment" target="_blank" rel="external">開源之道</a>」分享，每當我對「工作的意義」甚至「人生的目標」感到迷惘時，這份簡報總是幫助我撥雲見日、找到方向。</p>
<p>開源不神聖，它僅自然的、快樂的。請加入我們吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;緣起&quot;&gt;&lt;a href=&quot;#緣起&quot; class=&quot;headerlink&quot; title=&quot;緣起&quot;&gt;&lt;/a&gt;緣起&lt;/h2&gt;&lt;p&gt;筆者自從學習資訊技術以來，一直受惠於開源文化，也嚮往著開源的工作。在幫公司開發軟體時，也同時對世界多一份貢獻，真是非常美好的事情。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="how-we-work" scheme="http://blog.unisharp.com/tags/how-we-work/"/>
    
  </entry>
  
  <entry>
    <title>設計小學堂-UI色彩實務應用篇</title>
    <link href="http://blog.unisharp.com/2017/04/28/%E8%A8%AD%E8%A8%88%E5%B0%8F%E5%AD%B8%E5%A0%82-UI%E8%89%B2%E5%BD%A9%E5%AF%A6%E5%8B%99%E9%81%8B%E7%94%A8%E7%AF%87/"/>
    <id>http://blog.unisharp.com/2017/04/28/設計小學堂-UI色彩實務運用篇/</id>
    <published>2017-04-27T16:00:00.000Z</published>
    <updated>2017-05-08T02:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>配色，看起來似乎是每個人都會的一件事，在很多人的心裡不過就是把幾個顏色湊在一起而已，好像沒什麼難度吧～不不不，這誤會可大了！</p>
<a id="more"></a>
<p>配色這回事，可是入門簡單，但精通很難的啊！！尤其如果不是科班出身，或有具有美感相關經驗的話，當自己親自嘗試配色的時候，有很高的機率會發現怎麼配怎麼怪，然後就會進入一個一直拉繪圖軟體的調色盤拉…超…久…的狀態。</p>
<p>不過不用太擔心，今天不藏私，用淺顯易懂的方法跟大家分享1個重點、3個原則、2個小技巧。降低做出不忍直視的UI機率。在追求顏色美美的UI之前，先達成不要醜啊～</p>
<h2 id="重點1：了解色彩的強度"><a href="#重點1：了解色彩的強度" class="headerlink" title="重點1：了解色彩的強度"></a>重點1：了解色彩的強度</h2><p><img src="color_wheel.png" alt="伊登12色相環"></p>
<h6 id="伊登12色相環"><a href="#伊登12色相環" class="headerlink" title="伊登12色相環"></a><em>伊登12色相環</em></h6><p>色彩本身是有視覺強弱之分的，整體來說由強至弱依序為：<br>暖色系(前進色) &gt; 冷色系(後退色) &gt; 灰階</p>
<p>而同類色系互比則是：<br>深色 &gt; 淺色<br><img src="color_demo.png" alt="同類色強弱順序"></p>
<p>相同顏色則是：<br>高彩度(飽和度) &gt; 低彩度(飽和度)<br>高明度 &lt; 低明度<br><img src="color_demo_2.png" alt="相同色強弱順序"></p>
<p>在知道怎麼區分色彩的視覺強弱程度後，實務上配色的時候就可以依循三個原則</p>
<h2 id="原則1：淺底深字，深底淺字"><a href="#原則1：淺底深字，深底淺字" class="headerlink" title="原則1：淺底深字，深底淺字"></a>原則1：淺底深字，深底淺字</h2><p>網頁Layout、UI按鈕，或是簡報設計等任何需要使用色彩與文字搭配的地方，都可以依循這個原則。當底色使用的顏色偏淺色時，上方的文字就使用深色；反之若底色為深色時，文字就使用淺色。</p>
<p>這個原則可以確保文字和底色之間有清晰的辨識度，不會因為兩者之間的視覺強度太接近，而造成文字看不清楚的情形。</p>
<p><img src="UI_demo_1.png" alt="按鈕UI錯誤範例"><br><img src="UI_demo_2.png" alt="按鈕UI正確範例"><br><img src="UI_demo_3.png" alt="圖文編排設計正確範例"></p>
<h2 id="原則2：強化重點，減弱其他"><a href="#原則2：強化重點，減弱其他" class="headerlink" title="原則2：強化重點，減弱其他"></a>原則2：強化重點，減弱其他</h2><p>當較多的內容或物件排放在一起，但沒有妥善處理的時候，就很有可能會發生畫面變得雜亂，東西太多不知道要先看哪的情形，瀏覽的流暢度和UI的使用體驗會變得較差</p>
<p><img src="UI_demo_4.png" alt="相同色強弱順序"><br><img src="UI_demo_5.png" alt="相同色強弱順序"></p>
<p>這時就必須找出畫面上最重要的內容，透過「強化重點，減弱其他」的作法將重點內容區隔出來</p>
<h4 id="變更色彩"><a href="#變更色彩" class="headerlink" title="變更色彩"></a>變更色彩</h4><p>直接給予畫面上的重要內容視覺強度較高(暖色系or高彩度or低明度)的顏色，並降低其他內容的強度</p>
<p><img src="UI_demo_6.png" alt="改變色彩"></p>
<h4 id="加上底色"><a href="#加上底色" class="headerlink" title="加上底色"></a>加上底色</h4><p>或是透過不同底色的差異，來加強重點內容</p>
<p><img src="UI_demo_7.png" alt="底色範例"></p>
<h4 id="改變字級"><a href="#改變字級" class="headerlink" title="改變字級"></a>改變字級</h4><p>在顏色不變的情況下，調整文字大小和粗細也是一種不錯的方法</p>
<p><img src="UI_demo_8.png" alt="字級範例"></p>
<p>不論是哪種作法，關鍵都在於拉大重點和其他內容在視覺上的對比度<del>(擴大貧富差距XD)</del>，讓重要的內容能成為視覺焦點</p>
<h2 id="原則3：越鮮豔，越謹慎"><a href="#原則3：越鮮豔，越謹慎" class="headerlink" title="原則3：越鮮豔，越謹慎"></a>原則3：越鮮豔，越謹慎</h2><p>色彩跟節日的關係非常密切，我們會看到某些顏色很常出現在一些節日裡，像是聖誕節的紅綠，中秋節的黃藍，情人節的粉紅等等</p>
<p>而配色是有流行性的，不同年代的配色趨勢也不太一樣，近幾年從Flat Design開始，到Google的Material Design，都能觀察出UI配色有越來越鮮豔的趨勢</p>
<p><img src="UI_demo_9.png" alt="2017色彩趨勢"><br><img src="UI_demo_10.png" alt="2017色彩趨勢"></p>
<p>但越鮮豔的顏色其實是越難掌握的，尤其是當多種高彩度的顏色要互相搭配的話，更需要對色彩有比較高的敏銳度，才不會讓畫面變霓虹燈，或看上去太刺眼</p>
<p>所以若不是很有把握的話，盡量不要選擇彩度太高的顏色</p>
<p>接下來分享2個相當基礎，但很實用的UI配色小技巧</p>
<h2 id="小技巧1：灰階-1個主色"><a href="#小技巧1：灰階-1個主色" class="headerlink" title="小技巧1：灰階+1個主色"></a>小技巧1：灰階+1個主色</h2><p>使用灰階加上一個主色，是在打造新產品的UI時很常使用的一個技巧</p>
<p>將主色作為Call to Action或是強調重點時所用的重要顏色，例如：產品LOGO、Call to Action的按鈕、重要的標題文字等等，而其他次要的內容則可用不同深淺的灰階來呈現</p>
<p><img src="UI_demo_11.png" alt="Airbnb 首頁"></p>
<p>由於灰階的視覺強度較低，跟主色相較之下，目光焦點會很容易的停留在有主色的元素上。</p>
<h2 id="小技巧2：灰階-1個主色-1個輔助色"><a href="#小技巧2：灰階-1個主色-1個輔助色" class="headerlink" title="小技巧2：灰階+1個主色+1個輔助色"></a>小技巧2：灰階+1個主色+1個輔助色</h2><p>除了灰階與主色之外，再加上一個輔助色</p>
<p>輔助色的視覺強度不能高於主色，才能維持主色為畫面焦點的作用。而輔助色可以運用在次要內容上，例如與Call to Action不同目的的按鈕，或是畫面上非最重要但也希望使用者留意的元素上。</p>
<p><img src="UI_demo_12.png" alt="invision 註冊頁"></p>
<p>上面分享的這些內容，是依據我自己的設計經驗所歸納出的幾個心得，希望能稍稍幫助大家在如何用色上的煩惱！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配色，看起來似乎是每個人都會的一件事，在很多人的心裡不過就是把幾個顏色湊在一起而已，好像沒什麼難度吧～不不不，這誤會可大了！&lt;/p&gt;
    
    </summary>
    
      <category term="前端設計" scheme="http://blog.unisharp.com/categories/%E5%89%8D%E7%AB%AF%E8%A8%AD%E8%A8%88/"/>
    
    
      <category term="設計" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88/"/>
    
      <category term="UI" scheme="http://blog.unisharp.com/tags/UI/"/>
    
      <category term="色彩" scheme="http://blog.unisharp.com/tags/%E8%89%B2%E5%BD%A9/"/>
    
      <category term="設計小學堂" scheme="http://blog.unisharp.com/tags/%E8%A8%AD%E8%A8%88%E5%B0%8F%E5%AD%B8%E5%A0%82/"/>
    
  </entry>
  
  <entry>
    <title>上班原來也可以像是回到家</title>
    <link href="http://blog.unisharp.com/2017/04/16/%E4%B8%8A%E7%8F%AD%E5%8E%9F%E4%BE%86%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%83%8F%E6%98%AF%E5%9B%9E%E5%88%B0%E5%AE%B6/"/>
    <id>http://blog.unisharp.com/2017/04/16/上班原來也可以像是回到家/</id>
    <published>2017-04-15T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>好的工作環境，能激發無限創意、能刺激分享、能夠孕育出一群同甘共苦的夥伴，我們共享、共創、共樂，把這樣的理念在辦公室每一隅都堅持實現。</p>
<a id="more"></a>
<p>從平面設計圖開始，設計團隊絞盡腦汁，考慮整體空間配置，排列出大小會議室、休閒空間及工作區域。</p>
<p><img src="平面配置圖.png" alt="悠夏爾科技施工照"></p>
<p>牆面顏色、傢俱配置、地板材質都不假他人之手，由設計團隊一手包辦</p>
<p><img src="3D模擬_01.png" alt="悠夏爾科技施工照"><br><img src="3D模擬_02.png" alt="悠夏爾科技施工照"></p>
<p>究竟能否符合企業形象及大家期待呢？<br>走！就讓小編帶你一窺這如夢似幻般的辦公室吧！</p>
<p><img src="door.png" alt="悠夏爾科技大門"></p>
<p>來到悠夏爾科技公司門前，一整面木質感的招牌與整片透明的玻璃大門，並且一眼盡收繽紛的彩漆與可愛的玄關，一覽無遺，這些都是我們的設計團隊，希望讓遠來洽公的客戶，都能感受到一種 Open Arm 的美式作風，像是主人賓帶著雀躍的笑容歡迎各位訪客！當然，另一方面，考量風水上對於門戶相沖的禁忌，這樣的玄關設計既務實又兼具美觀。</p>
<p><img src="hall_color.png" alt="悠夏爾科技辦公室設計規範"></p>
<p>設計團隊一開始考量了多種風格，工業風、無印簡約等等，最後決定走幼兒園style(誤)，延續充滿活力熱忱的公司文化，大膽使用了四種相異的色彩搭配在不同的牆面上，讓來到辦公室的夥伴和訪客們，都能感受到一種活潑、好心情的氛圍。</p>
<p>設計團隊對於會議室與主辦公室，秉持著開放式的設計，設立便於討論的會議空間，也將主辦公室的隔板打破，讓人與人之間溝通變得更直接，更能高效率地溝通與協同工作，把整個團隊氛圍更添積極與活力！</p>
<p><img src="meeting_room.png" alt="悠夏爾科技會議室"></p>
<p><img src="workshop.png" alt="悠夏爾科技主辦公室"></p>
<p>再往辦公間裡面走。還記得「再忙，都要跟你喝杯咖啡」嗎？廣告裡的正咩總是坐在美麗的高腳椅上，面對著城市的風景，原來工作台也可以很詩情畫意，帶著另一種從容更能激發出無限的靈感，也許下一秒，一束銀河般的星河乍現，你文思枯竭的工作已被溢滿！</p>
<p><img src="bar.png" alt="悠夏爾科技吧台"></p>
<p>一處可以轉換心情、療癒身心的沙發區，是設計團隊特別為緊繃、糾結、卡關的工作者，安排的靈感溫室，也特別選用藍色，一種沈鬱卻能讓人靜下心的色調，就像回家一樣，陷在舒適的沙發上，許多不解都有解了！</p>
<p><img src="sofa_area.png" alt="悠夏爾科技沙發區"></p>
<p>讓我們來看看設計團隊到底施了什麼魔法，讓施工前後造成超強大的落差<br><img src="before.png" alt="悠夏爾科技施工照"><br><img src="before1.png" alt="悠夏爾科技施工照"><br>還有更多巧思藏在辦公室的小地方，例如會議室與主辦公室都採取 Apple TV 無線投影的方式，每一個人在辦公室任何一處，都能發送投影訊號，通知大家”我想分享喔”，讓共享無分界、無阻礙、無限延伸！</p>
<p><img src="family.png" alt="悠夏爾科技人員"></p>
<p>We work smart.<br>We bulid great websites.<br>我們是 悠夏爾科技</p>
<p><img src="quality.png" alt="悠夏爾科技沙發區"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好的工作環境，能激發無限創意、能刺激分享、能夠孕育出一群同甘共苦的夥伴，我們共享、共創、共樂，把這樣的理念在辦公室每一隅都堅持實現。&lt;/p&gt;
    
    </summary>
    
      <category term="生活雜記" scheme="http://blog.unisharp.com/categories/%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/"/>
    
    
      <category term="在悠夏爾的生活" scheme="http://blog.unisharp.com/tags/%E5%9C%A8%E6%82%A0%E5%A4%8F%E7%88%BE%E7%9A%84%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>有效率會議的五大原則</title>
    <link href="http://blog.unisharp.com/2017/02/20/%E6%9C%89%E6%95%88%E7%8E%87%E6%9C%83%E8%AD%B0%E7%9A%84%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%89%87/"/>
    <id>http://blog.unisharp.com/2017/02/20/有效率會議的五大原則/</id>
    <published>2017-02-19T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>每次跟師父開會，都會有一種很迅速就結束會議的錯覺，我心裡常會這樣想：『怎麼這麼快就會有結論了？』。</p>
<p>本篇偷偷列了一下最近觀察到的秘訣（無論是面對面的會議或是電話會議，都適用）：<br><a id="more"></a></p>
<h2 id="一、事先必定擬定議題"><a href="#一、事先必定擬定議題" class="headerlink" title="一、事先必定擬定議題"></a>一、事先必定擬定議題</h2><p>重點不是擬定議題，而是師父都會針對這些主題事先了解：哪些需要討論？哪些是心中已經擬定好解決方案，只是利用會議碰面的時間，快速溝通議題？</p>
<p>所以往往確定議題後，師父會逐項的思考細節，可能會跟 RD 討論、可能會問 Art 的意見，或是客戶會不會有問題？我有沒有其他的解決方案？</p>
<p>總之，師父是腦袋裝好東西去開會，不是頭腦放空、雙眼無神的參加會議，對議題的掌握度當然會很好。</p>
<h2 id="二、跟著議程走，不要離題"><a href="#二、跟著議程走，不要離題" class="headerlink" title="二、跟著議程走，不要離題"></a>二、跟著議程走，不要離題</h2><p>議題既然已經擬定好了，就是針對這些主題需要有決議。但在會議中常常會忽然冒出一個問題，而且常常為了這個問題浪費好幾十分鐘討論，不僅會離題，而且本來需要討論的議題往往沒討論到，或是花費了太多時間在其他議題，本該討論的事情，都沒有討論，或是草草結束。</p>
<p>不重要的小事不要在會議裡面討論，會議開很久的原因，往往是花了很多時間在討論不重要的小事，當會議走向變成了討論雞毛蒜皮的小地方時，師父常常都會用一句話來阻止這件事情的發生：『這些細節我們在會議結束後討論好嗎？我們今天先決定大方向跟取得大家的共識』。</p>
<h2 id="三、不要在會議時才思考如何解決"><a href="#三、不要在會議時才思考如何解決" class="headerlink" title="三、不要在會議時才思考如何解決"></a>三、不要在會議時才思考如何解決</h2><p>師父常說：</p>
<blockquote>
<p>『會議是拿來凝聚共識，或是快速溝通議題，不是把寶貴的會議時間，當成腦力激盪大會』。</p>
</blockquote>
<p>前面第一點有提到『對於議題要事先掌握』，所以會議時我們可以直接說結論，或是用引導的方式，帶出結論。</p>
<p>絕對不可以事前什麼都不準備，會議的開頭就問：『針對這個議題，各位有什麼想法嗎』？然後一群人開始七嘴八舌的討論議題。萬萬不可。</p>
<p>會議上往往會冒出其他的議題，前面有提到『不要討論不重要的小事』，但如果這個冒出來的議題很重要呢？</p>
<p>如果花了五分鐘，還沒有結果時，師父會說：</p>
<blockquote>
<p>『這個我們會回去思考，等有比較明確的解決方案時，會利用 E-Mail 說明或是再約個會議跟各位報告』。</p>
</blockquote>
<p>但是這一句話必須建立在客戶已經跟你建立起不錯關係後，他也知道你的能力時，才能說這句話。</p>
<p>在新客戶面前，我們要展現自己的專業，展現對於這個產業的獨特見解，若事事都說回去思考，反而會讓人覺得你的思考還不夠全方位。客戶會買單，往往是因為他覺得你夠專業，他問的問題你馬上都能夠達的出來；若事事都要回去跟工程師討論，那你怎麼不帶工程師來？這樣一來一回，豈不是浪費時間嗎？</p>
<h2 id="四、避免非必要的實體會議"><a href="#四、避免非必要的實體會議" class="headerlink" title="四、避免非必要的實體會議"></a>四、避免非必要的實體會議</h2><p>雖然面對面的討論，可以快速解決與回應問題，但是很多情況是可以不需要面對面開會，有時候只是例行性的報告，或是簡單的議題，往往可以利用 E-Mail / 電話來討論，不僅可以省去舟車勞頓的麻煩，而且也比較彈性。</p>
<p>客戶很容易因為一兩個議題，就想要約會議。若不經思考，我們就答應參加，其實是浪費時間。</p>
<p>若可以用 E-Mail / 電話來討論的議題，師父絕對會利用這些工具。<br>師父常客戶這樣說：『這個議題我覺得我們用電話溝通就好了』。前提條件是因為你夠專業，因為你的解釋往往是很清楚的，客戶相信你，所以這樣推掉不必要的會議，客戶也不會有其他意見。若是你連見面開會時，對於議題的掌握程度都二二六六了，客戶還可能讓你這樣作嗎？</p>
<h2 id="五、慎選與會成員"><a href="#五、慎選與會成員" class="headerlink" title="五、慎選與會成員"></a>五、慎選與會成員</h2><p>開會並不是參與人數越多越好，跟主題沒有關係的人員，最好不要出席；跟主題有關係的人員，也邀請主要的核心人員就好。為什麼呢？因為人多意見多，一人一句話，可能就花費了不少時間，特別是那些沒有關係的人員，常常搞不清楚狀況，又愛發言，往往拖棚，浪費時間（您發言是在刷存在感嗎？）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次跟師父開會，都會有一種很迅速就結束會議的錯覺，我心裡常會這樣想：『怎麼這麼快就會有結論了？』。&lt;/p&gt;
&lt;p&gt;本篇偷偷列了一下最近觀察到的秘訣（無論是面對面的會議或是電話會議，都適用）：&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="溝通" scheme="http://blog.unisharp.com/tags/%E6%BA%9D%E9%80%9A/"/>
    
      <category term="會議" scheme="http://blog.unisharp.com/tags/%E6%9C%83%E8%AD%B0/"/>
    
  </entry>
  
  <entry>
    <title>一套使用 jade (pug) 轉為 laravel blade 的前端工作流程</title>
    <link href="http://blog.unisharp.com/2017/02/14/%E4%B8%80%E5%A5%97%E4%BD%BF%E7%94%A8%20jade%20(pug)%20%E8%BD%89%E7%82%BA%20laravel%20blade%20%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
    <id>http://blog.unisharp.com/2017/02/14/一套使用 jade (pug) 轉為 laravel blade 的前端工作流程/</id>
    <published>2017-02-13T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>這篇文章介紹一套使用 Laravel 配合 Jade (Pug) 作為樣板引擎的工作流程，這套流程我們已經使用了近三年，解決了許多工程師與設計師在合作上的重工，希望對你們有幫助 :)</p>
<a id="more"></a>
<h2 id="傳統的設計師-gt-工程師的合作流程"><a href="#傳統的設計師-gt-工程師的合作流程" class="headerlink" title="傳統的設計師 =&gt; 工程師的合作流程"></a>傳統的設計師 =&gt; 工程師的合作流程</h2><p>傳統上，設計師在製作完網頁設計圖後，會由切版人員（這個人員可能是設計師自己，也有可能是前端工程師）將設計圖製作成靜態的 HTML 及 CSS，接下來再交給工程師套程式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">設計 (圖片) -&gt; 切版 （HTML/CSS）-&gt; 套版（程式）</div></pre></td></tr></table></figure>
<p><img src="frontend-flow.png" alt="Frontend Flow"></p>
<h2 id="Laravel-blade"><a href="#Laravel-blade" class="headerlink" title="Laravel blade"></a>Laravel blade</h2><p>Laravel 預設是使用 blade 作為樣板引擎作為動態網頁的樣板，它具有良好的 extend 及 include 設計，以下例子說明了 include 的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        @include(&apos;share.head&apos;)</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        @include(&apos;share.header&apos;)</div><div class="line"></div><div class="line">        &lt;div class=&quot;container&quot;&gt;</div><div class="line">            @yield(&apos;content&apos;)</div><div class="line">        &lt;/div&gt;</div><div class="line"></div><div class="line">        @include(&apos;share.footer&apos;)</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p> layout - view 結構中的 layout。</p>
<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>對 laravel 工程師來說，製作畫面的方法是寫 blade，並且使用 blade 的 layout 與 view 使得我們在修改共用的畫面時只需要修改一次（因為共用的畫面皆有專屬的 blade 代表）。</p>
<p>但真正實行時，才發現此處還隱藏了一個大部分的人習以為常的重工 — 通常 html 及 css 是由<strong>設計師</strong>提供的，如果頁面已經套完 blade 了，設計師再次修改 html 與 css 會怎麼樣呢？工程師需要將設計師修改的 html、css 與 blade 作比對，將兩著差異更新到 blade 的 layout - view 結構，而且這樣的修改會一再發生。</p>
<p>要怎麼解決這樣的重工呢？我們想到的解法是</p>
<p>「讓設計師學會基本的 laravel 及 blade，與工程師一同修改 blade」</p>
<p>那麽如果設計師喜歡使用 jade (pug) 呢？使用 blade 就沒有 jade (pug) 優美的語法及方便的 mixin 了（註: Laravel 5.4 有 view component 可以使用）。而且使用 blade 必須要有 php 執行環境，如果設計師只想快速驗證畫面，不想要跑起 php server 呢？</p>
<p>於是我們製作了一套將 jade 轉換爲 blade 的工作流程：</p>
<h2 id="改善的流程-使用-jade-pug-產生-blade"><a href="#改善的流程-使用-jade-pug-產生-blade" class="headerlink" title="改善的流程 - 使用 jade (pug) 產生 blade"></a>改善的流程 - 使用 jade (pug) 產生 blade</h2><p><img src="pug-to-blade-flow.png" alt="pug to blade flow"><br>見上圖</p>
<p>設計師與工程師寫 jade 及 less ，放在 fe-src ( FrontEnd Source) 目錄中，經過編譯 （compile, 或更貼切地應稱為 transpile) 轉為 html 及 css 至 fe-dest (frontend destination) 目錄，我們也將 javascript 及 image 放到此目錄，於是 fe-dest 目錄就是一個可以直接用瀏覽器預覽的靜態網站了。</p>
<p>在流程的最後，我們也同時自動將這些生成的 html 複製並命名為 .blade.php 到 laravel 的 view 路徑下，同時將靜態資源複製到 public 中，即完成了這套流程。</p>
<h2 id="要如何使用這套流程？"><a href="#要如何使用這套流程？" class="headerlink" title="要如何使用這套流程？"></a>要如何使用這套流程？</h2><h3 id="目錄結構"><a href="#目錄結構" class="headerlink" title="目錄結構"></a>目錄結構</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">fe-src</div><div class="line">├── less</div><div class="line">│   ├── _variables.less</div><div class="line">│   └── app.less</div><div class="line">└── pug</div><div class="line">    ├── _layout</div><div class="line">    │   └── app.pug</div><div class="line">    └── index.pug</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">fe-dest</div><div class="line">├── css</div><div class="line">│   └── app.css</div><div class="line">└── pug</div><div class="line">    └── index.html</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public</div><div class="line">└── css</div><div class="line">    └── app.css</div><div class="line"></div><div class="line">resources</div><div class="line">└── views</div><div class="line">    └── index.blade.php</div></pre></td></tr></table></figure>
<h3 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">init:</div><div class="line">    yarn add gulp gulp-pug gulp-less gulp-filter gulp-notify gulp-sourcemaps gulp-autoprefixer browser-sync @unisharp/gulp-pug-inheritance</div><div class="line"></div><div class="line">fe-build:</div><div class="line">    ./node_modules/.bin/gulp</div><div class="line"></div><div class="line">watch:</div><div class="line">    ./node_modules/.bin/gulp watch</div></pre></td></tr></table></figure>
<h3 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">const gulp = require(&apos;gulp&apos;);</div><div class="line">const pug = require(&apos;gulp-pug&apos;);</div><div class="line">const less = require(&apos;gulp-less&apos;);</div><div class="line">const filter = require(&apos;gulp-filter&apos;);</div><div class="line">const notify = require(&apos;gulp-notify&apos;);</div><div class="line">const sourcemaps = require(&apos;gulp-sourcemaps&apos;);</div><div class="line">const autoprefixer = require(&apos;gulp-autoprefixer&apos;);</div><div class="line">const browserSync = require(&apos;browser-sync&apos;).create();</div><div class="line">const pugInheritance = require(&apos;@unisharp/gulp-pug-inheritance&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;pug&apos;, () =&gt;</div><div class="line">  gulp.src(&apos;fe-src/pug/**/*.pug&apos;)</div><div class="line">      .pipe(filter(file =&gt; !/\/fe-src\/pug\/_/.test(file.path)))</div><div class="line">      .pipe(pug(&#123; pretty: true &#125;))</div><div class="line">      .on(&apos;error&apos;, notify.onError(&apos;Error: &lt;%= error.message %&gt;&apos;))</div><div class="line">      .pipe(gulp.dest(&apos;fe-dest&apos;))</div><div class="line">      .pipe(notify(&apos;File: fe-dest/&lt;%= file.relative %&gt; Compiled!&apos;))</div><div class="line">      .pipe(rename(&#123; extname: &apos;.blade.php&apos; &#125;))</div><div class="line">      .pipe(gulp.dest(&apos;resources/views&apos;))</div><div class="line">      .pipe(notify(&apos;File: resources/views/&lt;%= file.relative %&gt; Compiled!&apos;))</div><div class="line">);</div><div class="line"></div><div class="line">gulp.task(&apos;less&apos;, () =&gt;</div><div class="line">  gulp.src(&apos;fe-src/less/app.less&apos;)</div><div class="line">      .pipe(sourcemaps.init())</div><div class="line">      .pipe(sass())</div><div class="line">      .on(&apos;error&apos;, notify.onError(&apos;Error: &lt;%= error.message %&gt;&apos;))</div><div class="line">      .pipe(autoprefixer(&#123; browsers: [&apos;last 2 versions&apos;] &#125;))</div><div class="line">      .pipe(sourcemaps.write(&apos;.&apos;))</div><div class="line">      .pipe(gulp.dest(&apos;fe-dest/css&apos;))</div><div class="line">      .pipe(notify(&apos;File: fe-dest/css/&lt;%= file.relative %&gt; Compiled!&apos;))</div><div class="line">      .pipe(browserSync.stream(&#123; match: &apos;**/*.css&apos; &#125;))</div><div class="line">      .pipe(gulp.dest(&apos;public/css&apos;))</div><div class="line">      .pipe(notify(&apos;File: public/css/&lt;%= file.relative %&gt; Compiled!&apos;))</div><div class="line">);</div><div class="line"></div><div class="line">gulp.task(&apos;watch&apos;, () =&gt; &#123;</div><div class="line">  browserSync.init(&#123;</div><div class="line">    host: &apos;0.0.0.0&apos;,</div><div class="line">    server: &apos;fe-dest&apos;,</div><div class="line">    open: false</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  gulp.watch(&apos;fe-src/pug/**/*.pug&apos;, e =&gt;</div><div class="line">    gulp.src(e.path, &#123; base: &apos;fe-src/pug&apos; &#125;)</div><div class="line">        .pipe(pugInheritance(&apos;fe-src/pug/**/*.pug&apos;))</div><div class="line">        .pipe(filter(file =&gt; !/\/fe-src\/pug\/_/.test(file.path)))</div><div class="line">        .pipe(pug(&#123; pretty: true &#125;))</div><div class="line">        .on(&apos;error&apos;, notify.onError(&apos;Error: &lt;%= error.message %&gt;&apos;))</div><div class="line">        .pipe(notify(&apos;File: fe-dest/&lt;%= file.relative %&gt; Compiled!&apos;))</div><div class="line">        .pipe(rename(&#123; extname: &apos;.blade.php&apos; &#125;))</div><div class="line">        .pipe(gulp.dest(&apos;resources/views&apos;))</div><div class="line">        .pipe(notify(&apos;File: resources/views/&lt;%= file.relative %&gt; Compiled!&apos;))</div><div class="line">        .pipe(browserSync.reload(&#123; stream: true &#125;))</div><div class="line">  );</div><div class="line">  gulp.watch(&apos;./fe-src/less/**/*.less&apos;, [&apos;less&apos;]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, [&apos;pug&apos;, &apos;less&apos;]);</div></pre></td></tr></table></figure>
<h3 id="第一次執行"><a href="#第一次執行" class="headerlink" title="第一次執行"></a>第一次執行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make init</div></pre></td></tr></table></figure>
<h3 id="編譯"><a href="#編譯" class="headerlink" title="編譯"></a>編譯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make fe-build</div></pre></td></tr></table></figure>
<h3 id="LiveReload"><a href="#LiveReload" class="headerlink" title="LiveReload"></a>LiveReload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make watch</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這篇文章介紹一套使用 Laravel 配合 Jade (Pug) 作為樣板引擎的工作流程，這套流程我們已經使用了近三年，解決了許多工程師與設計師在合作上的重工，希望對你們有幫助 :)&lt;/p&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="Laravel" scheme="http://blog.unisharp.com/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>所有決議都必須留下紀錄 - 凡走過，必留下痕跡</title>
    <link href="http://blog.unisharp.com/2017/02/14/%E6%89%80%E6%9C%89%E6%B1%BA%E8%AD%B0%E9%83%BD%E5%BF%85%E9%A0%88%E7%95%99%E4%B8%8B%E7%B4%80%E9%8C%84%20-%20%E5%87%A1%E8%B5%B0%E9%81%8E%EF%BC%8C%E5%BF%85%E7%95%99%E4%B8%8B%E7%97%95%E8%B7%A1/"/>
    <id>http://blog.unisharp.com/2017/02/14/所有決議都必須留下紀錄 - 凡走過，必留下痕跡/</id>
    <published>2017-02-13T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>師父跟我說，不管你用什麼方式或工具跟客戶討論事情，一定要留下紀錄，這件事情非常重要，一定要徹底執行。</p>
<p>因為人總是健忘的，不管是客戶或是我們，當下覺得理所當然的決議，可能過了一個禮拜，很多的枝微細節，一定會被遺忘，沒有例外。<br><a id="more"></a><br>以下舉幾個實務的作法：</p>
<h2 id="會議討論-電話溝通"><a href="#會議討論-電話溝通" class="headerlink" title="會議討論/電話溝通"></a>會議討論/電話溝通</h2><p>開完會或講完電話有共識後，一定要發一封信，說明剛剛的決議（會議記錄）。</p>
<p>師父不喜歡很死板的會議記錄，所以他通常要我發出決議內容就好，大概可以這麼寫：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Hi Jason,</div><div class="line"></div><div class="line">根據中秋節烤肉專案的流程議題，剛剛已經在電話內跟您討論過，以下為最終的結論：</div><div class="line">1. 採買人員每次出發前往採買前，必須填寫『採購清單』，並且經由總務部主管審核通過，才可出發採買。</div><div class="line">2. 生火人員必須遵照『木炭排列SOP』之流程，排列木炭；生火場所必須在空氣流通的地方。</div><div class="line">3. .....</div><div class="line">4. .....</div><div class="line">5. 烤肉人員所烤出的第一片肉，一定要讓大門警衛先品嚐。</div><div class="line"></div><div class="line">以上五點需請相關人員遵守，若因違反上述規定，而造成食物美味不如預期，我司將不負責處理。</div><div class="line">上述之決議將於 12/04 開始實施，若您有任何疑慮，請在明天(12/03)之前跟我聯絡。</div><div class="line"></div><div class="line">謝謝您，祝您順心。</div><div class="line"></div><div class="line">Peggy 2016/12/02</div></pre></td></tr></table></figure>
<p>記得，這封信除了寄給客戶之外，也一定要 CC 給對方的相關人員，還有自己的職務代理人（或相關人員），未來若真的需要查這個議題時，也比較好追查。</p>
<h2 id="使用通訊軟體溝通"><a href="#使用通訊軟體溝通" class="headerlink" title="使用通訊軟體溝通"></a>使用通訊軟體溝通</h2><p>在專案執行過程中，難免會用通訊軟體（Line/Skype/Slack/ etc）跟客戶討論事情，有時候整個對話過程經過了一個小時，才有結論。</p>
<p>若是有結論後，就直接結束了這個話題，會被師父罵。</p>
<p>那應該怎麼作呢？我們來看一下這個情境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Peggy：Hi Jason, 你有空嗎？想要討論一下中秋節烤肉專案的流程議題。</div><div class="line">Jason：好啊，怎麼了嗎？</div><div class="line">Peggy：採買人員填寫完採購清單就可以去採買了嗎？</div><div class="line">Jason：是啊</div><div class="line">Peggy：但是之前你不是有說這樣子沒有人把關，怕採買人員亂買。</div><div class="line">Jason：對齁！！！</div><div class="line">Jason：不然必須讓總務部主管審核通過才可以採買</div><div class="line">Peggy：好，沒問題。</div><div class="line">Jason：...(下略一千字)</div><div class="line">Peggy：...(下略一千字)</div><div class="line">Peggy：所以烤肉人員所烤出的第一片肉，一定要讓大門總機先品嚐。</div><div class="line">Jason：沒錯。</div><div class="line">Peggy：好的，我知道了，那先這樣囉，謝謝。</div><div class="line">Jason：881</div></pre></td></tr></table></figure>
<p>感覺上面的對話已經有結論了，害我被師父罵的原因是什麼呢？</p>
<blockquote>
<p>你的結論，不一定是客戶心中的那個畫面</p>
</blockquote>
<p>正確的作法是這樣：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Peggy：Hi Jason, 你有空嗎？想要討論一下中秋節烤肉專案的流程議題。</div><div class="line">Jason：好啊，怎麼了嗎？</div><div class="line">Jason：...(下略一千字)</div><div class="line">Peggy：...(下略一千字)</div><div class="line">Peggy：所以烤肉人員所烤出的第一片肉，一定要讓大門總機先品嚐。</div><div class="line">Jason：沒錯。</div><div class="line">Peggy：根據我們前面說的，大致可以歸納成五點：</div><div class="line">Peggy：1. 採買人員每次出發前往採買前....</div><div class="line">Peggy：2. 生火人員必須遵照『木炭排列SOP』之流程...</div><div class="line">Peggy：3. .....</div><div class="line">Peggy：4. .....</div><div class="line">Peggy：5. 烤肉人員所烤出的第一片肉，一定要讓大門總機先品嚐。</div><div class="line">Peggy：上面這樣對嗎？</div><div class="line">Jason：啊！！不是！我說錯了，應該是讓大門警衛品嚐啦，我剛頭暈講錯了</div><div class="line">Peggy：好，那我改一下：</div><div class="line">Peggy：============(這是分隔線)==============</div><div class="line">Peggy：1. 採買人員每次出發前往採買前....</div><div class="line">Peggy：2. 生火人員必須遵照『木炭排列SOP』之流程...</div><div class="line">Peggy：3. .....</div><div class="line">Peggy：4. .....</div><div class="line">Peggy：5. 烤肉人員所烤出的第一片肉，一定要讓大門警衛先品嚐。</div><div class="line">Peggy：以上五點</div><div class="line">Jason：是的，完全正確。</div><div class="line">Peggy：好的，那我會一併把上面這五點結論發一封信出來。</div><div class="line">Jason：好，辛苦你了，881</div></pre></td></tr></table></figure>
<p>看到了嗎？連這裡都要下結論，我真的好累～你要的我都學不會～</p>
<p>不只是這樣，最後還要發一封信給客戶，把剛剛的結論再說一次（內容就跟會議討論/電話溝通那封信一樣就好），還要把通訊軟體最後的決議畫面截圖下來，放在這封信件當附件。</p>
<p>這張截圖一定要有這五點決議內容，與客戶回覆說『沒問題』的會談過程（大概就是從『分隔線』一直到最後的『辛苦你了，881』）。</p>
<p>雖然上面這些步驟比較花功夫，但不可否認的，這些真的很有效。</p>
<p>師父用這些招式，狠狠的打了許多澳洲客人的臉，讓我崇拜不已（不過，師父他到底怎麼從信件大海裡面撈出他要的這些證據啊….）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;師父跟我說，不管你用什麼方式或工具跟客戶討論事情，一定要留下紀錄，這件事情非常重要，一定要徹底執行。&lt;/p&gt;
&lt;p&gt;因為人總是健忘的，不管是客戶或是我們，當下覺得理所當然的決議，可能過了一個禮拜，很多的枝微細節，一定會被遺忘，沒有例外。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="溝通" scheme="http://blog.unisharp.com/tags/%E6%BA%9D%E9%80%9A/"/>
    
      <category term="會議" scheme="http://blog.unisharp.com/tags/%E6%9C%83%E8%AD%B0/"/>
    
  </entry>
  
  <entry>
    <title>觀察實體世界中的「使用者體驗」</title>
    <link href="http://blog.unisharp.com/2017/02/13/%E8%A7%80%E5%AF%9F%E5%AF%A6%E9%AB%94%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E3%80%8C%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97%E3%80%8D/"/>
    <id>http://blog.unisharp.com/2017/02/13/觀察實體世界中的「使用者體驗」/</id>
    <published>2017-02-12T16:00:00.000Z</published>
    <updated>2017-04-25T08:05:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>網路產業近幾年來出現許多如「User Experience」、「Big Data」等被視為趨勢的名詞，衍伸的職務「使用者經驗設計師」、「數據分析師」也是網路圈中的熱門話題，相關的交流和講座一直都相當熱絡，各種分析數據、使用者的工具<br><a id="more"></a><br>也不斷的推陳出新。而這些研究和分析最終的核心精神，都是希望能夠全方位的了解使用者，並盡可能的讓使用者與產品接觸時有良好的使用體驗。</p>
<p>雖然這些名詞近幾年才出現，但我一直認為，為使用者提供良好體驗這件事，其實一直都存在於實體世界中，甚至是被譽為經營之神的王永慶，也早在好幾十年前就已經開始做這些事情了。</p>
<blockquote>
<p>王永慶15歲小學畢業後，到一家小米店做學徒。第二年，他用父親借來的200元錢做本金自己開了一家小米店。為了和隔壁那家日本米店競爭，王永慶頗費了一番心思。</p>
<p>當時大米加工技術比較落後，出售的大米里混雜著米糠、沙粒、小石頭等，買賣雙方都是見怪不怪。王永慶則多了一個心眼，每次賣米前都把米中的雜物揀乾淨，這一額外的服務深受顧客歡迎。</p>
<p>王永慶賣米多是送米上門，他在一個本子上詳細記錄了顧客家有多少人、一個月吃多少米、何時發薪等。算算顧客的米該吃完了，就送米上門；等到顧客發薪的日子，再上門收取米款。</p>
<p>他給顧客送米時，並非送到就算。他先幫人家將米倒進米缸里。如果米缸里還有米，他就將舊米倒出來，將米缸刷乾淨，然後將新米倒進去，將舊米放在上層。這樣，米就不至於因陳放過久而變質。他這個小小的舉動令不少顧客深受感動，鐵了心專買他的米。</p>
<p>就這樣，他的生意越來越好。從這家小米店起步，王永慶最終成為今日台灣工業界的「龍頭老大」。</p>
</blockquote>
<p>是不是覺得有點熟悉？王永慶當年在筆記本上紀錄顧客的消費資訊，並依此優化顧客的消費體驗，不就跟現在UX和Big Data的在做的事情相同嗎。只是隨著時代和科技的改變，紀錄的方式從手寫的筆記本變成了網路上的程式，但提供良好體驗的核心精神並沒有不同。</p>
<p><img src="img_20170213_02.jpg" alt="使用者體驗"></p>
<p>這樣的核心精神也存在於實體世界的各行各業中。回想一下自己在餐廳用餐時的經驗，服務人員觀察顧客們的用餐情況，餐點有沒有打翻，水是不是已經喝完，然後即時的提供服務。這跟我們透過熱點分析、點擊率等方式了解使用者如何使用網站和APP，本質上並沒有不同，都是去了解使用者使用產品時的情形，然後將不符預期或造成使用者困擾的部分修正掉。</p>
<p>未來在幫任何產品做UX優化時都要提醒自己，不管「使用者體驗」這個名詞如何變更，測試和紀錄數據的工具如何推陳出新，都不要迷失在這些名詞或工具的絢麗技術裡。將目光放遠停留在真正的使用者身上，讓使用者有更加良好的使用體驗，才是我們的最終目的！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;網路產業近幾年來出現許多如「User Experience」、「Big Data」等被視為趨勢的名詞，衍伸的職務「使用者經驗設計師」、「數據分析師」也是網路圈中的熱門話題，相關的交流和講座一直都相當熱絡，各種分析數據、使用者的工具&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="UX" scheme="http://blog.unisharp.com/tags/UX/"/>
    
  </entry>
  
  <entry>
    <title>凱特的花蓮觀遊集錦</title>
    <link href="http://blog.unisharp.com/2017/01/17/%E5%87%B1%E7%89%B9%E7%9A%84%E8%8A%B1%E8%93%AE%E8%A7%80%E9%81%8A%E9%9B%86%E9%8C%A6/"/>
    <id>http://blog.unisharp.com/2017/01/17/凱特的花蓮觀遊集錦/</id>
    <published>2017-01-16T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>自從蘇花開通後，東部像是多了一道門，越來越多親朋好友、你鄰居、我厝邊、他涅波虎，不遠千里來到東部踏踏青，離門口最近的宜蘭被開發地早，後來花蓮也相繼有蓬勃的發展。<br>小編當年看著一個學校簡介，被迷惑地不要不要的，就這麼來到了花蓮<br><a id="more"></a><br>，一待就是五年，從原始（ㄏ ㄨ ㄤ ㄌ ㄧ ㄤˊ）的景色到改建後的繁華景象，<br>真心覺得這一趟旅程，像是在時空中穿梭般，令我難忘！是一個此生必遊一次的好地方，所以小編特別整理出一小部分（跋山涉水就不收錄了）的景點，也都是小編直到現在仍然一訪再訪的景點。</p>
<h1 id="花蓮景點"><a href="#花蓮景點" class="headerlink" title="花蓮景點"></a>花蓮景點</h1><h3 id="知卡宣公園"><a href="#知卡宣公園" class="headerlink" title="知卡宣公園"></a>知卡宣公園</h3><ul>
<li>地址：花蓮縣吉安鄉中正路二段299號 (花蓮監理站對面)</li>
<li>開放時間：8:00~18:00 (戲水區僅暑期開放)</li>
<li>門票：免費</li>
<li>參考文：<br>[暑期版] <a href="http://ppt.cc/jfpqa" target="_blank" rel="external">http://ppt.cc/jfpqa</a><br>[非暑期版] <a href="http://ppt.cc/xJ4Sn" target="_blank" rel="external">http://ppt.cc/xJ4Sn</a><blockquote>
<p>小編推薦：園區內包含植物園區、迷宮樹叢和各式大大小小植物與花的造景，也有小朋友遊憩區，非常適合拍照。園區佔地面積不小，建議停留兩小時以上。</p>
</blockquote>
</li>
</ul>
<h3 id="台肥海洋深層水園區"><a href="#台肥海洋深層水園區" class="headerlink" title="台肥海洋深層水園區"></a><del>台肥海洋深層水園區</del></h3><ul>
<li>參考文： <a href="http://ppt.cc/XWm14" target="_blank" rel="external">http://ppt.cc/XWm14</a><blockquote>
<p>小編大驚！！台肥海洋深層水園區全面設備檢修公告， 最後營業日為2016年11月28日。</p>
</blockquote>
</li>
</ul>
<h3 id="花蓮太平洋公園（原南濱公園）-北濱公園-北濱外環道-和平公園鏈狀行程"><a href="#花蓮太平洋公園（原南濱公園）-北濱公園-北濱外環道-和平公園鏈狀行程" class="headerlink" title="花蓮太平洋公園（原南濱公園）+ 北濱公園 + 北濱外環道+和平公園鏈狀行程"></a>花蓮太平洋公園（原南濱公園）+ 北濱公園 + 北濱外環道+和平公園鏈狀行程</h3><ul>
<li>地址：<br>南濱公園大門口位在『台11線』『和平路』路口。<br>北濱公園汽車入口位在『北濱街』『海濱街』交接處，直行5公尺後右前方就是了（很容易錯過呦）。<br>和平公園在北濱公園往北過去一點，很明顯(找不到不要揍小編，要去配新眼鏡喔XD)。<br><img src="北濱外環道.png" alt="北濱外環道"></li>
<li>開放時間：24hr</li>
<li>門票：免費</li>
<li>參考文：<br>[太平洋公園] <a href="http://ppt.cc/IOSAM" target="_blank" rel="external">http://ppt.cc/IOSAM</a><br>[北濱公園] <a href="http://ppt.cc/rqWNN" target="_blank" rel="external">http://ppt.cc/rqWNN</a><br>[和平公園] <a href="http://ppt.cc/NJmBf" target="_blank" rel="external">http://ppt.cc/NJmBf</a><blockquote>
<p>小編推薦：太平洋公園是個適合拍照、看海的景點，可是小編找不到有關「觀音大佛涼亭」和另一側高台的旅遊文（愁眉），部落客怎麼會不知道上面可以眺望太平洋呢！！！<br>建議您可以沿著自行車步道，一路漫遊、愜意地與太平洋交換心情，向北行，可一路通往北濱公園。<br>這裡，小編提醒徒步的遊客，準備好跑半馬的精神，或者，轉而開車、騎車沿著海濱街一路向北（千萬不要回頭，因為濱海街是單向道XD由北向南行請改走隔壁的北濱街）<br><img src="南濱北濱大門.png" alt="南濱北濱大門"><br>晚上整條自行車道會打燈，當然這裡的光廊還稱不上五光十色，對於在外當遊子的小編來說，卻也有它單純的投射、簡單的浪漫。只是，提醒大家，這裡晚上人不多請注意安全。<br>接著，北濱公園相較之下，就比較小一點，除了幾個藝術裝置可以拍拍照之外，同樣能欣賞太平洋，不小心在廣場還會偶遇表演團體（很少）。<br>對小編來說，這裡最美的回憶是沙灘排球，所以不要問我是不是「好山好水好無聊」XD 有心，哪兒都是最美的風景呀，您說是吧～？<br>最後，和平公園是一個翻新後的小公園，新設了一個『和平鐘』，聽說敲敲鐘可以許願（搞得像是神社，不過要記得還願喔XD）。<br>偷偷說，小編曾在半夜兩點多，夜遊去!!敲鐘!!，當時我許一個世界和平（笑，暫時還不用還願）。因為自覺有點白目，還探了個頭，確定應該沒有人來投訴吧（拍謝啦）</p>
</blockquote>
</li>
</ul>
<h3 id="吉安慶修院"><a href="#吉安慶修院" class="headerlink" title="吉安慶修院"></a>吉安慶修院</h3><ul>
<li>地址：973花蓮縣吉安鄉吉安村中興路345-1號</li>
<li>開放時間：08:30~17:00</li>
<li>門票：全票 30 半票 15</li>
<li>參考文：<a href="http://ppt.cc/ZwkQi" target="_blank" rel="external">http://ppt.cc/ZwkQi</a><blockquote>
<p>小篇推薦：這裡是個…拜拜的地方，其實以前有幾座「巨型橡棋桌」，現在已經撤掉，多了Q版神明，也多了一點銷售中心的味道，<br>但是小編就是喜歡這裡的日式建築和庭院深深深幾許的味道。小編提醒週末假日遊客甚多。<br><img src="慶修院象棋桌.png" alt="慶修院象棋桌"></p>
</blockquote>
</li>
</ul>
<h1 id="花蓮美食"><a href="#花蓮美食" class="headerlink" title="花蓮美食"></a>花蓮美食</h1><h3 id="東大門"><a href="#東大門" class="headerlink" title="東大門"></a>東大門</h3><ul>
<li>炸螃蟹 <a href="http://ppt.cc/5rNgz" target="_blank" rel="external">http://ppt.cc/5rNgz</a><blockquote>
<p>小編推薦：小編覺得當零食、配啤酒都不錯！</p>
</blockquote>
</li>
</ul>
<h3 id="蒲公英歐風甜點"><a href="#蒲公英歐風甜點" class="headerlink" title="蒲公英歐風甜點"></a>蒲公英歐風甜點</h3><ul>
<li>地址：花蓮市忠義二街12號</li>
<li>營業時間：13:00~19:00 (週三、四公休)</li>
<li>參考文：<a href="http://ppt.cc/GDJHr" target="_blank" rel="external">http://ppt.cc/GDJHr</a><blockquote>
<p>小編推薦：當年花蓮第一家正港洋果子「法式邊境」入駐，小編也是愛到一個不要不要的，沒有它的出現，小編可能會一直屈就於…喔！<br>小編是說還有其他『百艾』、『蒨魔法』、『花漾洋菓子』、『棉花甜』、『喜品家』、『弘宇蛋糕』…等等的蛋糕也都很好吃喔（滴口水），小編有機會再推薦它們囉。<br>這裡只是要表達後來一堆人，爭先恐後地到法式邊境一嚐「藍帶來著的洋果子」，就這麼反骨地，小編發現第二家藍帶回來的點心店，個人很喜歡這家的檸檬塔。<br>店內裝潢和店外的電話亭，都是老闆當年旅經英國愛上的景色。雖然價位偏高，但是不訪來坐坐吧！</p>
</blockquote>
</li>
</ul>
<h3 id="一碗小"><a href="#一碗小" class="headerlink" title="一碗小"></a>一碗小</h3><ul>
<li>地址：花蓮市明禮路14巷1號</li>
<li>營業時間：週一～週日 11:00~14:00 17:00~20:00 (週三公休)</li>
<li>參考文：<a href="http://ppt.cc/ceUvK" target="_blank" rel="external">http://ppt.cc/ceUvK</a><blockquote>
<p>小編推薦：一碗小點餐很簡單 湯頭（清燉/紅燒）、肉（羊/牛）、主食（麵線/冬粉/拉麵/泡饃）各選一。<br>泡饃是什麼勒？泡饃是一種北方麵食，長得像是圓燒餅，口感厚實（偏硬），泡進湯裡後餅香吸附著湯頭的甜，別有一番風味。<br>小編清敦紅燒牛羊冬粉泡饃都吃過，因為小編口味偏淡，所以還是偏好清燉，羊肉不騷、牛肉不柴，肉鮮都滾進了湯頭裡，非常值得一吃！</p>
</blockquote>
</li>
</ul>
<h3 id="源寶屋咖哩麵包"><a href="#源寶屋咖哩麵包" class="headerlink" title="源寶屋咖哩麵包"></a>源寶屋咖哩麵包</h3><ul>
<li>地址：花蓮縣花蓮市仁愛街77號</li>
<li>營業時間：11:30~賣完為止</li>
<li>參考文： <a href="http://ppt.cc/UL3rT" target="_blank" rel="external">http://ppt.cc/UL3rT</a><blockquote>
<p>小編推薦：小編一直覺得咖哩麵包好像沒什麼特別的，奇怪了，好多朋友說『超好吃』！<br>小編半信半疑也走近了店舖，一瞧，看到是炸的！小編當場掉頭走人，我的媽呀，又是咖哩麵包又是炸的，小編完全無感呀。<br>後來，隔壁老王說：就吃一口，不喜歡也不會食物中毒，所以我咬了一口，竟然完全不油膩、咖哩還鹹甜地很有默契耶！不多說，有經過記得去吃一個！</p>
</blockquote>
</li>
</ul>
<h1 id="小編景點"><a href="#小編景點" class="headerlink" title="小編景點"></a>小編景點</h1><h3 id="翡翠谷"><a href="#翡翠谷" class="headerlink" title="翡翠谷"></a>翡翠谷</h3><ul>
<li>地址：翡翠谷（小編不是故意不告訴你 &gt; &lt; Google會告訴您走台9丙省道，在仁壽橋前轉入銅門村，從銅門橋北端附近沿木瓜溪旁山路步行而入即可到達翡翠谷『門牌』，請依牌子前進）</li>
<li>參考文：<a href="http://ppt.cc/xhl1V" target="_blank" rel="external">http://ppt.cc/xhl1V</a><blockquote>
<p>小編推薦：要進翡翠谷之前，記得配載『手電筒』，這很重要！因為您將穿越（大中午）伸手不見五指的蝙蝠洞，手機手電筒也僅能讓你看見前方一公尺範圍的路，是一個很難得的體驗，出洞口的剎那猶如走進桃花源之感。<br>接著，你可能需要帶上小編…的電話，依指示往上往下爬爬爬（小編實在是不知道該如何描述，容我跳過，想知道的話可以到<a href="https://www.facebook.com/UniSharpTech/" target="_blank" rel="external">粉絲團</a>留言喔），抵達這一處翡翠谷並不是一個壯麗的瀑布，卻有著小而美的流水，傾瀉而下，再匯聚成小溪流，炎熱的夏天很適合戲水（ㄒ一ˇ ㄐ一ㄠ ˇ），是一個安全的小瀑布。<br>但是，目前仍然沒有相關單位開拓道路，行徑路間有一段陡坡與鬆動的流石，不建議帶小朋友前往。</p>
</blockquote>
</li>
</ul>
<h3 id="雲山水-實地走訪優養化的湖泊"><a href="#雲山水-實地走訪優養化的湖泊" class="headerlink" title="雲山水 - 實地走訪優養化的湖泊"></a>雲山水 - 實地走訪優養化的湖泊</h3><ul>
<li>地址：花蓮縣壽豐鄉豐坪路二段2巷201弄12號</li>
<li>門票：免費</li>
<li>開放時間：24 hr</li>
<li>參考文：<a href="http://ppt.cc/FfQy9" target="_blank" rel="external">http://ppt.cc/FfQy9</a><blockquote>
<p>小編推薦：小編第一次走訪雲山水就深深被那一片數林與湖泊相映所吸引，當時周邊的民宿都還在挖地基。<br>兩三年後，民宿林立各具特色，幾處彩繪牆和可愛的木牌也增添攝影樂趣，這裡是小編覺得怎麼拍都詩情畫意的絕佳景點。<br>小編提醒，整個園區走一圈大概需要半小時。另外，以前雲山水入夜後無光，小編曾經夜探雲山水，驚見滿天星空，但是現在就不得而知了。</p>
</blockquote>
</li>
</ul>
<h3 id="牛山呼庭"><a href="#牛山呼庭" class="headerlink" title="牛山呼庭"></a>牛山呼庭</h3><ul>
<li>地址：花蓮縣壽豐鄉水璉村牛山39-5號（台11線約26.6公里）</li>
<li>門票：50 元/人，可以抵消費 50 元</li>
<li>開放時間：10:00~19:00</li>
<li>參考文：<a href="http://ppt.cc/mvdBo" target="_blank" rel="external">http://ppt.cc/mvdBo</a><blockquote>
<p>小編推薦：牛山呼庭一直都是私有地，所以收取門票還算合理。牛山呼庭後有一大片草地、木雕藝術作品和小木屋，前有一望無際之大海，也開放了海灘。<br>東部越來越多海灘和溪流被限制下水，而牛山呼庭仍保留了一大片海灘，實在難得，小編非常推薦晚霞時分坐一回，聆聽海浪拍打、落幕與海相輝映，<br>也可以往（面對）沙灘右方的岩洞中走（那兒浪比較平），那兒是電影『沈默』的拍攝場景悠，在岩邊攝影亦是好風光，<br>或是爬上草地最高處，依著『幸福鐘』眺望海洋也是一場浪漫。</p>
</blockquote>
</li>
</ul>
<h3 id="海中天-颱風天觀浪好去處"><a href="#海中天-颱風天觀浪好去處" class="headerlink" title="海中天 - 颱風天觀浪好去處"></a>海中天 - 颱風天觀浪好去處</h3><ul>
<li>地址：詳見七七高地</li>
<li>門票：免費，餐飲另外點餐付費</li>
<li>開放時間： 24hr</li>
<li>參考文：<a href="http://ppt.cc/nQgaV" target="_blank" rel="external">http://ppt.cc/nQgaV</a><blockquote>
<p>小編推薦：小編先承認在花蓮的日子幾度颱風天觀浪，特此聲明這是危險的行為『盡量』不要去做XD 其中一個景點就是「海中天」，這裡是民宿，但是有對外開放，不過如果您不是房客，您的車輛勁量不要開近民宿內的停車區（發揮愛心）。<br>小編推薦的契機只是一次觀浪，小編有一群傻子朋友聽見當天 14:00 陸上警報即將發佈，竟然說要去海中天觀浪，當時風大到每個人臉頰都啪嗒啪嗒響，浪就更不用說那是衝天地拍打，半山腰都已在海中，小編被那時的驚濤駭浪深深印了一個像。<br>其實呢～一般時日這兒的浪沒這麼雀躍啦，躺在觀景台的躺椅上看看浪花也是不錯、旁邊還有民宿老闆養的小動物（雞、鳥…等），有些關著、有些在外跑跑跳跳追著小朋友，可愛極了！<br>順帶一提，小編有張過這兒餐廳的價目表，想吃東西是有的，價位就是觀光價。</p>
</blockquote>
</li>
</ul>
<h3 id="七七高地"><a href="#七七高地" class="headerlink" title="七七高地"></a>七七高地</h3><ul>
<li>地址：過花蓮大橋（小編自作主張稱它是遠雄大橋）行經台11丙公路往台東方向，看見海中天扛棒，有兩條岔路，右邊往海中天，左邊就是往七七高地。<br><img src="七七高地地理位置.png" alt="七七高地地理位置"><br><img src="七七高地海中天入口.png" alt="七七高地海中天入口"></li>
<li>門票：免費</li>
<li>開放時間：24hr（但是晚上沒有燈喔！）</li>
<li>參考文：<a href="http://ppt.cc/Up3Bb" target="_blank" rel="external">http://ppt.cc/Up3Bb</a><blockquote>
<p>小編推薦：小編又要提到一群傻子朋友，腦子裡沒一個計畫的，盡是精血衝腦地說走就走、說轉就轉，還特別喜歡找一些『這時間去那幹嘛』的地方，沒錯，晚上八點說晚不晚，可是七七高地上沒燈啊！<br>一群傻子（包括小篇本人，遮臉）搬上烤肉架，衝去生鮮超市買些菜啊肉的，就上去烤肉看星星，那時我以為七七高地只是個看星星的好去處。<br>其實，白天可以看太平洋耶！而且遠眺花蓮大橋到七星潭一覽無遺，雖然同樣是看海，七星潭是近距離的體驗、南濱北濱那是退了幾步感受海浪的奔騰、上了山的七七高地看的是海的寧靜與遼闊，不同的高度，那感覺還是很不一樣的。<br>當然，花蓮看海的地方這裡還繁不及備載！下次走訪遠雄何不順道登山一趟吧！小編補充，有部落客不建議開車上去，但是到達丘頂其實路程不近（約），騎車上去只需要注意草滑，而開車上去會有刮底盤的必要，所以步行、騎車或開車自行斟酌囉！ </p>
</blockquote>
</li>
</ul>
<h1 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h1><p>花蓮現在可是日新月異，如果有更多新消息，拜託來<a href="https://www.facebook.com/UniSharpTech/" target="_blank" rel="external">粉絲團</a>留言跟小編分享喔！小編也會不定期發文，分享更新的旅遊資訊喔！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自從蘇花開通後，東部像是多了一道門，越來越多親朋好友、你鄰居、我厝邊、他涅波虎，不遠千里來到東部踏踏青，離門口最近的宜蘭被開發地早，後來花蓮也相繼有蓬勃的發展。&lt;br&gt;小編當年看著一個學校簡介，被迷惑地不要不要的，就這麼來到了花蓮&lt;br&gt;
    
    </summary>
    
      <category term="生活雜記" scheme="http://blog.unisharp.com/categories/%E7%94%9F%E6%B4%BB%E9%9B%9C%E8%A8%98/"/>
    
    
      <category term="旅遊" scheme="http://blog.unisharp.com/tags/%E6%97%85%E9%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>溝通-活用本質力</title>
    <link href="http://blog.unisharp.com/2017/01/06/%E6%BA%9D%E9%80%9A-%E6%B4%BB%E7%94%A8%E6%9C%AC%E8%B3%AA%E5%8A%9B/"/>
    <id>http://blog.unisharp.com/2017/01/06/溝通-活用本質力/</id>
    <published>2017-01-05T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>人類最常進行的就是「溝通」，但很多時候都會出現「溝通不良」導致需求認知有落差。<br>我覺得，溝通的目的就是溝通，聆聽到對方在乎的部分與讓對方收到我想表達的內容，雙方認知能夠同步才是最重要的結果。<br><a id="more"></a></p>
<p>在與業主打交道很常遇見！</p>
<blockquote>
<p>『啊！這個操作模式我不習慣耶！』</p>
<p>『這個畫面怎麼跟我想的不一樣？』</p>
<p>『新增為什麼要開新視窗？我想在原來畫面進行就夠了！』</p>
</blockquote>
<p>業主會埋怨：這不是應該是設計師的 common sense 嘛？哪有人這樣設計的？</p>
<p>是，常常認知落差最後的一根稻草，正是所謂的 common sense。</p>
<p>到底要怎麼「溝通」？到達什麼標準才算是真正的有 sense？</p>
<p>到這邊！先跳脫一下，以生物學來看看甚麼是溝通</p>
<p>溝通來自於意識，意識來自於人腦對刺激的反應，當感官接受刺激時，這些刺激轉化為電或化學信號，通過神經纖維傳導到大腦，在大腦中沿著相連的神經網路通道進行傳導。直到對外界刺激形成有效反應時輸入終止。傳導的過程，即意識的過程。</p>
<p>每個人對外界刺激會因天生的構造與後天的記憶，最終產生不一樣的，回應！</p>
<p>在演化過程中，為了節省能量消耗，大腦會出現一種稱之神經走道（記憶走道），的快速處理方式，可稱之為思維偏好。</p>
<p>所以，能了解自己的思維偏好與溝通對象的思維偏好，更能快速與有效地完成目的。</p>
<p>全腦思維科學分析 (Emergenetics Science) 的核心概念。每個人其實都有與生俱來的「本質天賦」，只是許多人都不清楚，透過全腦思維分析獨創的本質個性測驗與解說，就能找出每個人潛藏的「本質天賦」。此外，當你學會如何了舉別人的性格特質後，也就知道該怎麼和他溝通，彼此的互動自然順暢無礙。（如果有興趣，可以找〈活用你的本質力〉這本書對於全腦思維科學分析有更深入的介紹）。</p>
<p>在全腦思維科學分析中，會將思考偏好分成四大類概念型，社交型，分析型，結構型。</p>
<ul>
<li>概念型<ul>
<li>重視創造性</li>
<li>想像力豐富</li>
<li>喜歡挑戰新事物</li>
</ul>
</li>
<li>社交型<ul>
<li>重視他人的評價</li>
<li>重視與他人的關係</li>
<li>依靠直覺評斷他人</li>
</ul>
</li>
<li>分析型<ul>
<li>理論性思考</li>
<li>重視目的，原因</li>
<li>理性</li>
</ul>
</li>
<li>結構型<ul>
<li>重視可行性</li>
<li>務實</li>
<li>對新事物較謹慎</li>
</ul>
</li>
</ul>
<p>一般來說，每個人都有這四種偏好，只不過優先順序不一樣，<br>舉個例子來說向某人問: 我們週六出去玩好不好！<br>不同類型的人，考慮去不去的優先順序會不一樣</p>
<ul>
<li>概念型：玩什麼，好不好玩？</li>
<li>社交型：跟誰去，還有誰啊？</li>
<li>分析型：為什麼要去玩，為什麼找我啊？</li>
<li>結構型：我先想想週六有沒有空？我可以去嗎？</li>
</ul>
<p>每個人都有自己的本質，若不能了解每個人都有不同的特質於思考偏好，那麼就容易引起生活中的溝通不良。</p>
<p>比方說，概念型偏好約結構型的朋友要出去玩，結構型朋友的週六有事情不能去，概念型的朋友一直在跟他說那裡真得很好玩！<br>就會變成：</p>
<blockquote>
<p>「為什麼那個人聽不懂我說的話？」</p>
<p>「他怎能老是愛跟我唱反調？」</p>
</blockquote>
<p>這些都起因於我們忘了或是忽略每個人的不同，無法採取適合對方本質的溝通方法才會如此。</p>
<p>因此，唯有理解自己與對方各自擁有的特性，才有機會建立彼此良好的溝通模式。</p>
<p>也就是用雙方都感到舒服的方式讓溝通更順暢無礙。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人類最常進行的就是「溝通」，但很多時候都會出現「溝通不良」導致需求認知有落差。&lt;br&gt;我覺得，溝通的目的就是溝通，聆聽到對方在乎的部分與讓對方收到我想表達的內容，雙方認知能夠同步才是最重要的結果。&lt;br&gt;
    
    </summary>
    
      <category term="專案管理" scheme="http://blog.unisharp.com/categories/%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="溝通" scheme="http://blog.unisharp.com/tags/%E6%BA%9D%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>閱讀體驗不好的程式碼</title>
    <link href="http://blog.unisharp.com/2016/12/09/%E9%96%B1%E8%AE%80%E9%AB%94%E9%A9%97%E4%B8%8D%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC/"/>
    <id>http://blog.unisharp.com/2016/12/09/閱讀體驗不好的程式碼/</id>
    <published>2016-12-08T16:00:00.000Z</published>
    <updated>2017-08-17T07:57:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>談到 UX 時，通常都是在討論介面直不直覺、漂亮與否、操作好不好上手等等。然而在開發專案時，還有一個很重要 UX，那就是程式碼的閱讀體驗。<br><a id="more"></a><br>如果專案中重複的 code 一大堆，又或者 function 命名模稜兩可，又看不到任何的註解，想必會讓日後接著維護的人（99% 都是幾個禮拜後的自己）難以下手，為了修改一個小小的功能卻花的很多不必要的時間。</p>
<h2 id="發生閱讀問題的情境"><a href="#發生閱讀問題的情境" class="headerlink" title="發生閱讀問題的情境"></a>發生閱讀問題的情境</h2><p>以下是可能發生在開發中的一些現象或是操作行為，逐項列出了造成閱讀體驗不好的原因：</p>
<h4 id="一直滾動滑鼠滾輪"><a href="#一直滾動滑鼠滾輪" class="headerlink" title="一直滾動滑鼠滾輪"></a>一直滾動滑鼠滾輪</h4><ul>
<li>原因：function 過長</li>
</ul>
<h4 id="一直全域搜尋"><a href="#一直全域搜尋" class="headerlink" title="一直全域搜尋"></a>一直全域搜尋</h4><ul>
<li>原因：function 過長，導致不容易回到 function 的開頭，於是不斷使用搜尋</li>
</ul>
<h4 id="同一個-function，每一次都必須查看裡面的-code-才能明白-function-含義"><a href="#同一個-function，每一次都必須查看裡面的-code-才能明白-function-含義" class="headerlink" title="同一個 function，每一次都必須查看裡面的 code 才能明白 function 含義"></a>同一個 function，每一次都必須查看裡面的 code 才能明白 function 含義</h4><ul>
<li>原因： function 命名不當，無法表達其含義</li>
</ul>
<h4 id="不斷的向上追朔原始碼"><a href="#不斷的向上追朔原始碼" class="headerlink" title="不斷的向上追朔原始碼"></a>不斷的向上追朔原始碼</h4><ul>
<li>原因：呼叫的層數太多</li>
<li>例子：Laravel 原始碼</li>
</ul>
<h4 id="每一次都必須查看全域常數的值，才知道變數含義"><a href="#每一次都必須查看全域常數的值，才知道變數含義" class="headerlink" title="每一次都必須查看全域常數的值，才知道變數含義"></a>每一次都必須查看全域常數的值，才知道變數含義</h4><ul>
<li>原因：常數命名不當，無法表達其含義</li>
</ul>
<h4 id="幫程式碼畫流程圖"><a href="#幫程式碼畫流程圖" class="headerlink" title="幫程式碼畫流程圖"></a>幫程式碼畫流程圖</h4><ul>
<li>原因：巢狀太深</li>
<li>例子：Laravel File Manager 原始碼（v1.0 以前的版本）</li>
</ul>
<p>在開發的時候可以稍微留意自己的操作（甚至可以錄影起來），觀察看看有沒有與以上事項相符。<br>在我閱讀《我的程式碼會說話》之後，才發覺寫程式的小細節，所以我決定來跟大家分享，分享以上情境被歸類在的命名問題。</p>
<h2 id="閱讀問題的五大分類-之-命名類的問題"><a href="#閱讀問題的五大分類-之-命名類的問題" class="headerlink" title="閱讀問題的五大分類 之 命名類的問題"></a>閱讀問題的五大分類 之 命名類的問題</h2><ul>
<li>沒有考慮呼叫時的情況</li>
</ul>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 例子：從班級（Grade）中取得學生的數量</div><div class="line">grade.getStudentsCount() // get 有點多餘</div><div class="line">grade.countStudents()    // 名稱聽起來像個動作，不知道到底會回傳什麼</div><div class="line">grade.students.size()    // 書寫容易，但 students 須為 public</div><div class="line">grade.size()             // 到底是什麼的大小？教室大小嗎？</div><div class="line">grade.studentsCount()    // 最精簡且語意清晰</div></pre></td></tr></table></figure>
</code></pre><ul>
<li>使用英文以外的語言命名<ul>
<li>例子：與其用 shuliang（數量）來為變數命名，不如直接用英文的 count</li>
</ul>
</li>
<li>命名與行為不一致（做的事情多餘或少於預期）<ul>
<li>例子：function 名為 update()，卻呼叫了 showData() &amp; writeToFile()</li>
</ul>
</li>
<li>無意義的命名<ul>
<li>例子：變數或是 function 名稱取名叫 <code>a</code>, <code>b</code>, <code>c</code>, <code>temp</code>, <code>result</code>, <code>retVal</code> 等等，不知所云。但用於迴圈中的 index 值 <code>i</code>, <code>j</code> 等等可以除外<ol>
<li>註解類的問題</li>
<li>結構類的問題</li>
<li>架構類的問題</li>
<li>風格類的問題</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>本篇節錄自《我的程式碼會說話》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;談到 UX 時，通常都是在討論介面直不直覺、漂亮與否、操作好不好上手等等。然而在開發專案時，還有一個很重要 UX，那就是程式碼的閱讀體驗。&lt;br&gt;
    
    </summary>
    
      <category term="後端技術" scheme="http://blog.unisharp.com/categories/%E5%BE%8C%E7%AB%AF%E6%8A%80%E8%A1%93/"/>
    
    
      <category term="程式設計" scheme="http://blog.unisharp.com/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
</feed>
